// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Walletrpc {

  /// <summary>Holder for reflection information generated from api.proto</summary>
  public static partial class ApiReflection {

    #region Descriptor
    /// <summary>File descriptor for api.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglhcGkucHJvdG8SCXdhbGxldHJwYyIQCg5WZXJzaW9uUmVxdWVzdCKCAQoP",
            "VmVyc2lvblJlc3BvbnNlEhYKDnZlcnNpb25fc3RyaW5nGAEgASgJEg0KBW1h",
            "am9yGAIgASgNEg0KBW1pbm9yGAMgASgNEg0KBXBhdGNoGAQgASgNEhIKCnBy",
            "ZXJlbGVhc2UYBSABKAkSFgoOYnVpbGRfbWV0YWRhdGEYBiABKAkimgQKElRy",
            "YW5zYWN0aW9uRGV0YWlscxIMCgRoYXNoGAEgASgMEhMKC3RyYW5zYWN0aW9u",
            "GAIgASgMEjMKBmRlYml0cxgDIAMoCzIjLndhbGxldHJwYy5UcmFuc2FjdGlv",
            "bkRldGFpbHMuSW5wdXQSNQoHY3JlZGl0cxgEIAMoCzIkLndhbGxldHJwYy5U",
            "cmFuc2FjdGlvbkRldGFpbHMuT3V0cHV0EgsKA2ZlZRgFIAEoAxIRCgl0aW1l",
            "c3RhbXAYBiABKAMSRwoQdHJhbnNhY3Rpb25fdHlwZRgHIAEoDjItLndhbGxl",
            "dHJwYy5UcmFuc2FjdGlvbkRldGFpbHMuVHJhbnNhY3Rpb25UeXBlGkkKBUlu",
            "cHV0Eg0KBWluZGV4GAEgASgNEhgKEHByZXZpb3VzX2FjY291bnQYAiABKA0S",
            "FwoPcHJldmlvdXNfYW1vdW50GAMgASgDGnIKBk91dHB1dBINCgVpbmRleBgB",
            "IAEoDRIPCgdhY2NvdW50GAIgASgNEhAKCGludGVybmFsGAMgASgIEg4KBmFt",
            "b3VudBgEIAEoAxIPCgdhZGRyZXNzGAUgASgJEhUKDW91dHB1dF9zY3JpcHQY",
            "BiABKAwiTQoPVHJhbnNhY3Rpb25UeXBlEgsKB1JFR1VMQVIQABITCg9USUNL",
            "RVRfUFVSQ0hBU0UQARIICgRWT1RFEAISDgoKUkVWT0NBVElPThADInQKDEJs",
            "b2NrRGV0YWlscxIMCgRoYXNoGAEgASgMEg4KBmhlaWdodBgCIAEoBRIRCgl0",
            "aW1lc3RhbXAYAyABKAMSMwoMdHJhbnNhY3Rpb25zGAQgAygLMh0ud2FsbGV0",
            "cnBjLlRyYW5zYWN0aW9uRGV0YWlscyI4Cg5BY2NvdW50QmFsYW5jZRIPCgdh",
            "Y2NvdW50GAEgASgNEhUKDXRvdGFsX2JhbGFuY2UYAiABKAMiDQoLUGluZ1Jl",
            "cXVlc3QiDgoMUGluZ1Jlc3BvbnNlIhAKDk5ldHdvcmtSZXF1ZXN0IikKD05l",
            "dHdvcmtSZXNwb25zZRIWCg5hY3RpdmVfbmV0d29yaxgBIAEoDSIsChRBY2Nv",
            "dW50TnVtYmVyUmVxdWVzdBIUCgxhY2NvdW50X25hbWUYASABKAkiLwoVQWNj",
            "b3VudE51bWJlclJlc3BvbnNlEhYKDmFjY291bnRfbnVtYmVyGAEgASgNIhEK",
            "D0FjY291bnRzUmVxdWVzdCKoAgoQQWNjb3VudHNSZXNwb25zZRI1CghhY2Nv",
            "dW50cxgBIAMoCzIjLndhbGxldHJwYy5BY2NvdW50c1Jlc3BvbnNlLkFjY291",
            "bnQSGgoSY3VycmVudF9ibG9ja19oYXNoGAIgASgMEhwKFGN1cnJlbnRfYmxv",
            "Y2tfaGVpZ2h0GAMgASgFGqIBCgdBY2NvdW50EhYKDmFjY291bnRfbnVtYmVy",
            "GAEgASgNEhQKDGFjY291bnRfbmFtZRgCIAEoCRIVCg10b3RhbF9iYWxhbmNl",
            "GAMgASgDEhoKEmV4dGVybmFsX2tleV9jb3VudBgEIAEoDRIaChJpbnRlcm5h",
            "bF9rZXlfY291bnQYBSABKA0SGgoSaW1wb3J0ZWRfa2V5X2NvdW50GAYgASgN",
            "IkAKFFJlbmFtZUFjY291bnRSZXF1ZXN0EhYKDmFjY291bnRfbnVtYmVyGAEg",
            "ASgNEhAKCG5ld19uYW1lGAIgASgJIhcKFVJlbmFtZUFjY291bnRSZXNwb25z",
            "ZSIlCg1SZXNjYW5SZXF1ZXN0EhQKDGJlZ2luX2hlaWdodBgBIAEoBSIrCg5S",
            "ZXNjYW5SZXNwb25zZRIZChFyZXNjYW5uZWRfdGhyb3VnaBgBIAEoBSI+ChJO",
            "ZXh0QWNjb3VudFJlcXVlc3QSEgoKcGFzc3BocmFzZRgBIAEoDBIUCgxhY2Nv",
            "dW50X25hbWUYAiABKAkiLQoTTmV4dEFjY291bnRSZXNwb25zZRIWCg5hY2Nv",
            "dW50X251bWJlchgBIAEoDSKLAQoSTmV4dEFkZHJlc3NSZXF1ZXN0Eg8KB2Fj",
            "Y291bnQYASABKA0SMAoEa2luZBgCIAEoDjIiLndhbGxldHJwYy5OZXh0QWRk",
            "cmVzc1JlcXVlc3QuS2luZCIyCgRLaW5kEhQKEEJJUDAwNDRfRVhURVJOQUwQ",
            "ABIUChBCSVAwMDQ0X0lOVEVSTkFMEAEiOgoTTmV4dEFkZHJlc3NSZXNwb25z",
            "ZRIPCgdhZGRyZXNzGAEgASgJEhIKCnB1YmxpY19rZXkYAiABKAkiegoXSW1w",
            "b3J0UHJpdmF0ZUtleVJlcXVlc3QSEgoKcGFzc3BocmFzZRgBIAEoDBIPCgdh",
            "Y2NvdW50GAIgASgNEhcKD3ByaXZhdGVfa2V5X3dpZhgDIAEoCRIOCgZyZXNj",
            "YW4YBCABKAgSEQoJc2Nhbl9mcm9tGAUgASgFIhoKGEltcG9ydFByaXZhdGVL",
            "ZXlSZXNwb25zZSJcChNJbXBvcnRTY3JpcHRSZXF1ZXN0EhIKCnBhc3NwaHJh",
            "c2UYASABKAwSDgoGc2NyaXB0GAIgASgMEg4KBnJlc2NhbhgDIAEoCBIRCglz",
            "Y2FuX2Zyb20YBCABKAUiFgoUSW1wb3J0U2NyaXB0UmVzcG9uc2UiSAoOQmFs",
            "YW5jZVJlcXVlc3QSFgoOYWNjb3VudF9udW1iZXIYASABKA0SHgoWcmVxdWly",
            "ZWRfY29uZmlybWF0aW9ucxgCIAEoBSJMCg9CYWxhbmNlUmVzcG9uc2USDQoF",
            "dG90YWwYASABKAMSEQoJc3BlbmRhYmxlGAIgASgDEhcKD2ltbWF0dXJlX3Jl",
            "d2FyZBgDIAEoAyKxAQoWR2V0VHJhbnNhY3Rpb25zUmVxdWVzdBIbChNzdGFy",
            "dGluZ19ibG9ja19oYXNoGAEgASgMEh0KFXN0YXJ0aW5nX2Jsb2NrX2hlaWdo",
            "dBgCIAEoERIZChFlbmRpbmdfYmxvY2tfaGFzaBgDIAEoDBIbChNlbmRpbmdf",
            "YmxvY2tfaGVpZ2h0GAQgASgFEiMKG21pbmltdW1fcmVjZW50X3RyYW5zYWN0",
            "aW9ucxgFIAEoBSKLAQoXR2V0VHJhbnNhY3Rpb25zUmVzcG9uc2USMwoSbWlu",
            "ZWRfdHJhbnNhY3Rpb25zGAEgASgLMhcud2FsbGV0cnBjLkJsb2NrRGV0YWls",
            "cxI7ChR1bm1pbmVkX3RyYW5zYWN0aW9ucxgCIAMoCzIdLndhbGxldHJwYy5U",
            "cmFuc2FjdGlvbkRldGFpbHMiFAoSVGlja2V0UHJpY2VSZXF1ZXN0IjsKE1Rp",
            "Y2tldFByaWNlUmVzcG9uc2USFAoMdGlja2V0X3ByaWNlGAEgASgDEg4KBmhl",
            "aWdodBgCIAEoBSISChBTdGFrZUluZm9SZXF1ZXN0ItABChFTdGFrZUluZm9S",
            "ZXNwb25zZRIRCglwb29sX3NpemUYASABKA0SFwoPYWxsX21lbXBvb2xfdGl4",
            "GAIgASgNEhcKD293bl9tZW1wb29sX3RpeBgDIAEoDRIQCghpbW1hdHVyZRgE",
            "IAEoDRIMCgRsaXZlGAUgASgNEg0KBXZvdGVkGAYgASgNEg4KBm1pc3NlZBgH",
            "IAEoDRIPCgdyZXZva2VkGAggASgNEg8KB2V4cGlyZWQYCSABKA0SFQoNdG90",
            "YWxfc3Vic2lkeRgKIAEoAyKeAQoXQ2hhbmdlUGFzc3BocmFzZVJlcXVlc3QS",
            "MwoDa2V5GAEgASgOMiYud2FsbGV0cnBjLkNoYW5nZVBhc3NwaHJhc2VSZXF1",
            "ZXN0LktleRIWCg5vbGRfcGFzc3BocmFzZRgCIAEoDBIWCg5uZXdfcGFzc3Bo",
            "cmFzZRgDIAEoDCIeCgNLZXkSCwoHUFJJVkFURRAAEgoKBlBVQkxJQxABIhoK",
            "GENoYW5nZVBhc3NwaHJhc2VSZXNwb25zZSKjAQoWRnVuZFRyYW5zYWN0aW9u",
            "UmVxdWVzdBIPCgdhY2NvdW50GAEgASgNEhUKDXRhcmdldF9hbW91bnQYAiAB",
            "KAMSHgoWcmVxdWlyZWRfY29uZmlybWF0aW9ucxgDIAEoBRIiChppbmNsdWRl",
            "X2ltbWF0dXJlX2NvaW5iYXNlcxgEIAEoCBIdChVpbmNsdWRlX2NoYW5nZV9z",
            "Y3JpcHQYBSABKAgitwIKF0Z1bmRUcmFuc2FjdGlvblJlc3BvbnNlEksKEHNl",
            "bGVjdGVkX291dHB1dHMYASADKAsyMS53YWxsZXRycGMuRnVuZFRyYW5zYWN0",
            "aW9uUmVzcG9uc2UuUHJldmlvdXNPdXRwdXQSFAoMdG90YWxfYW1vdW50GAIg",
            "ASgDEhgKEGNoYW5nZV9wa19zY3JpcHQYAyABKAwangEKDlByZXZpb3VzT3V0",
            "cHV0EhgKEHRyYW5zYWN0aW9uX2hhc2gYASABKAwSFAoMb3V0cHV0X2luZGV4",
            "GAIgASgNEg4KBmFtb3VudBgDIAEoAxIRCglwa19zY3JpcHQYBCABKAwSFAoM",
            "cmVjZWl2ZV90aW1lGAUgASgDEhUKDWZyb21fY29pbmJhc2UYBiABKAgSDAoE",
            "dHJlZRgHIAEoBSLcBAobQ29uc3RydWN0VHJhbnNhY3Rpb25SZXF1ZXN0EhYK",
            "DnNvdXJjZV9hY2NvdW50GAEgASgNEh4KFnJlcXVpcmVkX2NvbmZpcm1hdGlv",
            "bnMYAiABKAUSEgoKZmVlX3Blcl9rYhgDIAEoBRJjChpvdXRwdXRfc2VsZWN0",
            "aW9uX2FsZ29yaXRobRgEIAEoDjI/LndhbGxldHJwYy5Db25zdHJ1Y3RUcmFu",
            "c2FjdGlvblJlcXVlc3QuT3V0cHV0U2VsZWN0aW9uQWxnb3JpdGhtEkkKEm5v",
            "bl9jaGFuZ2Vfb3V0cHV0cxgFIAMoCzItLndhbGxldHJwYy5Db25zdHJ1Y3RU",
            "cmFuc2FjdGlvblJlcXVlc3QuT3V0cHV0ElQKEmNoYW5nZV9kZXN0aW5hdGlv",
            "bhgGIAEoCzI4LndhbGxldHJwYy5Db25zdHJ1Y3RUcmFuc2FjdGlvblJlcXVl",
            "c3QuT3V0cHV0RGVzdGluYXRpb24aTAoRT3V0cHV0RGVzdGluYXRpb24SDwoH",
            "YWRkcmVzcxgBIAEoCRIOCgZzY3JpcHQYAiABKAwSFgoOc2NyaXB0X3ZlcnNp",
            "b24YAyABKA0aZwoGT3V0cHV0Ek0KC2Rlc3RpbmF0aW9uGAEgASgLMjgud2Fs",
            "bGV0cnBjLkNvbnN0cnVjdFRyYW5zYWN0aW9uUmVxdWVzdC5PdXRwdXREZXN0",
            "aW5hdGlvbhIOCgZhbW91bnQYAiABKAMiNAoYT3V0cHV0U2VsZWN0aW9uQWxn",
            "b3JpdGhtEg8KC1VOU1BFQ0lGSUVEEAASBwoDQUxMEAEingEKHENvbnN0cnVj",
            "dFRyYW5zYWN0aW9uUmVzcG9uc2USHAoUdW5zaWduZWRfdHJhbnNhY3Rpb24Y",
            "ASABKAwSJAocdG90YWxfcHJldmlvdXNfb3V0cHV0X2Ftb3VudBgCIAEoAxIb",
            "ChN0b3RhbF9vdXRwdXRfYW1vdW50GAMgASgDEh0KFWVzdGltYXRlZF9zaWdu",
            "ZWRfc2l6ZRgEIAEoDSJjChZTaWduVHJhbnNhY3Rpb25SZXF1ZXN0EhIKCnBh",
            "c3NwaHJhc2UYASABKAwSHgoWc2VyaWFsaXplZF90cmFuc2FjdGlvbhgCIAEo",
            "DBIVCg1pbnB1dF9pbmRleGVzGAMgAygNIk4KF1NpZ25UcmFuc2FjdGlvblJl",
            "c3BvbnNlEhMKC3RyYW5zYWN0aW9uGAEgASgMEh4KFnVuc2lnbmVkX2lucHV0",
            "X2luZGV4ZXMYAiADKA0iNwoZUHVibGlzaFRyYW5zYWN0aW9uUmVxdWVzdBIa",
            "ChJzaWduZWRfdHJhbnNhY3Rpb24YASABKAwiNgoaUHVibGlzaFRyYW5zYWN0",
            "aW9uUmVzcG9uc2USGAoQdHJhbnNhY3Rpb25faGFzaBgBIAEoDCL8AQoWUHVy",
            "Y2hhc2VUaWNrZXRzUmVxdWVzdBISCgpwYXNzcGhyYXNlGAEgASgMEg8KB2Fj",
            "Y291bnQYAiABKA0SEwoLc3BlbmRfbGltaXQYAyABKAMSHgoWcmVxdWlyZWRf",
            "Y29uZmlybWF0aW9ucxgEIAEoDRIWCg50aWNrZXRfYWRkcmVzcxgFIAEoCRIT",
            "CgtudW1fdGlja2V0cxgGIAEoDRIUCgxwb29sX2FkZHJlc3MYByABKAkSEQoJ",
            "cG9vbF9mZWVzGAggASgBEg4KBmV4cGlyeRgJIAEoDRIOCgZ0eF9mZWUYCiAB",
            "KAMSEgoKdGlja2V0X2ZlZRgLIAEoAyIwChdQdXJjaGFzZVRpY2tldHNSZXNw",
            "b25zZRIVCg10aWNrZXRfaGFzaGVzGAEgAygMIioKFFJldm9rZVRpY2tldHNS",
            "ZXF1ZXN0EhIKCnBhc3NwaHJhc2UYASABKAwiFwoVUmV2b2tlVGlja2V0c1Jl",
            "c3BvbnNlIh4KHExvYWRBY3RpdmVEYXRhRmlsdGVyc1JlcXVlc3QiHwodTG9h",
            "ZEFjdGl2ZURhdGFGaWx0ZXJzUmVzcG9uc2UiIQofVHJhbnNhY3Rpb25Ob3Rp",
            "ZmljYXRpb25zUmVxdWVzdCLOAQogVHJhbnNhY3Rpb25Ob3RpZmljYXRpb25z",
            "UmVzcG9uc2USMAoPYXR0YWNoZWRfYmxvY2tzGAEgAygLMhcud2FsbGV0cnBj",
            "LkJsb2NrRGV0YWlscxIXCg9kZXRhY2hlZF9ibG9ja3MYAiADKAwSOwoUdW5t",
            "aW5lZF90cmFuc2FjdGlvbnMYAyADKAsyHS53YWxsZXRycGMuVHJhbnNhY3Rp",
            "b25EZXRhaWxzEiIKGnVubWluZWRfdHJhbnNhY3Rpb25faGFzaGVzGAQgAygM",
            "Ih0KG0FjY291bnROb3RpZmljYXRpb25zUmVxdWVzdCKgAQocQWNjb3VudE5v",
            "dGlmaWNhdGlvbnNSZXNwb25zZRIWCg5hY2NvdW50X251bWJlchgBIAEoDRIU",
            "CgxhY2NvdW50X25hbWUYAiABKAkSGgoSZXh0ZXJuYWxfa2V5X2NvdW50GAMg",
            "ASgNEhoKEmludGVybmFsX2tleV9jb3VudBgEIAEoDRIaChJpbXBvcnRlZF9r",
            "ZXlfY291bnQYBSABKA0iWgoTQ3JlYXRlV2FsbGV0UmVxdWVzdBIZChFwdWJs",
            "aWNfcGFzc3BocmFzZRgBIAEoDBIaChJwcml2YXRlX3Bhc3NwaHJhc2UYAiAB",
            "KAwSDAoEc2VlZBgDIAEoDCIWChRDcmVhdGVXYWxsZXRSZXNwb25zZSIuChFP",
            "cGVuV2FsbGV0UmVxdWVzdBIZChFwdWJsaWNfcGFzc3BocmFzZRgBIAEoDCIU",
            "ChJPcGVuV2FsbGV0UmVzcG9uc2UiFAoSQ2xvc2VXYWxsZXRSZXF1ZXN0IhUK",
            "E0Nsb3NlV2FsbGV0UmVzcG9uc2UiFQoTV2FsbGV0RXhpc3RzUmVxdWVzdCIm",
            "ChRXYWxsZXRFeGlzdHNSZXNwb25zZRIOCgZleGlzdHMYASABKAgibAoYU3Rh",
            "cnRDb25zZW5zdXNScGNSZXF1ZXN0EhcKD25ldHdvcmtfYWRkcmVzcxgBIAEo",
            "CRIQCgh1c2VybmFtZRgCIAEoCRIQCghwYXNzd29yZBgDIAEoDBITCgtjZXJ0",
            "aWZpY2F0ZRgEIAEoDCIbChlTdGFydENvbnNlbnN1c1JwY1Jlc3BvbnNlIlEK",
            "GERpc2NvdmVyQWRkcmVzc2VzUmVxdWVzdBIZChFkaXNjb3Zlcl9hY2NvdW50",
            "cxgBIAEoCBIaChJwcml2YXRlX3Bhc3NwaHJhc2UYAiABKAwiGwoZRGlzY292",
            "ZXJBZGRyZXNzZXNSZXNwb25zZSImCiRTdWJzY3JpYmVUb0Jsb2NrTm90aWZp",
            "Y2F0aW9uc1JlcXVlc3QiJwolU3Vic2NyaWJlVG9CbG9ja05vdGlmaWNhdGlv",
            "bnNSZXNwb25zZSIVChNGZXRjaEhlYWRlcnNSZXF1ZXN0IrsBChRGZXRjaEhl",
            "YWRlcnNSZXNwb25zZRIdChVmZXRjaGVkX2hlYWRlcnNfY291bnQYASABKA0S",
            "HAoUZmlyc3RfbmV3X2Jsb2NrX2hhc2gYAiABKAwSHgoWZmlyc3RfbmV3X2Js",
            "b2NrX2hlaWdodBgDIAEoBRIhChltYWluX2NoYWluX3RpcF9ibG9ja19oYXNo",
            "GAQgASgMEiMKG21haW5fY2hhaW5fdGlwX2Jsb2NrX2hlaWdodBgFIAEoBSIw",
            "ChlHZW5lcmF0ZVJhbmRvbVNlZWRSZXF1ZXN0EhMKC3NlZWRfbGVuZ3RoGAEg",
            "ASgNIlkKGkdlbmVyYXRlUmFuZG9tU2VlZFJlc3BvbnNlEhIKCnNlZWRfYnl0",
            "ZXMYASABKAwSEAoIc2VlZF9oZXgYAiABKAkSFQoNc2VlZF9tbmVtb25pYxgD",
            "IAEoCSInChFEZWNvZGVTZWVkUmVxdWVzdBISCgp1c2VyX2lucHV0GAEgASgJ",
            "IioKEkRlY29kZVNlZWRSZXNwb25zZRIUCgxkZWNvZGVkX3NlZWQYASABKAwi",
            "gQIKFVN0YXJ0QXV0b0J1eWVyUmVxdWVzdBISCgpwYXNzcGhyYXNlGAEgASgM",
            "Eg8KB2FjY291bnQYAiABKA0SGwoTYmFsYW5jZV90b19tYWludGFpbhgDIAEo",
            "AxIWCg5tYXhfZmVlX3Blcl9rYhgEIAEoAxIaChJtYXhfcHJpY2VfcmVsYXRp",
            "dmUYBSABKAESGgoSbWF4X3ByaWNlX2Fic29sdXRlGAYgASgDEhYKDnZvdGlu",
            "Z19hZGRyZXNzGAcgASgJEhQKDHBvb2xfYWRkcmVzcxgIIAEoCRIRCglwb29s",
            "X2ZlZXMYCSABKAESFQoNbWF4X3Blcl9ibG9jaxgKIAEoAyIYChZTdGFydEF1",
            "dG9CdXllclJlc3BvbnNlIhYKFFN0b3BBdXRvQnV5ZXJSZXF1ZXN0IhcKFVN0",
            "b3BBdXRvQnV5ZXJSZXNwb25zZSIaChhUaWNrZXRCdXllckNvbmZpZ1JlcXVl",
            "c3Qi9QMKGVRpY2tldEJ1eWVyQ29uZmlnUmVzcG9uc2USDwoHYWNjb3VudBgB",
            "IAEoDRIWCg5hdmdfcHJpY2VfbW9kZRgCIAEoCRIbChNhdmdfcHJpY2VWV0FQ",
            "X2RlbHRhGAMgASgDEhsKE2JhbGFuY2VfdG9fbWFpbnRhaW4YBCABKAMSFQoN",
            "YmxvY2tzX3RvX2F2ZxgFIAEoAxIdChVkb250X3dhaXRfZm9yX3RpY2tldHMY",
            "BiABKAgSFAoMZXhwaXJ5X2RlbHRhGAcgASgDEhIKCmZlZV9zb3VyY2UYCCAB",
            "KAkSGgoSZmVlX3RhcmdldF9zY2FsaW5nGAkgASgBEg8KB21pbl9mZWUYCiAB",
            "KAMSDwoHbWF4X2ZlZRgMIAEoAxIVCg1tYXhfcGVyX2Jsb2NrGA0gASgDEhoK",
            "Em1heF9wcmljZV9hYnNvbHV0ZRgOIAEoAxIaChJtYXhfcHJpY2VfcmVsYXRp",
            "dmUYDyABKAESFgoObWF4X2luX21lbXBvb2wYESABKAMSFAoMcG9vbF9hZGRy",
            "ZXNzGBIgASgJEhEKCXBvb2xfZmVlcxgTIAEoARIfChdzcHJlYWRfdGlja2V0",
            "X3B1cmNoYXNlcxgUIAEoCBIWCg52b3RpbmdfYWRkcmVzcxgVIAEoCRIOCgZ0",
            "eF9mZWUYFiABKAMiJAoRU2V0QWNjb3VudFJlcXVlc3QSDwoHYWNjb3VudBgB",
            "IAEoDSIUChJTZXRBY2NvdW50UmVzcG9uc2UiOgobU2V0QmFsYW5jZVRvTWFp",
            "bnRhaW5SZXF1ZXN0EhsKE2JhbGFuY2VfdG9fbWFpbnRhaW4YASABKAMiHgoc",
            "U2V0QmFsYW5jZVRvTWFpbnRhaW5SZXNwb25zZSIqChBTZXRNYXhGZWVSZXF1",
            "ZXN0EhYKDm1heF9mZWVfcGVyX2tiGAEgASgDIhMKEVNldE1heEZlZVJlc3Bv",
            "bnNlIjgKGlNldE1heFByaWNlUmVsYXRpdmVSZXF1ZXN0EhoKEm1heF9wcmlj",
            "ZV9yZWxhdGl2ZRgBIAEoASIdChtTZXRNYXhQcmljZVJlbGF0aXZlUmVzcG9u",
            "c2UiOAoaU2V0TWF4UHJpY2VBYnNvbHV0ZVJlcXVlc3QSGgoSbWF4X3ByaWNl",
            "X2Fic29sdXRlGAEgASgDIh0KG1NldE1heFByaWNlQWJzb2x1dGVSZXNwb25z",
            "ZSIxChdTZXRWb3RpbmdBZGRyZXNzUmVxdWVzdBIWCg52b3RpbmdfYWRkcmVz",
            "cxgBIAEoCSIaChhTZXRWb3RpbmdBZGRyZXNzUmVzcG9uc2UiLQoVU2V0UG9v",
            "bEFkZHJlc3NSZXF1ZXN0EhQKDHBvb2xfYWRkcmVzcxgBIAEoCSIYChZTZXRQ",
            "b29sQWRkcmVzc1Jlc3BvbnNlIicKElNldFBvb2xGZWVzUmVxdWVzdBIRCglw",
            "b29sX2ZlZXMYASABKAEiFQoTU2V0UG9vbEZlZXNSZXNwb25zZSIuChVTZXRN",
            "YXhQZXJCbG9ja1JlcXVlc3QSFQoNbWF4X3Blcl9ibG9jaxgBIAEoAyIYChZT",
            "ZXRNYXhQZXJCbG9ja1Jlc3BvbnNlIhAKDkFnZW5kYXNSZXF1ZXN0IskCCg9B",
            "Z2VuZGFzUmVzcG9uc2USDwoHdmVyc2lvbhgBIAEoDRIyCgdhZ2VuZGFzGAIg",
            "AygLMiEud2FsbGV0cnBjLkFnZW5kYXNSZXNwb25zZS5BZ2VuZGEalAEKBkFn",
            "ZW5kYRIKCgJpZBgBIAEoCRITCgtkZXNjcmlwdGlvbhgCIAEoCRIMCgRtYXNr",
            "GAMgASgNEjIKB2Nob2ljZXMYBCADKAsyIS53YWxsZXRycGMuQWdlbmRhc1Jl",
            "c3BvbnNlLkNob2ljZRISCgpzdGFydF90aW1lGAUgASgDEhMKC2V4cGlyZV90",
            "aW1lGAYgASgDGloKBkNob2ljZRIKCgJpZBgBIAEoCRITCgtkZXNjcmlwdGlv",
            "bhgCIAEoCRIMCgRiaXRzGAMgASgNEhIKCmlzX2Fic3RhaW4YBCABKAgSDQoF",
            "aXNfbm8YBSABKAgiFAoSVm90ZUNob2ljZXNSZXF1ZXN0ItgBChNWb3RlQ2hv",
            "aWNlc1Jlc3BvbnNlEg8KB3ZlcnNpb24YASABKA0SNgoHY2hvaWNlcxgCIAMo",
            "CzIlLndhbGxldHJwYy5Wb3RlQ2hvaWNlc1Jlc3BvbnNlLkNob2ljZRIQCgh2",
            "b3RlYml0cxgDIAEoDRpmCgZDaG9pY2USEQoJYWdlbmRhX2lkGAEgASgJEhoK",
            "EmFnZW5kYV9kZXNjcmlwdGlvbhgCIAEoCRIRCgljaG9pY2VfaWQYAyABKAkS",
            "GgoSY2hvaWNlX2Rlc2NyaXB0aW9uGAQgASgJIoEBChVTZXRWb3RlQ2hvaWNl",
            "c1JlcXVlc3QSOAoHY2hvaWNlcxgBIAMoCzInLndhbGxldHJwYy5TZXRWb3Rl",
            "Q2hvaWNlc1JlcXVlc3QuQ2hvaWNlGi4KBkNob2ljZRIRCglhZ2VuZGFfaWQY",
            "ASABKAkSEQoJY2hvaWNlX2lkGAIgASgJIioKFlNldFZvdGVDaG9pY2VzUmVz",
            "cG9uc2USEAoIdm90ZWJpdHMYASABKA0yUgoOVmVyc2lvblNlcnZpY2USQAoH",
            "VmVyc2lvbhIZLndhbGxldHJwYy5WZXJzaW9uUmVxdWVzdBoaLndhbGxldHJw",
            "Yy5WZXJzaW9uUmVzcG9uc2UyjxAKDVdhbGxldFNlcnZpY2USNwoEUGluZxIW",
            "LndhbGxldHJwYy5QaW5nUmVxdWVzdBoXLndhbGxldHJwYy5QaW5nUmVzcG9u",
            "c2USQAoHTmV0d29yaxIZLndhbGxldHJwYy5OZXR3b3JrUmVxdWVzdBoaLndh",
            "bGxldHJwYy5OZXR3b3JrUmVzcG9uc2USUgoNQWNjb3VudE51bWJlchIfLndh",
            "bGxldHJwYy5BY2NvdW50TnVtYmVyUmVxdWVzdBogLndhbGxldHJwYy5BY2Nv",
            "dW50TnVtYmVyUmVzcG9uc2USQwoIQWNjb3VudHMSGi53YWxsZXRycGMuQWNj",
            "b3VudHNSZXF1ZXN0Ghsud2FsbGV0cnBjLkFjY291bnRzUmVzcG9uc2USQAoH",
            "QmFsYW5jZRIZLndhbGxldHJwYy5CYWxhbmNlUmVxdWVzdBoaLndhbGxldHJw",
            "Yy5CYWxhbmNlUmVzcG9uc2USWgoPR2V0VHJhbnNhY3Rpb25zEiEud2FsbGV0",
            "cnBjLkdldFRyYW5zYWN0aW9uc1JlcXVlc3QaIi53YWxsZXRycGMuR2V0VHJh",
            "bnNhY3Rpb25zUmVzcG9uc2UwARJMCgtUaWNrZXRQcmljZRIdLndhbGxldHJw",
            "Yy5UaWNrZXRQcmljZVJlcXVlc3QaHi53YWxsZXRycGMuVGlja2V0UHJpY2VS",
            "ZXNwb25zZRJGCglTdGFrZUluZm8SGy53YWxsZXRycGMuU3Rha2VJbmZvUmVx",
            "dWVzdBocLndhbGxldHJwYy5TdGFrZUluZm9SZXNwb25zZRJ1ChhUcmFuc2Fj",
            "dGlvbk5vdGlmaWNhdGlvbnMSKi53YWxsZXRycGMuVHJhbnNhY3Rpb25Ob3Rp",
            "ZmljYXRpb25zUmVxdWVzdBorLndhbGxldHJwYy5UcmFuc2FjdGlvbk5vdGlm",
            "aWNhdGlvbnNSZXNwb25zZTABEmkKFEFjY291bnROb3RpZmljYXRpb25zEiYu",
            "d2FsbGV0cnBjLkFjY291bnROb3RpZmljYXRpb25zUmVxdWVzdBonLndhbGxl",
            "dHJwYy5BY2NvdW50Tm90aWZpY2F0aW9uc1Jlc3BvbnNlMAESWwoQQ2hhbmdl",
            "UGFzc3BocmFzZRIiLndhbGxldHJwYy5DaGFuZ2VQYXNzcGhyYXNlUmVxdWVz",
            "dBojLndhbGxldHJwYy5DaGFuZ2VQYXNzcGhyYXNlUmVzcG9uc2USUgoNUmVu",
            "YW1lQWNjb3VudBIfLndhbGxldHJwYy5SZW5hbWVBY2NvdW50UmVxdWVzdBog",
            "LndhbGxldHJwYy5SZW5hbWVBY2NvdW50UmVzcG9uc2USPwoGUmVzY2FuEhgu",
            "d2FsbGV0cnBjLlJlc2NhblJlcXVlc3QaGS53YWxsZXRycGMuUmVzY2FuUmVz",
            "cG9uc2UwARJMCgtOZXh0QWNjb3VudBIdLndhbGxldHJwYy5OZXh0QWNjb3Vu",
            "dFJlcXVlc3QaHi53YWxsZXRycGMuTmV4dEFjY291bnRSZXNwb25zZRJMCgtO",
            "ZXh0QWRkcmVzcxIdLndhbGxldHJwYy5OZXh0QWRkcmVzc1JlcXVlc3QaHi53",
            "YWxsZXRycGMuTmV4dEFkZHJlc3NSZXNwb25zZRJbChBJbXBvcnRQcml2YXRl",
            "S2V5EiIud2FsbGV0cnBjLkltcG9ydFByaXZhdGVLZXlSZXF1ZXN0GiMud2Fs",
            "bGV0cnBjLkltcG9ydFByaXZhdGVLZXlSZXNwb25zZRJPCgxJbXBvcnRTY3Jp",
            "cHQSHi53YWxsZXRycGMuSW1wb3J0U2NyaXB0UmVxdWVzdBofLndhbGxldHJw",
            "Yy5JbXBvcnRTY3JpcHRSZXNwb25zZRJYCg9GdW5kVHJhbnNhY3Rpb24SIS53",
            "YWxsZXRycGMuRnVuZFRyYW5zYWN0aW9uUmVxdWVzdBoiLndhbGxldHJwYy5G",
            "dW5kVHJhbnNhY3Rpb25SZXNwb25zZRJnChRDb25zdHJ1Y3RUcmFuc2FjdGlv",
            "bhImLndhbGxldHJwYy5Db25zdHJ1Y3RUcmFuc2FjdGlvblJlcXVlc3QaJy53",
            "YWxsZXRycGMuQ29uc3RydWN0VHJhbnNhY3Rpb25SZXNwb25zZRJYCg9TaWdu",
            "VHJhbnNhY3Rpb24SIS53YWxsZXRycGMuU2lnblRyYW5zYWN0aW9uUmVxdWVz",
            "dBoiLndhbGxldHJwYy5TaWduVHJhbnNhY3Rpb25SZXNwb25zZRJhChJQdWJs",
            "aXNoVHJhbnNhY3Rpb24SJC53YWxsZXRycGMuUHVibGlzaFRyYW5zYWN0aW9u",
            "UmVxdWVzdBolLndhbGxldHJwYy5QdWJsaXNoVHJhbnNhY3Rpb25SZXNwb25z",
            "ZRJYCg9QdXJjaGFzZVRpY2tldHMSIS53YWxsZXRycGMuUHVyY2hhc2VUaWNr",
            "ZXRzUmVxdWVzdBoiLndhbGxldHJwYy5QdXJjaGFzZVRpY2tldHNSZXNwb25z",
            "ZRJSCg1SZXZva2VUaWNrZXRzEh8ud2FsbGV0cnBjLlJldm9rZVRpY2tldHNS",
            "ZXF1ZXN0GiAud2FsbGV0cnBjLlJldm9rZVRpY2tldHNSZXNwb25zZRJqChVM",
            "b2FkQWN0aXZlRGF0YUZpbHRlcnMSJy53YWxsZXRycGMuTG9hZEFjdGl2ZURh",
            "dGFGaWx0ZXJzUmVxdWVzdBooLndhbGxldHJwYy5Mb2FkQWN0aXZlRGF0YUZp",
            "bHRlcnNSZXNwb25zZTLmBQoTV2FsbGV0TG9hZGVyU2VydmljZRJPCgxXYWxs",
            "ZXRFeGlzdHMSHi53YWxsZXRycGMuV2FsbGV0RXhpc3RzUmVxdWVzdBofLndh",
            "bGxldHJwYy5XYWxsZXRFeGlzdHNSZXNwb25zZRJPCgxDcmVhdGVXYWxsZXQS",
            "Hi53YWxsZXRycGMuQ3JlYXRlV2FsbGV0UmVxdWVzdBofLndhbGxldHJwYy5D",
            "cmVhdGVXYWxsZXRSZXNwb25zZRJJCgpPcGVuV2FsbGV0Ehwud2FsbGV0cnBj",
            "Lk9wZW5XYWxsZXRSZXF1ZXN0Gh0ud2FsbGV0cnBjLk9wZW5XYWxsZXRSZXNw",
            "b25zZRJMCgtDbG9zZVdhbGxldBIdLndhbGxldHJwYy5DbG9zZVdhbGxldFJl",
            "cXVlc3QaHi53YWxsZXRycGMuQ2xvc2VXYWxsZXRSZXNwb25zZRJeChFTdGFy",
            "dENvbnNlbnN1c1JwYxIjLndhbGxldHJwYy5TdGFydENvbnNlbnN1c1JwY1Jl",
            "cXVlc3QaJC53YWxsZXRycGMuU3RhcnRDb25zZW5zdXNScGNSZXNwb25zZRJe",
            "ChFEaXNjb3ZlckFkZHJlc3NlcxIjLndhbGxldHJwYy5EaXNjb3ZlckFkZHJl",
            "c3Nlc1JlcXVlc3QaJC53YWxsZXRycGMuRGlzY292ZXJBZGRyZXNzZXNSZXNw",
            "b25zZRKCAQodU3Vic2NyaWJlVG9CbG9ja05vdGlmaWNhdGlvbnMSLy53YWxs",
            "ZXRycGMuU3Vic2NyaWJlVG9CbG9ja05vdGlmaWNhdGlvbnNSZXF1ZXN0GjAu",
            "d2FsbGV0cnBjLlN1YnNjcmliZVRvQmxvY2tOb3RpZmljYXRpb25zUmVzcG9u",
            "c2USTwoMRmV0Y2hIZWFkZXJzEh4ud2FsbGV0cnBjLkZldGNoSGVhZGVyc1Jl",
            "cXVlc3QaHy53YWxsZXRycGMuRmV0Y2hIZWFkZXJzUmVzcG9uc2UywAgKElRp",
            "Y2tldEJ1eWVyU2VydmljZRJVCg5TdGFydEF1dG9CdXllchIgLndhbGxldHJw",
            "Yy5TdGFydEF1dG9CdXllclJlcXVlc3QaIS53YWxsZXRycGMuU3RhcnRBdXRv",
            "QnV5ZXJSZXNwb25zZRJSCg1TdG9wQXV0b0J1eWVyEh8ud2FsbGV0cnBjLlN0",
            "b3BBdXRvQnV5ZXJSZXF1ZXN0GiAud2FsbGV0cnBjLlN0b3BBdXRvQnV5ZXJS",
            "ZXNwb25zZRJeChFUaWNrZXRCdXllckNvbmZpZxIjLndhbGxldHJwYy5UaWNr",
            "ZXRCdXllckNvbmZpZ1JlcXVlc3QaJC53YWxsZXRycGMuVGlja2V0QnV5ZXJD",
            "b25maWdSZXNwb25zZRJJCgpTZXRBY2NvdW50Ehwud2FsbGV0cnBjLlNldEFj",
            "Y291bnRSZXF1ZXN0Gh0ud2FsbGV0cnBjLlNldEFjY291bnRSZXNwb25zZRJn",
            "ChRTZXRCYWxhbmNlVG9NYWludGFpbhImLndhbGxldHJwYy5TZXRCYWxhbmNl",
            "VG9NYWludGFpblJlcXVlc3QaJy53YWxsZXRycGMuU2V0QmFsYW5jZVRvTWFp",
            "bnRhaW5SZXNwb25zZRJGCglTZXRNYXhGZWUSGy53YWxsZXRycGMuU2V0TWF4",
            "RmVlUmVxdWVzdBocLndhbGxldHJwYy5TZXRNYXhGZWVSZXNwb25zZRJkChNT",
            "ZXRNYXhQcmljZVJlbGF0aXZlEiUud2FsbGV0cnBjLlNldE1heFByaWNlUmVs",
            "YXRpdmVSZXF1ZXN0GiYud2FsbGV0cnBjLlNldE1heFByaWNlUmVsYXRpdmVS",
            "ZXNwb25zZRJkChNTZXRNYXhQcmljZUFic29sdXRlEiUud2FsbGV0cnBjLlNl",
            "dE1heFByaWNlQWJzb2x1dGVSZXF1ZXN0GiYud2FsbGV0cnBjLlNldE1heFBy",
            "aWNlQWJzb2x1dGVSZXNwb25zZRJbChBTZXRWb3RpbmdBZGRyZXNzEiIud2Fs",
            "bGV0cnBjLlNldFZvdGluZ0FkZHJlc3NSZXF1ZXN0GiMud2FsbGV0cnBjLlNl",
            "dFZvdGluZ0FkZHJlc3NSZXNwb25zZRJVCg5TZXRQb29sQWRkcmVzcxIgLndh",
            "bGxldHJwYy5TZXRQb29sQWRkcmVzc1JlcXVlc3QaIS53YWxsZXRycGMuU2V0",
            "UG9vbEFkZHJlc3NSZXNwb25zZRJMCgtTZXRQb29sRmVlcxIdLndhbGxldHJw",
            "Yy5TZXRQb29sRmVlc1JlcXVlc3QaHi53YWxsZXRycGMuU2V0UG9vbEZlZXNS",
            "ZXNwb25zZRJVCg5TZXRNYXhQZXJCbG9jaxIgLndhbGxldHJwYy5TZXRNYXhQ",
            "ZXJCbG9ja1JlcXVlc3QaIS53YWxsZXRycGMuU2V0TWF4UGVyQmxvY2tSZXNw",
            "b25zZTK7AQoLU2VlZFNlcnZpY2USYQoSR2VuZXJhdGVSYW5kb21TZWVkEiQu",
            "d2FsbGV0cnBjLkdlbmVyYXRlUmFuZG9tU2VlZFJlcXVlc3QaJS53YWxsZXRy",
            "cGMuR2VuZXJhdGVSYW5kb21TZWVkUmVzcG9uc2USSQoKRGVjb2RlU2VlZBIc",
            "LndhbGxldHJwYy5EZWNvZGVTZWVkUmVxdWVzdBodLndhbGxldHJwYy5EZWNv",
            "ZGVTZWVkUmVzcG9uc2UyUQoNQWdlbmRhU2VydmljZRJACgdBZ2VuZGFzEhku",
            "d2FsbGV0cnBjLkFnZW5kYXNSZXF1ZXN0Ghoud2FsbGV0cnBjLkFnZW5kYXNS",
            "ZXNwb25zZTK0AQoNVm90aW5nU2VydmljZRJMCgtWb3RlQ2hvaWNlcxIdLndh",
            "bGxldHJwYy5Wb3RlQ2hvaWNlc1JlcXVlc3QaHi53YWxsZXRycGMuVm90ZUNo",
            "b2ljZXNSZXNwb25zZRJVCg5TZXRWb3RlQ2hvaWNlcxIgLndhbGxldHJwYy5T",
            "ZXRWb3RlQ2hvaWNlc1JlcXVlc3QaIS53YWxsZXRycGMuU2V0Vm90ZUNob2lj",
            "ZXNSZXNwb25zZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.VersionRequest), global::Walletrpc.VersionRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.VersionResponse), global::Walletrpc.VersionResponse.Parser, new[]{ "VersionString", "Major", "Minor", "Patch", "Prerelease", "BuildMetadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.TransactionDetails), global::Walletrpc.TransactionDetails.Parser, new[]{ "Hash", "Transaction", "Debits", "Credits", "Fee", "Timestamp", "TransactionType" }, null, new[]{ typeof(global::Walletrpc.TransactionDetails.Types.TransactionType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.TransactionDetails.Types.Input), global::Walletrpc.TransactionDetails.Types.Input.Parser, new[]{ "Index", "PreviousAccount", "PreviousAmount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.TransactionDetails.Types.Output), global::Walletrpc.TransactionDetails.Types.Output.Parser, new[]{ "Index", "Account", "Internal", "Amount", "Address", "OutputScript" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.BlockDetails), global::Walletrpc.BlockDetails.Parser, new[]{ "Hash", "Height", "Timestamp", "Transactions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.AccountBalance), global::Walletrpc.AccountBalance.Parser, new[]{ "Account", "TotalBalance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.PingRequest), global::Walletrpc.PingRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.PingResponse), global::Walletrpc.PingResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.NetworkRequest), global::Walletrpc.NetworkRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.NetworkResponse), global::Walletrpc.NetworkResponse.Parser, new[]{ "ActiveNetwork" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.AccountNumberRequest), global::Walletrpc.AccountNumberRequest.Parser, new[]{ "AccountName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.AccountNumberResponse), global::Walletrpc.AccountNumberResponse.Parser, new[]{ "AccountNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.AccountsRequest), global::Walletrpc.AccountsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.AccountsResponse), global::Walletrpc.AccountsResponse.Parser, new[]{ "Accounts", "CurrentBlockHash", "CurrentBlockHeight" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.AccountsResponse.Types.Account), global::Walletrpc.AccountsResponse.Types.Account.Parser, new[]{ "AccountNumber", "AccountName", "TotalBalance", "ExternalKeyCount", "InternalKeyCount", "ImportedKeyCount" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.RenameAccountRequest), global::Walletrpc.RenameAccountRequest.Parser, new[]{ "AccountNumber", "NewName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.RenameAccountResponse), global::Walletrpc.RenameAccountResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.RescanRequest), global::Walletrpc.RescanRequest.Parser, new[]{ "BeginHeight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.RescanResponse), global::Walletrpc.RescanResponse.Parser, new[]{ "RescannedThrough" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.NextAccountRequest), global::Walletrpc.NextAccountRequest.Parser, new[]{ "Passphrase", "AccountName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.NextAccountResponse), global::Walletrpc.NextAccountResponse.Parser, new[]{ "AccountNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.NextAddressRequest), global::Walletrpc.NextAddressRequest.Parser, new[]{ "Account", "Kind" }, null, new[]{ typeof(global::Walletrpc.NextAddressRequest.Types.Kind) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.NextAddressResponse), global::Walletrpc.NextAddressResponse.Parser, new[]{ "Address", "PublicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.ImportPrivateKeyRequest), global::Walletrpc.ImportPrivateKeyRequest.Parser, new[]{ "Passphrase", "Account", "PrivateKeyWif", "Rescan", "ScanFrom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.ImportPrivateKeyResponse), global::Walletrpc.ImportPrivateKeyResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.ImportScriptRequest), global::Walletrpc.ImportScriptRequest.Parser, new[]{ "Passphrase", "Script", "Rescan", "ScanFrom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.ImportScriptResponse), global::Walletrpc.ImportScriptResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.BalanceRequest), global::Walletrpc.BalanceRequest.Parser, new[]{ "AccountNumber", "RequiredConfirmations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.BalanceResponse), global::Walletrpc.BalanceResponse.Parser, new[]{ "Total", "Spendable", "ImmatureReward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.GetTransactionsRequest), global::Walletrpc.GetTransactionsRequest.Parser, new[]{ "StartingBlockHash", "StartingBlockHeight", "EndingBlockHash", "EndingBlockHeight", "MinimumRecentTransactions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.GetTransactionsResponse), global::Walletrpc.GetTransactionsResponse.Parser, new[]{ "MinedTransactions", "UnminedTransactions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.TicketPriceRequest), global::Walletrpc.TicketPriceRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.TicketPriceResponse), global::Walletrpc.TicketPriceResponse.Parser, new[]{ "TicketPrice", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.StakeInfoRequest), global::Walletrpc.StakeInfoRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.StakeInfoResponse), global::Walletrpc.StakeInfoResponse.Parser, new[]{ "PoolSize", "AllMempoolTix", "OwnMempoolTix", "Immature", "Live", "Voted", "Missed", "Revoked", "Expired", "TotalSubsidy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.ChangePassphraseRequest), global::Walletrpc.ChangePassphraseRequest.Parser, new[]{ "Key", "OldPassphrase", "NewPassphrase" }, null, new[]{ typeof(global::Walletrpc.ChangePassphraseRequest.Types.Key) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.ChangePassphraseResponse), global::Walletrpc.ChangePassphraseResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.FundTransactionRequest), global::Walletrpc.FundTransactionRequest.Parser, new[]{ "Account", "TargetAmount", "RequiredConfirmations", "IncludeImmatureCoinbases", "IncludeChangeScript" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.FundTransactionResponse), global::Walletrpc.FundTransactionResponse.Parser, new[]{ "SelectedOutputs", "TotalAmount", "ChangePkScript" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.FundTransactionResponse.Types.PreviousOutput), global::Walletrpc.FundTransactionResponse.Types.PreviousOutput.Parser, new[]{ "TransactionHash", "OutputIndex", "Amount", "PkScript", "ReceiveTime", "FromCoinbase", "Tree" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.ConstructTransactionRequest), global::Walletrpc.ConstructTransactionRequest.Parser, new[]{ "SourceAccount", "RequiredConfirmations", "FeePerKb", "OutputSelectionAlgorithm", "NonChangeOutputs", "ChangeDestination" }, null, new[]{ typeof(global::Walletrpc.ConstructTransactionRequest.Types.OutputSelectionAlgorithm) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.ConstructTransactionRequest.Types.OutputDestination), global::Walletrpc.ConstructTransactionRequest.Types.OutputDestination.Parser, new[]{ "Address", "Script", "ScriptVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.ConstructTransactionRequest.Types.Output), global::Walletrpc.ConstructTransactionRequest.Types.Output.Parser, new[]{ "Destination", "Amount" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.ConstructTransactionResponse), global::Walletrpc.ConstructTransactionResponse.Parser, new[]{ "UnsignedTransaction", "TotalPreviousOutputAmount", "TotalOutputAmount", "EstimatedSignedSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SignTransactionRequest), global::Walletrpc.SignTransactionRequest.Parser, new[]{ "Passphrase", "SerializedTransaction", "InputIndexes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SignTransactionResponse), global::Walletrpc.SignTransactionResponse.Parser, new[]{ "Transaction", "UnsignedInputIndexes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.PublishTransactionRequest), global::Walletrpc.PublishTransactionRequest.Parser, new[]{ "SignedTransaction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.PublishTransactionResponse), global::Walletrpc.PublishTransactionResponse.Parser, new[]{ "TransactionHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.PurchaseTicketsRequest), global::Walletrpc.PurchaseTicketsRequest.Parser, new[]{ "Passphrase", "Account", "SpendLimit", "RequiredConfirmations", "TicketAddress", "NumTickets", "PoolAddress", "PoolFees", "Expiry", "TxFee", "TicketFee" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.PurchaseTicketsResponse), global::Walletrpc.PurchaseTicketsResponse.Parser, new[]{ "TicketHashes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.RevokeTicketsRequest), global::Walletrpc.RevokeTicketsRequest.Parser, new[]{ "Passphrase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.RevokeTicketsResponse), global::Walletrpc.RevokeTicketsResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.LoadActiveDataFiltersRequest), global::Walletrpc.LoadActiveDataFiltersRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.LoadActiveDataFiltersResponse), global::Walletrpc.LoadActiveDataFiltersResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.TransactionNotificationsRequest), global::Walletrpc.TransactionNotificationsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.TransactionNotificationsResponse), global::Walletrpc.TransactionNotificationsResponse.Parser, new[]{ "AttachedBlocks", "DetachedBlocks", "UnminedTransactions", "UnminedTransactionHashes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.AccountNotificationsRequest), global::Walletrpc.AccountNotificationsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.AccountNotificationsResponse), global::Walletrpc.AccountNotificationsResponse.Parser, new[]{ "AccountNumber", "AccountName", "ExternalKeyCount", "InternalKeyCount", "ImportedKeyCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.CreateWalletRequest), global::Walletrpc.CreateWalletRequest.Parser, new[]{ "PublicPassphrase", "PrivatePassphrase", "Seed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.CreateWalletResponse), global::Walletrpc.CreateWalletResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.OpenWalletRequest), global::Walletrpc.OpenWalletRequest.Parser, new[]{ "PublicPassphrase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.OpenWalletResponse), global::Walletrpc.OpenWalletResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.CloseWalletRequest), global::Walletrpc.CloseWalletRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.CloseWalletResponse), global::Walletrpc.CloseWalletResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.WalletExistsRequest), global::Walletrpc.WalletExistsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.WalletExistsResponse), global::Walletrpc.WalletExistsResponse.Parser, new[]{ "Exists" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.StartConsensusRpcRequest), global::Walletrpc.StartConsensusRpcRequest.Parser, new[]{ "NetworkAddress", "Username", "Password", "Certificate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.StartConsensusRpcResponse), global::Walletrpc.StartConsensusRpcResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.DiscoverAddressesRequest), global::Walletrpc.DiscoverAddressesRequest.Parser, new[]{ "DiscoverAccounts", "PrivatePassphrase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.DiscoverAddressesResponse), global::Walletrpc.DiscoverAddressesResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SubscribeToBlockNotificationsRequest), global::Walletrpc.SubscribeToBlockNotificationsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SubscribeToBlockNotificationsResponse), global::Walletrpc.SubscribeToBlockNotificationsResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.FetchHeadersRequest), global::Walletrpc.FetchHeadersRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.FetchHeadersResponse), global::Walletrpc.FetchHeadersResponse.Parser, new[]{ "FetchedHeadersCount", "FirstNewBlockHash", "FirstNewBlockHeight", "MainChainTipBlockHash", "MainChainTipBlockHeight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.GenerateRandomSeedRequest), global::Walletrpc.GenerateRandomSeedRequest.Parser, new[]{ "SeedLength" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.GenerateRandomSeedResponse), global::Walletrpc.GenerateRandomSeedResponse.Parser, new[]{ "SeedBytes", "SeedHex", "SeedMnemonic" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.DecodeSeedRequest), global::Walletrpc.DecodeSeedRequest.Parser, new[]{ "UserInput" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.DecodeSeedResponse), global::Walletrpc.DecodeSeedResponse.Parser, new[]{ "DecodedSeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.StartAutoBuyerRequest), global::Walletrpc.StartAutoBuyerRequest.Parser, new[]{ "Passphrase", "Account", "BalanceToMaintain", "MaxFeePerKb", "MaxPriceRelative", "MaxPriceAbsolute", "VotingAddress", "PoolAddress", "PoolFees", "MaxPerBlock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.StartAutoBuyerResponse), global::Walletrpc.StartAutoBuyerResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.StopAutoBuyerRequest), global::Walletrpc.StopAutoBuyerRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.StopAutoBuyerResponse), global::Walletrpc.StopAutoBuyerResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.TicketBuyerConfigRequest), global::Walletrpc.TicketBuyerConfigRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.TicketBuyerConfigResponse), global::Walletrpc.TicketBuyerConfigResponse.Parser, new[]{ "Account", "AvgPriceMode", "AvgPriceVWAPDelta", "BalanceToMaintain", "BlocksToAvg", "DontWaitForTickets", "ExpiryDelta", "FeeSource", "FeeTargetScaling", "MinFee", "MaxFee", "MaxPerBlock", "MaxPriceAbsolute", "MaxPriceRelative", "MaxInMempool", "PoolAddress", "PoolFees", "SpreadTicketPurchases", "VotingAddress", "TxFee" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetAccountRequest), global::Walletrpc.SetAccountRequest.Parser, new[]{ "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetAccountResponse), global::Walletrpc.SetAccountResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetBalanceToMaintainRequest), global::Walletrpc.SetBalanceToMaintainRequest.Parser, new[]{ "BalanceToMaintain" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetBalanceToMaintainResponse), global::Walletrpc.SetBalanceToMaintainResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetMaxFeeRequest), global::Walletrpc.SetMaxFeeRequest.Parser, new[]{ "MaxFeePerKb" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetMaxFeeResponse), global::Walletrpc.SetMaxFeeResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetMaxPriceRelativeRequest), global::Walletrpc.SetMaxPriceRelativeRequest.Parser, new[]{ "MaxPriceRelative" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetMaxPriceRelativeResponse), global::Walletrpc.SetMaxPriceRelativeResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetMaxPriceAbsoluteRequest), global::Walletrpc.SetMaxPriceAbsoluteRequest.Parser, new[]{ "MaxPriceAbsolute" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetMaxPriceAbsoluteResponse), global::Walletrpc.SetMaxPriceAbsoluteResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetVotingAddressRequest), global::Walletrpc.SetVotingAddressRequest.Parser, new[]{ "VotingAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetVotingAddressResponse), global::Walletrpc.SetVotingAddressResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetPoolAddressRequest), global::Walletrpc.SetPoolAddressRequest.Parser, new[]{ "PoolAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetPoolAddressResponse), global::Walletrpc.SetPoolAddressResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetPoolFeesRequest), global::Walletrpc.SetPoolFeesRequest.Parser, new[]{ "PoolFees" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetPoolFeesResponse), global::Walletrpc.SetPoolFeesResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetMaxPerBlockRequest), global::Walletrpc.SetMaxPerBlockRequest.Parser, new[]{ "MaxPerBlock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetMaxPerBlockResponse), global::Walletrpc.SetMaxPerBlockResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.AgendasRequest), global::Walletrpc.AgendasRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.AgendasResponse), global::Walletrpc.AgendasResponse.Parser, new[]{ "Version", "Agendas" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.AgendasResponse.Types.Agenda), global::Walletrpc.AgendasResponse.Types.Agenda.Parser, new[]{ "Id", "Description", "Mask", "Choices", "StartTime", "ExpireTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.AgendasResponse.Types.Choice), global::Walletrpc.AgendasResponse.Types.Choice.Parser, new[]{ "Id", "Description", "Bits", "IsAbstain", "IsNo" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.VoteChoicesRequest), global::Walletrpc.VoteChoicesRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.VoteChoicesResponse), global::Walletrpc.VoteChoicesResponse.Parser, new[]{ "Version", "Choices", "Votebits" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.VoteChoicesResponse.Types.Choice), global::Walletrpc.VoteChoicesResponse.Types.Choice.Parser, new[]{ "AgendaId", "AgendaDescription", "ChoiceId", "ChoiceDescription" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetVoteChoicesRequest), global::Walletrpc.SetVoteChoicesRequest.Parser, new[]{ "Choices" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetVoteChoicesRequest.Types.Choice), global::Walletrpc.SetVoteChoicesRequest.Types.Choice.Parser, new[]{ "AgendaId", "ChoiceId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Walletrpc.SetVoteChoicesResponse), global::Walletrpc.SetVoteChoicesResponse.Parser, new[]{ "Votebits" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class VersionRequest : pb::IMessage<VersionRequest> {
    private static readonly pb::MessageParser<VersionRequest> _parser = new pb::MessageParser<VersionRequest>(() => new VersionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionRequest(VersionRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionRequest Clone() {
      return new VersionRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class VersionResponse : pb::IMessage<VersionResponse> {
    private static readonly pb::MessageParser<VersionResponse> _parser = new pb::MessageParser<VersionResponse>(() => new VersionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionResponse(VersionResponse other) : this() {
      versionString_ = other.versionString_;
      major_ = other.major_;
      minor_ = other.minor_;
      patch_ = other.patch_;
      prerelease_ = other.prerelease_;
      buildMetadata_ = other.buildMetadata_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionResponse Clone() {
      return new VersionResponse(this);
    }

    /// <summary>Field number for the "version_string" field.</summary>
    public const int VersionStringFieldNumber = 1;
    private string versionString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionString {
      get { return versionString_; }
      set {
        versionString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "major" field.</summary>
    public const int MajorFieldNumber = 2;
    private uint major_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Major {
      get { return major_; }
      set {
        major_ = value;
      }
    }

    /// <summary>Field number for the "minor" field.</summary>
    public const int MinorFieldNumber = 3;
    private uint minor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Minor {
      get { return minor_; }
      set {
        minor_ = value;
      }
    }

    /// <summary>Field number for the "patch" field.</summary>
    public const int PatchFieldNumber = 4;
    private uint patch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Patch {
      get { return patch_; }
      set {
        patch_ = value;
      }
    }

    /// <summary>Field number for the "prerelease" field.</summary>
    public const int PrereleaseFieldNumber = 5;
    private string prerelease_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Prerelease {
      get { return prerelease_; }
      set {
        prerelease_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "build_metadata" field.</summary>
    public const int BuildMetadataFieldNumber = 6;
    private string buildMetadata_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildMetadata {
      get { return buildMetadata_; }
      set {
        buildMetadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VersionString != other.VersionString) return false;
      if (Major != other.Major) return false;
      if (Minor != other.Minor) return false;
      if (Patch != other.Patch) return false;
      if (Prerelease != other.Prerelease) return false;
      if (BuildMetadata != other.BuildMetadata) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VersionString.Length != 0) hash ^= VersionString.GetHashCode();
      if (Major != 0) hash ^= Major.GetHashCode();
      if (Minor != 0) hash ^= Minor.GetHashCode();
      if (Patch != 0) hash ^= Patch.GetHashCode();
      if (Prerelease.Length != 0) hash ^= Prerelease.GetHashCode();
      if (BuildMetadata.Length != 0) hash ^= BuildMetadata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VersionString.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VersionString);
      }
      if (Major != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Major);
      }
      if (Minor != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Minor);
      }
      if (Patch != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Patch);
      }
      if (Prerelease.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Prerelease);
      }
      if (BuildMetadata.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BuildMetadata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VersionString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionString);
      }
      if (Major != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Major);
      }
      if (Minor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Minor);
      }
      if (Patch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Patch);
      }
      if (Prerelease.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prerelease);
      }
      if (BuildMetadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildMetadata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionResponse other) {
      if (other == null) {
        return;
      }
      if (other.VersionString.Length != 0) {
        VersionString = other.VersionString;
      }
      if (other.Major != 0) {
        Major = other.Major;
      }
      if (other.Minor != 0) {
        Minor = other.Minor;
      }
      if (other.Patch != 0) {
        Patch = other.Patch;
      }
      if (other.Prerelease.Length != 0) {
        Prerelease = other.Prerelease;
      }
      if (other.BuildMetadata.Length != 0) {
        BuildMetadata = other.BuildMetadata;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            VersionString = input.ReadString();
            break;
          }
          case 16: {
            Major = input.ReadUInt32();
            break;
          }
          case 24: {
            Minor = input.ReadUInt32();
            break;
          }
          case 32: {
            Patch = input.ReadUInt32();
            break;
          }
          case 42: {
            Prerelease = input.ReadString();
            break;
          }
          case 50: {
            BuildMetadata = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionDetails : pb::IMessage<TransactionDetails> {
    private static readonly pb::MessageParser<TransactionDetails> _parser = new pb::MessageParser<TransactionDetails>(() => new TransactionDetails());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionDetails(TransactionDetails other) : this() {
      hash_ = other.hash_;
      transaction_ = other.transaction_;
      debits_ = other.debits_.Clone();
      credits_ = other.credits_.Clone();
      fee_ = other.fee_;
      timestamp_ = other.timestamp_;
      transactionType_ = other.transactionType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionDetails Clone() {
      return new TransactionDetails(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 2;
    private pb::ByteString transaction_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Transaction {
      get { return transaction_; }
      set {
        transaction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "debits" field.</summary>
    public const int DebitsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Walletrpc.TransactionDetails.Types.Input> _repeated_debits_codec
        = pb::FieldCodec.ForMessage(26, global::Walletrpc.TransactionDetails.Types.Input.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.TransactionDetails.Types.Input> debits_ = new pbc::RepeatedField<global::Walletrpc.TransactionDetails.Types.Input>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Walletrpc.TransactionDetails.Types.Input> Debits {
      get { return debits_; }
    }

    /// <summary>Field number for the "credits" field.</summary>
    public const int CreditsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Walletrpc.TransactionDetails.Types.Output> _repeated_credits_codec
        = pb::FieldCodec.ForMessage(34, global::Walletrpc.TransactionDetails.Types.Output.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.TransactionDetails.Types.Output> credits_ = new pbc::RepeatedField<global::Walletrpc.TransactionDetails.Types.Output>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Walletrpc.TransactionDetails.Types.Output> Credits {
      get { return credits_; }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 5;
    private long fee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 6;
    private long timestamp_;
    /// <summary>
    /// May be earlier than a block timestamp, but never later.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "transaction_type" field.</summary>
    public const int TransactionTypeFieldNumber = 7;
    private global::Walletrpc.TransactionDetails.Types.TransactionType transactionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Walletrpc.TransactionDetails.Types.TransactionType TransactionType {
      get { return transactionType_; }
      set {
        transactionType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (Transaction != other.Transaction) return false;
      if(!debits_.Equals(other.debits_)) return false;
      if(!credits_.Equals(other.credits_)) return false;
      if (Fee != other.Fee) return false;
      if (Timestamp != other.Timestamp) return false;
      if (TransactionType != other.TransactionType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Transaction.Length != 0) hash ^= Transaction.GetHashCode();
      hash ^= debits_.GetHashCode();
      hash ^= credits_.GetHashCode();
      if (Fee != 0L) hash ^= Fee.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (TransactionType != 0) hash ^= TransactionType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Hash);
      }
      if (Transaction.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Transaction);
      }
      debits_.WriteTo(output, _repeated_debits_codec);
      credits_.WriteTo(output, _repeated_credits_codec);
      if (Fee != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Fee);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Timestamp);
      }
      if (TransactionType != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) TransactionType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (Transaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Transaction);
      }
      size += debits_.CalculateSize(_repeated_debits_codec);
      size += credits_.CalculateSize(_repeated_credits_codec);
      if (Fee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fee);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (TransactionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransactionType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionDetails other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Transaction.Length != 0) {
        Transaction = other.Transaction;
      }
      debits_.Add(other.debits_);
      credits_.Add(other.credits_);
      if (other.Fee != 0L) {
        Fee = other.Fee;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.TransactionType != 0) {
        TransactionType = other.TransactionType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Hash = input.ReadBytes();
            break;
          }
          case 18: {
            Transaction = input.ReadBytes();
            break;
          }
          case 26: {
            debits_.AddEntriesFrom(input, _repeated_debits_codec);
            break;
          }
          case 34: {
            credits_.AddEntriesFrom(input, _repeated_credits_codec);
            break;
          }
          case 40: {
            Fee = input.ReadInt64();
            break;
          }
          case 48: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 56: {
            transactionType_ = (global::Walletrpc.TransactionDetails.Types.TransactionType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TransactionDetails message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TransactionType {
        [pbr::OriginalName("REGULAR")] Regular = 0,
        [pbr::OriginalName("TICKET_PURCHASE")] TicketPurchase = 1,
        [pbr::OriginalName("VOTE")] Vote = 2,
        [pbr::OriginalName("REVOCATION")] Revocation = 3,
      }

      public sealed partial class Input : pb::IMessage<Input> {
        private static readonly pb::MessageParser<Input> _parser = new pb::MessageParser<Input>(() => new Input());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Input> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Walletrpc.TransactionDetails.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input(Input other) : this() {
          index_ = other.index_;
          previousAccount_ = other.previousAccount_;
          previousAmount_ = other.previousAmount_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input Clone() {
          return new Input(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "previous_account" field.</summary>
        public const int PreviousAccountFieldNumber = 2;
        private uint previousAccount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PreviousAccount {
          get { return previousAccount_; }
          set {
            previousAccount_ = value;
          }
        }

        /// <summary>Field number for the "previous_amount" field.</summary>
        public const int PreviousAmountFieldNumber = 3;
        private long previousAmount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long PreviousAmount {
          get { return previousAmount_; }
          set {
            previousAmount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Input);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Input other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if (PreviousAccount != other.PreviousAccount) return false;
          if (PreviousAmount != other.PreviousAmount) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (PreviousAccount != 0) hash ^= PreviousAccount.GetHashCode();
          if (PreviousAmount != 0L) hash ^= PreviousAmount.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (PreviousAccount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(PreviousAccount);
          }
          if (PreviousAmount != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(PreviousAmount);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (PreviousAccount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PreviousAccount);
          }
          if (PreviousAmount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreviousAmount);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Input other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.PreviousAccount != 0) {
            PreviousAccount = other.PreviousAccount;
          }
          if (other.PreviousAmount != 0L) {
            PreviousAmount = other.PreviousAmount;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 16: {
                PreviousAccount = input.ReadUInt32();
                break;
              }
              case 24: {
                PreviousAmount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Output : pb::IMessage<Output> {
        private static readonly pb::MessageParser<Output> _parser = new pb::MessageParser<Output>(() => new Output());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Output> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Walletrpc.TransactionDetails.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Output() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Output(Output other) : this() {
          index_ = other.index_;
          account_ = other.account_;
          internal_ = other.internal_;
          amount_ = other.amount_;
          address_ = other.address_;
          outputScript_ = other.outputScript_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Output Clone() {
          return new Output(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "account" field.</summary>
        public const int AccountFieldNumber = 2;
        private uint account_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Account {
          get { return account_; }
          set {
            account_ = value;
          }
        }

        /// <summary>Field number for the "internal" field.</summary>
        public const int InternalFieldNumber = 3;
        private bool internal_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Internal {
          get { return internal_; }
          set {
            internal_ = value;
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 4;
        private long amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 5;
        private string address_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Address {
          get { return address_; }
          set {
            address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "output_script" field.</summary>
        public const int OutputScriptFieldNumber = 6;
        private pb::ByteString outputScript_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString OutputScript {
          get { return outputScript_; }
          set {
            outputScript_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Output);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Output other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if (Account != other.Account) return false;
          if (Internal != other.Internal) return false;
          if (Amount != other.Amount) return false;
          if (Address != other.Address) return false;
          if (OutputScript != other.OutputScript) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (Account != 0) hash ^= Account.GetHashCode();
          if (Internal != false) hash ^= Internal.GetHashCode();
          if (Amount != 0L) hash ^= Amount.GetHashCode();
          if (Address.Length != 0) hash ^= Address.GetHashCode();
          if (OutputScript.Length != 0) hash ^= OutputScript.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (Account != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Account);
          }
          if (Internal != false) {
            output.WriteRawTag(24);
            output.WriteBool(Internal);
          }
          if (Amount != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(Amount);
          }
          if (Address.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Address);
          }
          if (OutputScript.Length != 0) {
            output.WriteRawTag(50);
            output.WriteBytes(OutputScript);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (Account != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
          }
          if (Internal != false) {
            size += 1 + 1;
          }
          if (Amount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
          }
          if (Address.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
          }
          if (OutputScript.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(OutputScript);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Output other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.Account != 0) {
            Account = other.Account;
          }
          if (other.Internal != false) {
            Internal = other.Internal;
          }
          if (other.Amount != 0L) {
            Amount = other.Amount;
          }
          if (other.Address.Length != 0) {
            Address = other.Address;
          }
          if (other.OutputScript.Length != 0) {
            OutputScript = other.OutputScript;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 16: {
                Account = input.ReadUInt32();
                break;
              }
              case 24: {
                Internal = input.ReadBool();
                break;
              }
              case 32: {
                Amount = input.ReadInt64();
                break;
              }
              case 42: {
                Address = input.ReadString();
                break;
              }
              case 50: {
                OutputScript = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class BlockDetails : pb::IMessage<BlockDetails> {
    private static readonly pb::MessageParser<BlockDetails> _parser = new pb::MessageParser<BlockDetails>(() => new BlockDetails());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockDetails(BlockDetails other) : this() {
      hash_ = other.hash_;
      height_ = other.height_;
      timestamp_ = other.timestamp_;
      transactions_ = other.transactions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockDetails Clone() {
      return new BlockDetails(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Walletrpc.TransactionDetails> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(34, global::Walletrpc.TransactionDetails.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.TransactionDetails> transactions_ = new pbc::RepeatedField<global::Walletrpc.TransactionDetails>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Walletrpc.TransactionDetails> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (Height != other.Height) return false;
      if (Timestamp != other.Timestamp) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      hash ^= transactions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Hash);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      transactions_.WriteTo(output, _repeated_transactions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockDetails other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      transactions_.Add(other.transactions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Hash = input.ReadBytes();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 34: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccountBalance : pb::IMessage<AccountBalance> {
    private static readonly pb::MessageParser<AccountBalance> _parser = new pb::MessageParser<AccountBalance>(() => new AccountBalance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountBalance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalance(AccountBalance other) : this() {
      account_ = other.account_;
      totalBalance_ = other.totalBalance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalance Clone() {
      return new AccountBalance(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private uint account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "total_balance" field.</summary>
    public const int TotalBalanceFieldNumber = 2;
    private long totalBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalBalance {
      get { return totalBalance_; }
      set {
        totalBalance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountBalance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountBalance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (TotalBalance != other.TotalBalance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account != 0) hash ^= Account.GetHashCode();
      if (TotalBalance != 0L) hash ^= TotalBalance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Account);
      }
      if (TotalBalance != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalBalance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      if (TotalBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBalance);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountBalance other) {
      if (other == null) {
        return;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
      if (other.TotalBalance != 0L) {
        TotalBalance = other.TotalBalance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadUInt32();
            break;
          }
          case 16: {
            TotalBalance = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PingRequest : pb::IMessage<PingRequest> {
    private static readonly pb::MessageParser<PingRequest> _parser = new pb::MessageParser<PingRequest>(() => new PingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest(PingRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest Clone() {
      return new PingRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class PingResponse : pb::IMessage<PingResponse> {
    private static readonly pb::MessageParser<PingResponse> _parser = new pb::MessageParser<PingResponse>(() => new PingResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse(PingResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse Clone() {
      return new PingResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class NetworkRequest : pb::IMessage<NetworkRequest> {
    private static readonly pb::MessageParser<NetworkRequest> _parser = new pb::MessageParser<NetworkRequest>(() => new NetworkRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkRequest(NetworkRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkRequest Clone() {
      return new NetworkRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class NetworkResponse : pb::IMessage<NetworkResponse> {
    private static readonly pb::MessageParser<NetworkResponse> _parser = new pb::MessageParser<NetworkResponse>(() => new NetworkResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkResponse(NetworkResponse other) : this() {
      activeNetwork_ = other.activeNetwork_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkResponse Clone() {
      return new NetworkResponse(this);
    }

    /// <summary>Field number for the "active_network" field.</summary>
    public const int ActiveNetworkFieldNumber = 1;
    private uint activeNetwork_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveNetwork {
      get { return activeNetwork_; }
      set {
        activeNetwork_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActiveNetwork != other.ActiveNetwork) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActiveNetwork != 0) hash ^= ActiveNetwork.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActiveNetwork != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActiveNetwork);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActiveNetwork != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveNetwork);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkResponse other) {
      if (other == null) {
        return;
      }
      if (other.ActiveNetwork != 0) {
        ActiveNetwork = other.ActiveNetwork;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActiveNetwork = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccountNumberRequest : pb::IMessage<AccountNumberRequest> {
    private static readonly pb::MessageParser<AccountNumberRequest> _parser = new pb::MessageParser<AccountNumberRequest>(() => new AccountNumberRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountNumberRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountNumberRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountNumberRequest(AccountNumberRequest other) : this() {
      accountName_ = other.accountName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountNumberRequest Clone() {
      return new AccountNumberRequest(this);
    }

    /// <summary>Field number for the "account_name" field.</summary>
    public const int AccountNameFieldNumber = 1;
    private string accountName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountNumberRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountNumberRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountName != other.AccountName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountNumberRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccountNumberResponse : pb::IMessage<AccountNumberResponse> {
    private static readonly pb::MessageParser<AccountNumberResponse> _parser = new pb::MessageParser<AccountNumberResponse>(() => new AccountNumberResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountNumberResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountNumberResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountNumberResponse(AccountNumberResponse other) : this() {
      accountNumber_ = other.accountNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountNumberResponse Clone() {
      return new AccountNumberResponse(this);
    }

    /// <summary>Field number for the "account_number" field.</summary>
    public const int AccountNumberFieldNumber = 1;
    private uint accountNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountNumber {
      get { return accountNumber_; }
      set {
        accountNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountNumberResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountNumberResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountNumber != other.AccountNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountNumber != 0) hash ^= AccountNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountNumber != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountNumberResponse other) {
      if (other == null) {
        return;
      }
      if (other.AccountNumber != 0) {
        AccountNumber = other.AccountNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountNumber = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccountsRequest : pb::IMessage<AccountsRequest> {
    private static readonly pb::MessageParser<AccountsRequest> _parser = new pb::MessageParser<AccountsRequest>(() => new AccountsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountsRequest(AccountsRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountsRequest Clone() {
      return new AccountsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountsRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class AccountsResponse : pb::IMessage<AccountsResponse> {
    private static readonly pb::MessageParser<AccountsResponse> _parser = new pb::MessageParser<AccountsResponse>(() => new AccountsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountsResponse(AccountsResponse other) : this() {
      accounts_ = other.accounts_.Clone();
      currentBlockHash_ = other.currentBlockHash_;
      currentBlockHeight_ = other.currentBlockHeight_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountsResponse Clone() {
      return new AccountsResponse(this);
    }

    /// <summary>Field number for the "accounts" field.</summary>
    public const int AccountsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Walletrpc.AccountsResponse.Types.Account> _repeated_accounts_codec
        = pb::FieldCodec.ForMessage(10, global::Walletrpc.AccountsResponse.Types.Account.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.AccountsResponse.Types.Account> accounts_ = new pbc::RepeatedField<global::Walletrpc.AccountsResponse.Types.Account>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Walletrpc.AccountsResponse.Types.Account> Accounts {
      get { return accounts_; }
    }

    /// <summary>Field number for the "current_block_hash" field.</summary>
    public const int CurrentBlockHashFieldNumber = 2;
    private pb::ByteString currentBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CurrentBlockHash {
      get { return currentBlockHash_; }
      set {
        currentBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "current_block_height" field.</summary>
    public const int CurrentBlockHeightFieldNumber = 3;
    private int currentBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentBlockHeight {
      get { return currentBlockHeight_; }
      set {
        currentBlockHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accounts_.Equals(other.accounts_)) return false;
      if (CurrentBlockHash != other.CurrentBlockHash) return false;
      if (CurrentBlockHeight != other.CurrentBlockHeight) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accounts_.GetHashCode();
      if (CurrentBlockHash.Length != 0) hash ^= CurrentBlockHash.GetHashCode();
      if (CurrentBlockHeight != 0) hash ^= CurrentBlockHeight.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      accounts_.WriteTo(output, _repeated_accounts_codec);
      if (CurrentBlockHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CurrentBlockHash);
      }
      if (CurrentBlockHeight != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentBlockHeight);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += accounts_.CalculateSize(_repeated_accounts_codec);
      if (CurrentBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CurrentBlockHash);
      }
      if (CurrentBlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentBlockHeight);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountsResponse other) {
      if (other == null) {
        return;
      }
      accounts_.Add(other.accounts_);
      if (other.CurrentBlockHash.Length != 0) {
        CurrentBlockHash = other.CurrentBlockHash;
      }
      if (other.CurrentBlockHeight != 0) {
        CurrentBlockHeight = other.CurrentBlockHeight;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            accounts_.AddEntriesFrom(input, _repeated_accounts_codec);
            break;
          }
          case 18: {
            CurrentBlockHash = input.ReadBytes();
            break;
          }
          case 24: {
            CurrentBlockHeight = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AccountsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Account : pb::IMessage<Account> {
        private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Account> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Walletrpc.AccountsResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Account() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Account(Account other) : this() {
          accountNumber_ = other.accountNumber_;
          accountName_ = other.accountName_;
          totalBalance_ = other.totalBalance_;
          externalKeyCount_ = other.externalKeyCount_;
          internalKeyCount_ = other.internalKeyCount_;
          importedKeyCount_ = other.importedKeyCount_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Account Clone() {
          return new Account(this);
        }

        /// <summary>Field number for the "account_number" field.</summary>
        public const int AccountNumberFieldNumber = 1;
        private uint accountNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccountNumber {
          get { return accountNumber_; }
          set {
            accountNumber_ = value;
          }
        }

        /// <summary>Field number for the "account_name" field.</summary>
        public const int AccountNameFieldNumber = 2;
        private string accountName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AccountName {
          get { return accountName_; }
          set {
            accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "total_balance" field.</summary>
        public const int TotalBalanceFieldNumber = 3;
        private long totalBalance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TotalBalance {
          get { return totalBalance_; }
          set {
            totalBalance_ = value;
          }
        }

        /// <summary>Field number for the "external_key_count" field.</summary>
        public const int ExternalKeyCountFieldNumber = 4;
        private uint externalKeyCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ExternalKeyCount {
          get { return externalKeyCount_; }
          set {
            externalKeyCount_ = value;
          }
        }

        /// <summary>Field number for the "internal_key_count" field.</summary>
        public const int InternalKeyCountFieldNumber = 5;
        private uint internalKeyCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InternalKeyCount {
          get { return internalKeyCount_; }
          set {
            internalKeyCount_ = value;
          }
        }

        /// <summary>Field number for the "imported_key_count" field.</summary>
        public const int ImportedKeyCountFieldNumber = 6;
        private uint importedKeyCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ImportedKeyCount {
          get { return importedKeyCount_; }
          set {
            importedKeyCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Account);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Account other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountNumber != other.AccountNumber) return false;
          if (AccountName != other.AccountName) return false;
          if (TotalBalance != other.TotalBalance) return false;
          if (ExternalKeyCount != other.ExternalKeyCount) return false;
          if (InternalKeyCount != other.InternalKeyCount) return false;
          if (ImportedKeyCount != other.ImportedKeyCount) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AccountNumber != 0) hash ^= AccountNumber.GetHashCode();
          if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
          if (TotalBalance != 0L) hash ^= TotalBalance.GetHashCode();
          if (ExternalKeyCount != 0) hash ^= ExternalKeyCount.GetHashCode();
          if (InternalKeyCount != 0) hash ^= InternalKeyCount.GetHashCode();
          if (ImportedKeyCount != 0) hash ^= ImportedKeyCount.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AccountNumber != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(AccountNumber);
          }
          if (AccountName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(AccountName);
          }
          if (TotalBalance != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(TotalBalance);
          }
          if (ExternalKeyCount != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(ExternalKeyCount);
          }
          if (InternalKeyCount != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(InternalKeyCount);
          }
          if (ImportedKeyCount != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(ImportedKeyCount);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AccountNumber != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountNumber);
          }
          if (AccountName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
          }
          if (TotalBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBalance);
          }
          if (ExternalKeyCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExternalKeyCount);
          }
          if (InternalKeyCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InternalKeyCount);
          }
          if (ImportedKeyCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImportedKeyCount);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Account other) {
          if (other == null) {
            return;
          }
          if (other.AccountNumber != 0) {
            AccountNumber = other.AccountNumber;
          }
          if (other.AccountName.Length != 0) {
            AccountName = other.AccountName;
          }
          if (other.TotalBalance != 0L) {
            TotalBalance = other.TotalBalance;
          }
          if (other.ExternalKeyCount != 0) {
            ExternalKeyCount = other.ExternalKeyCount;
          }
          if (other.InternalKeyCount != 0) {
            InternalKeyCount = other.InternalKeyCount;
          }
          if (other.ImportedKeyCount != 0) {
            ImportedKeyCount = other.ImportedKeyCount;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                AccountNumber = input.ReadUInt32();
                break;
              }
              case 18: {
                AccountName = input.ReadString();
                break;
              }
              case 24: {
                TotalBalance = input.ReadInt64();
                break;
              }
              case 32: {
                ExternalKeyCount = input.ReadUInt32();
                break;
              }
              case 40: {
                InternalKeyCount = input.ReadUInt32();
                break;
              }
              case 48: {
                ImportedKeyCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class RenameAccountRequest : pb::IMessage<RenameAccountRequest> {
    private static readonly pb::MessageParser<RenameAccountRequest> _parser = new pb::MessageParser<RenameAccountRequest>(() => new RenameAccountRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenameAccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameAccountRequest(RenameAccountRequest other) : this() {
      accountNumber_ = other.accountNumber_;
      newName_ = other.newName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameAccountRequest Clone() {
      return new RenameAccountRequest(this);
    }

    /// <summary>Field number for the "account_number" field.</summary>
    public const int AccountNumberFieldNumber = 1;
    private uint accountNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountNumber {
      get { return accountNumber_; }
      set {
        accountNumber_ = value;
      }
    }

    /// <summary>Field number for the "new_name" field.</summary>
    public const int NewNameFieldNumber = 2;
    private string newName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenameAccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenameAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountNumber != other.AccountNumber) return false;
      if (NewName != other.NewName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountNumber != 0) hash ^= AccountNumber.GetHashCode();
      if (NewName.Length != 0) hash ^= NewName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountNumber != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountNumber);
      }
      if (NewName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NewName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountNumber);
      }
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenameAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountNumber != 0) {
        AccountNumber = other.AccountNumber;
      }
      if (other.NewName.Length != 0) {
        NewName = other.NewName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountNumber = input.ReadUInt32();
            break;
          }
          case 18: {
            NewName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RenameAccountResponse : pb::IMessage<RenameAccountResponse> {
    private static readonly pb::MessageParser<RenameAccountResponse> _parser = new pb::MessageParser<RenameAccountResponse>(() => new RenameAccountResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenameAccountResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameAccountResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameAccountResponse(RenameAccountResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameAccountResponse Clone() {
      return new RenameAccountResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenameAccountResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenameAccountResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenameAccountResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RescanRequest : pb::IMessage<RescanRequest> {
    private static readonly pb::MessageParser<RescanRequest> _parser = new pb::MessageParser<RescanRequest>(() => new RescanRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RescanRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RescanRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RescanRequest(RescanRequest other) : this() {
      beginHeight_ = other.beginHeight_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RescanRequest Clone() {
      return new RescanRequest(this);
    }

    /// <summary>Field number for the "begin_height" field.</summary>
    public const int BeginHeightFieldNumber = 1;
    private int beginHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeginHeight {
      get { return beginHeight_; }
      set {
        beginHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RescanRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RescanRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeginHeight != other.BeginHeight) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BeginHeight != 0) hash ^= BeginHeight.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BeginHeight != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BeginHeight);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BeginHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeginHeight);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RescanRequest other) {
      if (other == null) {
        return;
      }
      if (other.BeginHeight != 0) {
        BeginHeight = other.BeginHeight;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeginHeight = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RescanResponse : pb::IMessage<RescanResponse> {
    private static readonly pb::MessageParser<RescanResponse> _parser = new pb::MessageParser<RescanResponse>(() => new RescanResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RescanResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RescanResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RescanResponse(RescanResponse other) : this() {
      rescannedThrough_ = other.rescannedThrough_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RescanResponse Clone() {
      return new RescanResponse(this);
    }

    /// <summary>Field number for the "rescanned_through" field.</summary>
    public const int RescannedThroughFieldNumber = 1;
    private int rescannedThrough_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RescannedThrough {
      get { return rescannedThrough_; }
      set {
        rescannedThrough_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RescanResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RescanResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RescannedThrough != other.RescannedThrough) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RescannedThrough != 0) hash ^= RescannedThrough.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RescannedThrough != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RescannedThrough);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RescannedThrough != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RescannedThrough);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RescanResponse other) {
      if (other == null) {
        return;
      }
      if (other.RescannedThrough != 0) {
        RescannedThrough = other.RescannedThrough;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RescannedThrough = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NextAccountRequest : pb::IMessage<NextAccountRequest> {
    private static readonly pb::MessageParser<NextAccountRequest> _parser = new pb::MessageParser<NextAccountRequest>(() => new NextAccountRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NextAccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextAccountRequest(NextAccountRequest other) : this() {
      passphrase_ = other.passphrase_;
      accountName_ = other.accountName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextAccountRequest Clone() {
      return new NextAccountRequest(this);
    }

    /// <summary>Field number for the "passphrase" field.</summary>
    public const int PassphraseFieldNumber = 1;
    private pb::ByteString passphrase_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Passphrase {
      get { return passphrase_; }
      set {
        passphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account_name" field.</summary>
    public const int AccountNameFieldNumber = 2;
    private string accountName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NextAccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NextAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Passphrase != other.Passphrase) return false;
      if (AccountName != other.AccountName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Passphrase.Length != 0) hash ^= Passphrase.GetHashCode();
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Passphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Passphrase);
      }
      if (AccountName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Passphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Passphrase);
      }
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NextAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.Passphrase.Length != 0) {
        Passphrase = other.Passphrase;
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Passphrase = input.ReadBytes();
            break;
          }
          case 18: {
            AccountName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NextAccountResponse : pb::IMessage<NextAccountResponse> {
    private static readonly pb::MessageParser<NextAccountResponse> _parser = new pb::MessageParser<NextAccountResponse>(() => new NextAccountResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NextAccountResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextAccountResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextAccountResponse(NextAccountResponse other) : this() {
      accountNumber_ = other.accountNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextAccountResponse Clone() {
      return new NextAccountResponse(this);
    }

    /// <summary>Field number for the "account_number" field.</summary>
    public const int AccountNumberFieldNumber = 1;
    private uint accountNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountNumber {
      get { return accountNumber_; }
      set {
        accountNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NextAccountResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NextAccountResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountNumber != other.AccountNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountNumber != 0) hash ^= AccountNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountNumber != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NextAccountResponse other) {
      if (other == null) {
        return;
      }
      if (other.AccountNumber != 0) {
        AccountNumber = other.AccountNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountNumber = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NextAddressRequest : pb::IMessage<NextAddressRequest> {
    private static readonly pb::MessageParser<NextAddressRequest> _parser = new pb::MessageParser<NextAddressRequest>(() => new NextAddressRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NextAddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextAddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextAddressRequest(NextAddressRequest other) : this() {
      account_ = other.account_;
      kind_ = other.kind_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextAddressRequest Clone() {
      return new NextAddressRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private uint account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 2;
    private global::Walletrpc.NextAddressRequest.Types.Kind kind_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Walletrpc.NextAddressRequest.Types.Kind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NextAddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NextAddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Kind != other.Kind) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account != 0) hash ^= Account.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Account);
      }
      if (Kind != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Kind);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NextAddressRequest other) {
      if (other == null) {
        return;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadUInt32();
            break;
          }
          case 16: {
            kind_ = (global::Walletrpc.NextAddressRequest.Types.Kind) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NextAddressRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Kind {
        [pbr::OriginalName("BIP0044_EXTERNAL")] Bip0044External = 0,
        [pbr::OriginalName("BIP0044_INTERNAL")] Bip0044Internal = 1,
      }

    }
    #endregion

  }

  public sealed partial class NextAddressResponse : pb::IMessage<NextAddressResponse> {
    private static readonly pb::MessageParser<NextAddressResponse> _parser = new pb::MessageParser<NextAddressResponse>(() => new NextAddressResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NextAddressResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextAddressResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextAddressResponse(NextAddressResponse other) : this() {
      address_ = other.address_;
      publicKey_ = other.publicKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextAddressResponse Clone() {
      return new NextAddressResponse(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 2;
    private string publicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NextAddressResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NextAddressResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (PublicKey != other.PublicKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PublicKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NextAddressResponse other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 18: {
            PublicKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImportPrivateKeyRequest : pb::IMessage<ImportPrivateKeyRequest> {
    private static readonly pb::MessageParser<ImportPrivateKeyRequest> _parser = new pb::MessageParser<ImportPrivateKeyRequest>(() => new ImportPrivateKeyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportPrivateKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportPrivateKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportPrivateKeyRequest(ImportPrivateKeyRequest other) : this() {
      passphrase_ = other.passphrase_;
      account_ = other.account_;
      privateKeyWif_ = other.privateKeyWif_;
      rescan_ = other.rescan_;
      scanFrom_ = other.scanFrom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportPrivateKeyRequest Clone() {
      return new ImportPrivateKeyRequest(this);
    }

    /// <summary>Field number for the "passphrase" field.</summary>
    public const int PassphraseFieldNumber = 1;
    private pb::ByteString passphrase_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Passphrase {
      get { return passphrase_; }
      set {
        passphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private uint account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "private_key_wif" field.</summary>
    public const int PrivateKeyWifFieldNumber = 3;
    private string privateKeyWif_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivateKeyWif {
      get { return privateKeyWif_; }
      set {
        privateKeyWif_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rescan" field.</summary>
    public const int RescanFieldNumber = 4;
    private bool rescan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rescan {
      get { return rescan_; }
      set {
        rescan_ = value;
      }
    }

    /// <summary>Field number for the "scan_from" field.</summary>
    public const int ScanFromFieldNumber = 5;
    private int scanFrom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScanFrom {
      get { return scanFrom_; }
      set {
        scanFrom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportPrivateKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportPrivateKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Passphrase != other.Passphrase) return false;
      if (Account != other.Account) return false;
      if (PrivateKeyWif != other.PrivateKeyWif) return false;
      if (Rescan != other.Rescan) return false;
      if (ScanFrom != other.ScanFrom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Passphrase.Length != 0) hash ^= Passphrase.GetHashCode();
      if (Account != 0) hash ^= Account.GetHashCode();
      if (PrivateKeyWif.Length != 0) hash ^= PrivateKeyWif.GetHashCode();
      if (Rescan != false) hash ^= Rescan.GetHashCode();
      if (ScanFrom != 0) hash ^= ScanFrom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Passphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Passphrase);
      }
      if (Account != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Account);
      }
      if (PrivateKeyWif.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PrivateKeyWif);
      }
      if (Rescan != false) {
        output.WriteRawTag(32);
        output.WriteBool(Rescan);
      }
      if (ScanFrom != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ScanFrom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Passphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Passphrase);
      }
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      if (PrivateKeyWif.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivateKeyWif);
      }
      if (Rescan != false) {
        size += 1 + 1;
      }
      if (ScanFrom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScanFrom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportPrivateKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.Passphrase.Length != 0) {
        Passphrase = other.Passphrase;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
      if (other.PrivateKeyWif.Length != 0) {
        PrivateKeyWif = other.PrivateKeyWif;
      }
      if (other.Rescan != false) {
        Rescan = other.Rescan;
      }
      if (other.ScanFrom != 0) {
        ScanFrom = other.ScanFrom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Passphrase = input.ReadBytes();
            break;
          }
          case 16: {
            Account = input.ReadUInt32();
            break;
          }
          case 26: {
            PrivateKeyWif = input.ReadString();
            break;
          }
          case 32: {
            Rescan = input.ReadBool();
            break;
          }
          case 40: {
            ScanFrom = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImportPrivateKeyResponse : pb::IMessage<ImportPrivateKeyResponse> {
    private static readonly pb::MessageParser<ImportPrivateKeyResponse> _parser = new pb::MessageParser<ImportPrivateKeyResponse>(() => new ImportPrivateKeyResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportPrivateKeyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportPrivateKeyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportPrivateKeyResponse(ImportPrivateKeyResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportPrivateKeyResponse Clone() {
      return new ImportPrivateKeyResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportPrivateKeyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportPrivateKeyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportPrivateKeyResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ImportScriptRequest : pb::IMessage<ImportScriptRequest> {
    private static readonly pb::MessageParser<ImportScriptRequest> _parser = new pb::MessageParser<ImportScriptRequest>(() => new ImportScriptRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportScriptRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportScriptRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportScriptRequest(ImportScriptRequest other) : this() {
      passphrase_ = other.passphrase_;
      script_ = other.script_;
      rescan_ = other.rescan_;
      scanFrom_ = other.scanFrom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportScriptRequest Clone() {
      return new ImportScriptRequest(this);
    }

    /// <summary>Field number for the "passphrase" field.</summary>
    public const int PassphraseFieldNumber = 1;
    private pb::ByteString passphrase_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Passphrase {
      get { return passphrase_; }
      set {
        passphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "script" field.</summary>
    public const int ScriptFieldNumber = 2;
    private pb::ByteString script_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Script {
      get { return script_; }
      set {
        script_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rescan" field.</summary>
    public const int RescanFieldNumber = 3;
    private bool rescan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rescan {
      get { return rescan_; }
      set {
        rescan_ = value;
      }
    }

    /// <summary>Field number for the "scan_from" field.</summary>
    public const int ScanFromFieldNumber = 4;
    private int scanFrom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScanFrom {
      get { return scanFrom_; }
      set {
        scanFrom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportScriptRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportScriptRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Passphrase != other.Passphrase) return false;
      if (Script != other.Script) return false;
      if (Rescan != other.Rescan) return false;
      if (ScanFrom != other.ScanFrom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Passphrase.Length != 0) hash ^= Passphrase.GetHashCode();
      if (Script.Length != 0) hash ^= Script.GetHashCode();
      if (Rescan != false) hash ^= Rescan.GetHashCode();
      if (ScanFrom != 0) hash ^= ScanFrom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Passphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Passphrase);
      }
      if (Script.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Script);
      }
      if (Rescan != false) {
        output.WriteRawTag(24);
        output.WriteBool(Rescan);
      }
      if (ScanFrom != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ScanFrom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Passphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Passphrase);
      }
      if (Script.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Script);
      }
      if (Rescan != false) {
        size += 1 + 1;
      }
      if (ScanFrom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScanFrom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportScriptRequest other) {
      if (other == null) {
        return;
      }
      if (other.Passphrase.Length != 0) {
        Passphrase = other.Passphrase;
      }
      if (other.Script.Length != 0) {
        Script = other.Script;
      }
      if (other.Rescan != false) {
        Rescan = other.Rescan;
      }
      if (other.ScanFrom != 0) {
        ScanFrom = other.ScanFrom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Passphrase = input.ReadBytes();
            break;
          }
          case 18: {
            Script = input.ReadBytes();
            break;
          }
          case 24: {
            Rescan = input.ReadBool();
            break;
          }
          case 32: {
            ScanFrom = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImportScriptResponse : pb::IMessage<ImportScriptResponse> {
    private static readonly pb::MessageParser<ImportScriptResponse> _parser = new pb::MessageParser<ImportScriptResponse>(() => new ImportScriptResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportScriptResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportScriptResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportScriptResponse(ImportScriptResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportScriptResponse Clone() {
      return new ImportScriptResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportScriptResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportScriptResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportScriptResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class BalanceRequest : pb::IMessage<BalanceRequest> {
    private static readonly pb::MessageParser<BalanceRequest> _parser = new pb::MessageParser<BalanceRequest>(() => new BalanceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BalanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalanceRequest(BalanceRequest other) : this() {
      accountNumber_ = other.accountNumber_;
      requiredConfirmations_ = other.requiredConfirmations_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalanceRequest Clone() {
      return new BalanceRequest(this);
    }

    /// <summary>Field number for the "account_number" field.</summary>
    public const int AccountNumberFieldNumber = 1;
    private uint accountNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountNumber {
      get { return accountNumber_; }
      set {
        accountNumber_ = value;
      }
    }

    /// <summary>Field number for the "required_confirmations" field.</summary>
    public const int RequiredConfirmationsFieldNumber = 2;
    private int requiredConfirmations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequiredConfirmations {
      get { return requiredConfirmations_; }
      set {
        requiredConfirmations_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BalanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BalanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountNumber != other.AccountNumber) return false;
      if (RequiredConfirmations != other.RequiredConfirmations) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountNumber != 0) hash ^= AccountNumber.GetHashCode();
      if (RequiredConfirmations != 0) hash ^= RequiredConfirmations.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountNumber != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountNumber);
      }
      if (RequiredConfirmations != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RequiredConfirmations);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountNumber);
      }
      if (RequiredConfirmations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequiredConfirmations);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BalanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountNumber != 0) {
        AccountNumber = other.AccountNumber;
      }
      if (other.RequiredConfirmations != 0) {
        RequiredConfirmations = other.RequiredConfirmations;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountNumber = input.ReadUInt32();
            break;
          }
          case 16: {
            RequiredConfirmations = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BalanceResponse : pb::IMessage<BalanceResponse> {
    private static readonly pb::MessageParser<BalanceResponse> _parser = new pb::MessageParser<BalanceResponse>(() => new BalanceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BalanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalanceResponse(BalanceResponse other) : this() {
      total_ = other.total_;
      spendable_ = other.spendable_;
      immatureReward_ = other.immatureReward_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalanceResponse Clone() {
      return new BalanceResponse(this);
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 1;
    private long total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "spendable" field.</summary>
    public const int SpendableFieldNumber = 2;
    private long spendable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Spendable {
      get { return spendable_; }
      set {
        spendable_ = value;
      }
    }

    /// <summary>Field number for the "immature_reward" field.</summary>
    public const int ImmatureRewardFieldNumber = 3;
    private long immatureReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ImmatureReward {
      get { return immatureReward_; }
      set {
        immatureReward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BalanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BalanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Total != other.Total) return false;
      if (Spendable != other.Spendable) return false;
      if (ImmatureReward != other.ImmatureReward) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Total != 0L) hash ^= Total.GetHashCode();
      if (Spendable != 0L) hash ^= Spendable.GetHashCode();
      if (ImmatureReward != 0L) hash ^= ImmatureReward.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Total != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Total);
      }
      if (Spendable != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Spendable);
      }
      if (ImmatureReward != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ImmatureReward);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      if (Spendable != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Spendable);
      }
      if (ImmatureReward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ImmatureReward);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BalanceResponse other) {
      if (other == null) {
        return;
      }
      if (other.Total != 0L) {
        Total = other.Total;
      }
      if (other.Spendable != 0L) {
        Spendable = other.Spendable;
      }
      if (other.ImmatureReward != 0L) {
        ImmatureReward = other.ImmatureReward;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Total = input.ReadInt64();
            break;
          }
          case 16: {
            Spendable = input.ReadInt64();
            break;
          }
          case 24: {
            ImmatureReward = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTransactionsRequest : pb::IMessage<GetTransactionsRequest> {
    private static readonly pb::MessageParser<GetTransactionsRequest> _parser = new pb::MessageParser<GetTransactionsRequest>(() => new GetTransactionsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTransactionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest(GetTransactionsRequest other) : this() {
      startingBlockHash_ = other.startingBlockHash_;
      startingBlockHeight_ = other.startingBlockHeight_;
      endingBlockHash_ = other.endingBlockHash_;
      endingBlockHeight_ = other.endingBlockHeight_;
      minimumRecentTransactions_ = other.minimumRecentTransactions_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest Clone() {
      return new GetTransactionsRequest(this);
    }

    /// <summary>Field number for the "starting_block_hash" field.</summary>
    public const int StartingBlockHashFieldNumber = 1;
    private pb::ByteString startingBlockHash_ = pb::ByteString.Empty;
    /// <summary>
    /// Optionally specify the starting block from which to begin including all transactions.
    /// Either the starting block hash or height may be specified, but not both.
    /// If a block height is specified and is negative, the absolute value becomes the number of
    /// last blocks to include.  That is, given a current chain height of 1000 and a starting block
    /// height of -3, transaction notifications will be created for blocks 998, 999, and 1000.
    /// If both options are excluded, transaction results are created for transactions since the
    /// genesis block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString StartingBlockHash {
      get { return startingBlockHash_; }
      set {
        startingBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "starting_block_height" field.</summary>
    public const int StartingBlockHeightFieldNumber = 2;
    private int startingBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartingBlockHeight {
      get { return startingBlockHeight_; }
      set {
        startingBlockHeight_ = value;
      }
    }

    /// <summary>Field number for the "ending_block_hash" field.</summary>
    public const int EndingBlockHashFieldNumber = 3;
    private pb::ByteString endingBlockHash_ = pb::ByteString.Empty;
    /// <summary>
    /// Optionally specify the last block that transaction results may appear in.
    /// Either the ending block hash or height may be specified, but not both.
    /// If both are excluded, transaction results are created for all transactions
    /// through the best block, and include all unmined transactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EndingBlockHash {
      get { return endingBlockHash_; }
      set {
        endingBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ending_block_height" field.</summary>
    public const int EndingBlockHeightFieldNumber = 4;
    private int endingBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndingBlockHeight {
      get { return endingBlockHeight_; }
      set {
        endingBlockHeight_ = value;
      }
    }

    /// <summary>Field number for the "minimum_recent_transactions" field.</summary>
    public const int MinimumRecentTransactionsFieldNumber = 5;
    private int minimumRecentTransactions_;
    /// <summary>
    /// Include at least this many of the newest transactions if they exist.
    /// Cannot be used when the ending block hash is specified.
    ///
    /// TODO: remove until spec adds it back in some way.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinimumRecentTransactions {
      get { return minimumRecentTransactions_; }
      set {
        minimumRecentTransactions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTransactionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTransactionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartingBlockHash != other.StartingBlockHash) return false;
      if (StartingBlockHeight != other.StartingBlockHeight) return false;
      if (EndingBlockHash != other.EndingBlockHash) return false;
      if (EndingBlockHeight != other.EndingBlockHeight) return false;
      if (MinimumRecentTransactions != other.MinimumRecentTransactions) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartingBlockHash.Length != 0) hash ^= StartingBlockHash.GetHashCode();
      if (StartingBlockHeight != 0) hash ^= StartingBlockHeight.GetHashCode();
      if (EndingBlockHash.Length != 0) hash ^= EndingBlockHash.GetHashCode();
      if (EndingBlockHeight != 0) hash ^= EndingBlockHeight.GetHashCode();
      if (MinimumRecentTransactions != 0) hash ^= MinimumRecentTransactions.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartingBlockHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(StartingBlockHash);
      }
      if (StartingBlockHeight != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(StartingBlockHeight);
      }
      if (EndingBlockHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EndingBlockHash);
      }
      if (EndingBlockHeight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndingBlockHeight);
      }
      if (MinimumRecentTransactions != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MinimumRecentTransactions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartingBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StartingBlockHash);
      }
      if (StartingBlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(StartingBlockHeight);
      }
      if (EndingBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EndingBlockHash);
      }
      if (EndingBlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndingBlockHeight);
      }
      if (MinimumRecentTransactions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinimumRecentTransactions);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTransactionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.StartingBlockHash.Length != 0) {
        StartingBlockHash = other.StartingBlockHash;
      }
      if (other.StartingBlockHeight != 0) {
        StartingBlockHeight = other.StartingBlockHeight;
      }
      if (other.EndingBlockHash.Length != 0) {
        EndingBlockHash = other.EndingBlockHash;
      }
      if (other.EndingBlockHeight != 0) {
        EndingBlockHeight = other.EndingBlockHeight;
      }
      if (other.MinimumRecentTransactions != 0) {
        MinimumRecentTransactions = other.MinimumRecentTransactions;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StartingBlockHash = input.ReadBytes();
            break;
          }
          case 16: {
            StartingBlockHeight = input.ReadSInt32();
            break;
          }
          case 26: {
            EndingBlockHash = input.ReadBytes();
            break;
          }
          case 32: {
            EndingBlockHeight = input.ReadInt32();
            break;
          }
          case 40: {
            MinimumRecentTransactions = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTransactionsResponse : pb::IMessage<GetTransactionsResponse> {
    private static readonly pb::MessageParser<GetTransactionsResponse> _parser = new pb::MessageParser<GetTransactionsResponse>(() => new GetTransactionsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTransactionsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsResponse(GetTransactionsResponse other) : this() {
      MinedTransactions = other.minedTransactions_ != null ? other.MinedTransactions.Clone() : null;
      unminedTransactions_ = other.unminedTransactions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsResponse Clone() {
      return new GetTransactionsResponse(this);
    }

    /// <summary>Field number for the "mined_transactions" field.</summary>
    public const int MinedTransactionsFieldNumber = 1;
    private global::Walletrpc.BlockDetails minedTransactions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Walletrpc.BlockDetails MinedTransactions {
      get { return minedTransactions_; }
      set {
        minedTransactions_ = value;
      }
    }

    /// <summary>Field number for the "unmined_transactions" field.</summary>
    public const int UnminedTransactionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Walletrpc.TransactionDetails> _repeated_unminedTransactions_codec
        = pb::FieldCodec.ForMessage(18, global::Walletrpc.TransactionDetails.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.TransactionDetails> unminedTransactions_ = new pbc::RepeatedField<global::Walletrpc.TransactionDetails>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Walletrpc.TransactionDetails> UnminedTransactions {
      get { return unminedTransactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTransactionsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTransactionsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MinedTransactions, other.MinedTransactions)) return false;
      if(!unminedTransactions_.Equals(other.unminedTransactions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (minedTransactions_ != null) hash ^= MinedTransactions.GetHashCode();
      hash ^= unminedTransactions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (minedTransactions_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MinedTransactions);
      }
      unminedTransactions_.WriteTo(output, _repeated_unminedTransactions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (minedTransactions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinedTransactions);
      }
      size += unminedTransactions_.CalculateSize(_repeated_unminedTransactions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTransactionsResponse other) {
      if (other == null) {
        return;
      }
      if (other.minedTransactions_ != null) {
        if (minedTransactions_ == null) {
          minedTransactions_ = new global::Walletrpc.BlockDetails();
        }
        MinedTransactions.MergeFrom(other.MinedTransactions);
      }
      unminedTransactions_.Add(other.unminedTransactions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (minedTransactions_ == null) {
              minedTransactions_ = new global::Walletrpc.BlockDetails();
            }
            input.ReadMessage(minedTransactions_);
            break;
          }
          case 18: {
            unminedTransactions_.AddEntriesFrom(input, _repeated_unminedTransactions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TicketPriceRequest : pb::IMessage<TicketPriceRequest> {
    private static readonly pb::MessageParser<TicketPriceRequest> _parser = new pb::MessageParser<TicketPriceRequest>(() => new TicketPriceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketPriceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketPriceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketPriceRequest(TicketPriceRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketPriceRequest Clone() {
      return new TicketPriceRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketPriceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketPriceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketPriceRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class TicketPriceResponse : pb::IMessage<TicketPriceResponse> {
    private static readonly pb::MessageParser<TicketPriceResponse> _parser = new pb::MessageParser<TicketPriceResponse>(() => new TicketPriceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketPriceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketPriceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketPriceResponse(TicketPriceResponse other) : this() {
      ticketPrice_ = other.ticketPrice_;
      height_ = other.height_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketPriceResponse Clone() {
      return new TicketPriceResponse(this);
    }

    /// <summary>Field number for the "ticket_price" field.</summary>
    public const int TicketPriceFieldNumber = 1;
    private long ticketPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TicketPrice {
      get { return ticketPrice_; }
      set {
        ticketPrice_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketPriceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketPriceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TicketPrice != other.TicketPrice) return false;
      if (Height != other.Height) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TicketPrice != 0L) hash ^= TicketPrice.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TicketPrice != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TicketPrice);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TicketPrice != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TicketPrice);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketPriceResponse other) {
      if (other == null) {
        return;
      }
      if (other.TicketPrice != 0L) {
        TicketPrice = other.TicketPrice;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TicketPrice = input.ReadInt64();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StakeInfoRequest : pb::IMessage<StakeInfoRequest> {
    private static readonly pb::MessageParser<StakeInfoRequest> _parser = new pb::MessageParser<StakeInfoRequest>(() => new StakeInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StakeInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StakeInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StakeInfoRequest(StakeInfoRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StakeInfoRequest Clone() {
      return new StakeInfoRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StakeInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StakeInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StakeInfoRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StakeInfoResponse : pb::IMessage<StakeInfoResponse> {
    private static readonly pb::MessageParser<StakeInfoResponse> _parser = new pb::MessageParser<StakeInfoResponse>(() => new StakeInfoResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StakeInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StakeInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StakeInfoResponse(StakeInfoResponse other) : this() {
      poolSize_ = other.poolSize_;
      allMempoolTix_ = other.allMempoolTix_;
      ownMempoolTix_ = other.ownMempoolTix_;
      immature_ = other.immature_;
      live_ = other.live_;
      voted_ = other.voted_;
      missed_ = other.missed_;
      revoked_ = other.revoked_;
      expired_ = other.expired_;
      totalSubsidy_ = other.totalSubsidy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StakeInfoResponse Clone() {
      return new StakeInfoResponse(this);
    }

    /// <summary>Field number for the "pool_size" field.</summary>
    public const int PoolSizeFieldNumber = 1;
    private uint poolSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PoolSize {
      get { return poolSize_; }
      set {
        poolSize_ = value;
      }
    }

    /// <summary>Field number for the "all_mempool_tix" field.</summary>
    public const int AllMempoolTixFieldNumber = 2;
    private uint allMempoolTix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllMempoolTix {
      get { return allMempoolTix_; }
      set {
        allMempoolTix_ = value;
      }
    }

    /// <summary>Field number for the "own_mempool_tix" field.</summary>
    public const int OwnMempoolTixFieldNumber = 3;
    private uint ownMempoolTix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OwnMempoolTix {
      get { return ownMempoolTix_; }
      set {
        ownMempoolTix_ = value;
      }
    }

    /// <summary>Field number for the "immature" field.</summary>
    public const int ImmatureFieldNumber = 4;
    private uint immature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Immature {
      get { return immature_; }
      set {
        immature_ = value;
      }
    }

    /// <summary>Field number for the "live" field.</summary>
    public const int LiveFieldNumber = 5;
    private uint live_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Live {
      get { return live_; }
      set {
        live_ = value;
      }
    }

    /// <summary>Field number for the "voted" field.</summary>
    public const int VotedFieldNumber = 6;
    private uint voted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Voted {
      get { return voted_; }
      set {
        voted_ = value;
      }
    }

    /// <summary>Field number for the "missed" field.</summary>
    public const int MissedFieldNumber = 7;
    private uint missed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Missed {
      get { return missed_; }
      set {
        missed_ = value;
      }
    }

    /// <summary>Field number for the "revoked" field.</summary>
    public const int RevokedFieldNumber = 8;
    private uint revoked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Revoked {
      get { return revoked_; }
      set {
        revoked_ = value;
      }
    }

    /// <summary>Field number for the "expired" field.</summary>
    public const int ExpiredFieldNumber = 9;
    private uint expired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Expired {
      get { return expired_; }
      set {
        expired_ = value;
      }
    }

    /// <summary>Field number for the "total_subsidy" field.</summary>
    public const int TotalSubsidyFieldNumber = 10;
    private long totalSubsidy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSubsidy {
      get { return totalSubsidy_; }
      set {
        totalSubsidy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StakeInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StakeInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PoolSize != other.PoolSize) return false;
      if (AllMempoolTix != other.AllMempoolTix) return false;
      if (OwnMempoolTix != other.OwnMempoolTix) return false;
      if (Immature != other.Immature) return false;
      if (Live != other.Live) return false;
      if (Voted != other.Voted) return false;
      if (Missed != other.Missed) return false;
      if (Revoked != other.Revoked) return false;
      if (Expired != other.Expired) return false;
      if (TotalSubsidy != other.TotalSubsidy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PoolSize != 0) hash ^= PoolSize.GetHashCode();
      if (AllMempoolTix != 0) hash ^= AllMempoolTix.GetHashCode();
      if (OwnMempoolTix != 0) hash ^= OwnMempoolTix.GetHashCode();
      if (Immature != 0) hash ^= Immature.GetHashCode();
      if (Live != 0) hash ^= Live.GetHashCode();
      if (Voted != 0) hash ^= Voted.GetHashCode();
      if (Missed != 0) hash ^= Missed.GetHashCode();
      if (Revoked != 0) hash ^= Revoked.GetHashCode();
      if (Expired != 0) hash ^= Expired.GetHashCode();
      if (TotalSubsidy != 0L) hash ^= TotalSubsidy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PoolSize != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PoolSize);
      }
      if (AllMempoolTix != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AllMempoolTix);
      }
      if (OwnMempoolTix != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OwnMempoolTix);
      }
      if (Immature != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Immature);
      }
      if (Live != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Live);
      }
      if (Voted != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Voted);
      }
      if (Missed != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Missed);
      }
      if (Revoked != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Revoked);
      }
      if (Expired != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Expired);
      }
      if (TotalSubsidy != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(TotalSubsidy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PoolSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PoolSize);
      }
      if (AllMempoolTix != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllMempoolTix);
      }
      if (OwnMempoolTix != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnMempoolTix);
      }
      if (Immature != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Immature);
      }
      if (Live != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Live);
      }
      if (Voted != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Voted);
      }
      if (Missed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Missed);
      }
      if (Revoked != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Revoked);
      }
      if (Expired != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Expired);
      }
      if (TotalSubsidy != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSubsidy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StakeInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.PoolSize != 0) {
        PoolSize = other.PoolSize;
      }
      if (other.AllMempoolTix != 0) {
        AllMempoolTix = other.AllMempoolTix;
      }
      if (other.OwnMempoolTix != 0) {
        OwnMempoolTix = other.OwnMempoolTix;
      }
      if (other.Immature != 0) {
        Immature = other.Immature;
      }
      if (other.Live != 0) {
        Live = other.Live;
      }
      if (other.Voted != 0) {
        Voted = other.Voted;
      }
      if (other.Missed != 0) {
        Missed = other.Missed;
      }
      if (other.Revoked != 0) {
        Revoked = other.Revoked;
      }
      if (other.Expired != 0) {
        Expired = other.Expired;
      }
      if (other.TotalSubsidy != 0L) {
        TotalSubsidy = other.TotalSubsidy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PoolSize = input.ReadUInt32();
            break;
          }
          case 16: {
            AllMempoolTix = input.ReadUInt32();
            break;
          }
          case 24: {
            OwnMempoolTix = input.ReadUInt32();
            break;
          }
          case 32: {
            Immature = input.ReadUInt32();
            break;
          }
          case 40: {
            Live = input.ReadUInt32();
            break;
          }
          case 48: {
            Voted = input.ReadUInt32();
            break;
          }
          case 56: {
            Missed = input.ReadUInt32();
            break;
          }
          case 64: {
            Revoked = input.ReadUInt32();
            break;
          }
          case 72: {
            Expired = input.ReadUInt32();
            break;
          }
          case 80: {
            TotalSubsidy = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangePassphraseRequest : pb::IMessage<ChangePassphraseRequest> {
    private static readonly pb::MessageParser<ChangePassphraseRequest> _parser = new pb::MessageParser<ChangePassphraseRequest>(() => new ChangePassphraseRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangePassphraseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePassphraseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePassphraseRequest(ChangePassphraseRequest other) : this() {
      key_ = other.key_;
      oldPassphrase_ = other.oldPassphrase_;
      newPassphrase_ = other.newPassphrase_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePassphraseRequest Clone() {
      return new ChangePassphraseRequest(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Walletrpc.ChangePassphraseRequest.Types.Key key_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Walletrpc.ChangePassphraseRequest.Types.Key Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "old_passphrase" field.</summary>
    public const int OldPassphraseFieldNumber = 2;
    private pb::ByteString oldPassphrase_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OldPassphrase {
      get { return oldPassphrase_; }
      set {
        oldPassphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "new_passphrase" field.</summary>
    public const int NewPassphraseFieldNumber = 3;
    private pb::ByteString newPassphrase_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewPassphrase {
      get { return newPassphrase_; }
      set {
        newPassphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangePassphraseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangePassphraseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (OldPassphrase != other.OldPassphrase) return false;
      if (NewPassphrase != other.NewPassphrase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (OldPassphrase.Length != 0) hash ^= OldPassphrase.GetHashCode();
      if (NewPassphrase.Length != 0) hash ^= NewPassphrase.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Key);
      }
      if (OldPassphrase.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(OldPassphrase);
      }
      if (NewPassphrase.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(NewPassphrase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Key);
      }
      if (OldPassphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OldPassphrase);
      }
      if (NewPassphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewPassphrase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangePassphraseRequest other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.OldPassphrase.Length != 0) {
        OldPassphrase = other.OldPassphrase;
      }
      if (other.NewPassphrase.Length != 0) {
        NewPassphrase = other.NewPassphrase;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            key_ = (global::Walletrpc.ChangePassphraseRequest.Types.Key) input.ReadEnum();
            break;
          }
          case 18: {
            OldPassphrase = input.ReadBytes();
            break;
          }
          case 26: {
            NewPassphrase = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChangePassphraseRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Key {
        [pbr::OriginalName("PRIVATE")] Private = 0,
        [pbr::OriginalName("PUBLIC")] Public = 1,
      }

    }
    #endregion

  }

  public sealed partial class ChangePassphraseResponse : pb::IMessage<ChangePassphraseResponse> {
    private static readonly pb::MessageParser<ChangePassphraseResponse> _parser = new pb::MessageParser<ChangePassphraseResponse>(() => new ChangePassphraseResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangePassphraseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePassphraseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePassphraseResponse(ChangePassphraseResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePassphraseResponse Clone() {
      return new ChangePassphraseResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangePassphraseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangePassphraseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangePassphraseResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class FundTransactionRequest : pb::IMessage<FundTransactionRequest> {
    private static readonly pb::MessageParser<FundTransactionRequest> _parser = new pb::MessageParser<FundTransactionRequest>(() => new FundTransactionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FundTransactionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundTransactionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundTransactionRequest(FundTransactionRequest other) : this() {
      account_ = other.account_;
      targetAmount_ = other.targetAmount_;
      requiredConfirmations_ = other.requiredConfirmations_;
      includeImmatureCoinbases_ = other.includeImmatureCoinbases_;
      includeChangeScript_ = other.includeChangeScript_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundTransactionRequest Clone() {
      return new FundTransactionRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private uint account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "target_amount" field.</summary>
    public const int TargetAmountFieldNumber = 2;
    private long targetAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetAmount {
      get { return targetAmount_; }
      set {
        targetAmount_ = value;
      }
    }

    /// <summary>Field number for the "required_confirmations" field.</summary>
    public const int RequiredConfirmationsFieldNumber = 3;
    private int requiredConfirmations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequiredConfirmations {
      get { return requiredConfirmations_; }
      set {
        requiredConfirmations_ = value;
      }
    }

    /// <summary>Field number for the "include_immature_coinbases" field.</summary>
    public const int IncludeImmatureCoinbasesFieldNumber = 4;
    private bool includeImmatureCoinbases_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeImmatureCoinbases {
      get { return includeImmatureCoinbases_; }
      set {
        includeImmatureCoinbases_ = value;
      }
    }

    /// <summary>Field number for the "include_change_script" field.</summary>
    public const int IncludeChangeScriptFieldNumber = 5;
    private bool includeChangeScript_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeChangeScript {
      get { return includeChangeScript_; }
      set {
        includeChangeScript_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FundTransactionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FundTransactionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (TargetAmount != other.TargetAmount) return false;
      if (RequiredConfirmations != other.RequiredConfirmations) return false;
      if (IncludeImmatureCoinbases != other.IncludeImmatureCoinbases) return false;
      if (IncludeChangeScript != other.IncludeChangeScript) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account != 0) hash ^= Account.GetHashCode();
      if (TargetAmount != 0L) hash ^= TargetAmount.GetHashCode();
      if (RequiredConfirmations != 0) hash ^= RequiredConfirmations.GetHashCode();
      if (IncludeImmatureCoinbases != false) hash ^= IncludeImmatureCoinbases.GetHashCode();
      if (IncludeChangeScript != false) hash ^= IncludeChangeScript.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Account);
      }
      if (TargetAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TargetAmount);
      }
      if (RequiredConfirmations != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RequiredConfirmations);
      }
      if (IncludeImmatureCoinbases != false) {
        output.WriteRawTag(32);
        output.WriteBool(IncludeImmatureCoinbases);
      }
      if (IncludeChangeScript != false) {
        output.WriteRawTag(40);
        output.WriteBool(IncludeChangeScript);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      if (TargetAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetAmount);
      }
      if (RequiredConfirmations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequiredConfirmations);
      }
      if (IncludeImmatureCoinbases != false) {
        size += 1 + 1;
      }
      if (IncludeChangeScript != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FundTransactionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
      if (other.TargetAmount != 0L) {
        TargetAmount = other.TargetAmount;
      }
      if (other.RequiredConfirmations != 0) {
        RequiredConfirmations = other.RequiredConfirmations;
      }
      if (other.IncludeImmatureCoinbases != false) {
        IncludeImmatureCoinbases = other.IncludeImmatureCoinbases;
      }
      if (other.IncludeChangeScript != false) {
        IncludeChangeScript = other.IncludeChangeScript;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadUInt32();
            break;
          }
          case 16: {
            TargetAmount = input.ReadInt64();
            break;
          }
          case 24: {
            RequiredConfirmations = input.ReadInt32();
            break;
          }
          case 32: {
            IncludeImmatureCoinbases = input.ReadBool();
            break;
          }
          case 40: {
            IncludeChangeScript = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FundTransactionResponse : pb::IMessage<FundTransactionResponse> {
    private static readonly pb::MessageParser<FundTransactionResponse> _parser = new pb::MessageParser<FundTransactionResponse>(() => new FundTransactionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FundTransactionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundTransactionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundTransactionResponse(FundTransactionResponse other) : this() {
      selectedOutputs_ = other.selectedOutputs_.Clone();
      totalAmount_ = other.totalAmount_;
      changePkScript_ = other.changePkScript_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundTransactionResponse Clone() {
      return new FundTransactionResponse(this);
    }

    /// <summary>Field number for the "selected_outputs" field.</summary>
    public const int SelectedOutputsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Walletrpc.FundTransactionResponse.Types.PreviousOutput> _repeated_selectedOutputs_codec
        = pb::FieldCodec.ForMessage(10, global::Walletrpc.FundTransactionResponse.Types.PreviousOutput.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.FundTransactionResponse.Types.PreviousOutput> selectedOutputs_ = new pbc::RepeatedField<global::Walletrpc.FundTransactionResponse.Types.PreviousOutput>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Walletrpc.FundTransactionResponse.Types.PreviousOutput> SelectedOutputs {
      get { return selectedOutputs_; }
    }

    /// <summary>Field number for the "total_amount" field.</summary>
    public const int TotalAmountFieldNumber = 2;
    private long totalAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAmount {
      get { return totalAmount_; }
      set {
        totalAmount_ = value;
      }
    }

    /// <summary>Field number for the "change_pk_script" field.</summary>
    public const int ChangePkScriptFieldNumber = 3;
    private pb::ByteString changePkScript_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChangePkScript {
      get { return changePkScript_; }
      set {
        changePkScript_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FundTransactionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FundTransactionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!selectedOutputs_.Equals(other.selectedOutputs_)) return false;
      if (TotalAmount != other.TotalAmount) return false;
      if (ChangePkScript != other.ChangePkScript) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= selectedOutputs_.GetHashCode();
      if (TotalAmount != 0L) hash ^= TotalAmount.GetHashCode();
      if (ChangePkScript.Length != 0) hash ^= ChangePkScript.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      selectedOutputs_.WriteTo(output, _repeated_selectedOutputs_codec);
      if (TotalAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalAmount);
      }
      if (ChangePkScript.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ChangePkScript);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += selectedOutputs_.CalculateSize(_repeated_selectedOutputs_codec);
      if (TotalAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAmount);
      }
      if (ChangePkScript.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChangePkScript);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FundTransactionResponse other) {
      if (other == null) {
        return;
      }
      selectedOutputs_.Add(other.selectedOutputs_);
      if (other.TotalAmount != 0L) {
        TotalAmount = other.TotalAmount;
      }
      if (other.ChangePkScript.Length != 0) {
        ChangePkScript = other.ChangePkScript;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            selectedOutputs_.AddEntriesFrom(input, _repeated_selectedOutputs_codec);
            break;
          }
          case 16: {
            TotalAmount = input.ReadInt64();
            break;
          }
          case 26: {
            ChangePkScript = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FundTransactionResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PreviousOutput : pb::IMessage<PreviousOutput> {
        private static readonly pb::MessageParser<PreviousOutput> _parser = new pb::MessageParser<PreviousOutput>(() => new PreviousOutput());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PreviousOutput> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Walletrpc.FundTransactionResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PreviousOutput() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PreviousOutput(PreviousOutput other) : this() {
          transactionHash_ = other.transactionHash_;
          outputIndex_ = other.outputIndex_;
          amount_ = other.amount_;
          pkScript_ = other.pkScript_;
          receiveTime_ = other.receiveTime_;
          fromCoinbase_ = other.fromCoinbase_;
          tree_ = other.tree_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PreviousOutput Clone() {
          return new PreviousOutput(this);
        }

        /// <summary>Field number for the "transaction_hash" field.</summary>
        public const int TransactionHashFieldNumber = 1;
        private pb::ByteString transactionHash_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString TransactionHash {
          get { return transactionHash_; }
          set {
            transactionHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "output_index" field.</summary>
        public const int OutputIndexFieldNumber = 2;
        private uint outputIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OutputIndex {
          get { return outputIndex_; }
          set {
            outputIndex_ = value;
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 3;
        private long amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        /// <summary>Field number for the "pk_script" field.</summary>
        public const int PkScriptFieldNumber = 4;
        private pb::ByteString pkScript_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PkScript {
          get { return pkScript_; }
          set {
            pkScript_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "receive_time" field.</summary>
        public const int ReceiveTimeFieldNumber = 5;
        private long receiveTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ReceiveTime {
          get { return receiveTime_; }
          set {
            receiveTime_ = value;
          }
        }

        /// <summary>Field number for the "from_coinbase" field.</summary>
        public const int FromCoinbaseFieldNumber = 6;
        private bool fromCoinbase_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool FromCoinbase {
          get { return fromCoinbase_; }
          set {
            fromCoinbase_ = value;
          }
        }

        /// <summary>Field number for the "tree" field.</summary>
        public const int TreeFieldNumber = 7;
        private int tree_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Tree {
          get { return tree_; }
          set {
            tree_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PreviousOutput);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PreviousOutput other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TransactionHash != other.TransactionHash) return false;
          if (OutputIndex != other.OutputIndex) return false;
          if (Amount != other.Amount) return false;
          if (PkScript != other.PkScript) return false;
          if (ReceiveTime != other.ReceiveTime) return false;
          if (FromCoinbase != other.FromCoinbase) return false;
          if (Tree != other.Tree) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TransactionHash.Length != 0) hash ^= TransactionHash.GetHashCode();
          if (OutputIndex != 0) hash ^= OutputIndex.GetHashCode();
          if (Amount != 0L) hash ^= Amount.GetHashCode();
          if (PkScript.Length != 0) hash ^= PkScript.GetHashCode();
          if (ReceiveTime != 0L) hash ^= ReceiveTime.GetHashCode();
          if (FromCoinbase != false) hash ^= FromCoinbase.GetHashCode();
          if (Tree != 0) hash ^= Tree.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TransactionHash.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(TransactionHash);
          }
          if (OutputIndex != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(OutputIndex);
          }
          if (Amount != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Amount);
          }
          if (PkScript.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(PkScript);
          }
          if (ReceiveTime != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(ReceiveTime);
          }
          if (FromCoinbase != false) {
            output.WriteRawTag(48);
            output.WriteBool(FromCoinbase);
          }
          if (Tree != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(Tree);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TransactionHash.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionHash);
          }
          if (OutputIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutputIndex);
          }
          if (Amount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
          }
          if (PkScript.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PkScript);
          }
          if (ReceiveTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiveTime);
          }
          if (FromCoinbase != false) {
            size += 1 + 1;
          }
          if (Tree != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tree);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PreviousOutput other) {
          if (other == null) {
            return;
          }
          if (other.TransactionHash.Length != 0) {
            TransactionHash = other.TransactionHash;
          }
          if (other.OutputIndex != 0) {
            OutputIndex = other.OutputIndex;
          }
          if (other.Amount != 0L) {
            Amount = other.Amount;
          }
          if (other.PkScript.Length != 0) {
            PkScript = other.PkScript;
          }
          if (other.ReceiveTime != 0L) {
            ReceiveTime = other.ReceiveTime;
          }
          if (other.FromCoinbase != false) {
            FromCoinbase = other.FromCoinbase;
          }
          if (other.Tree != 0) {
            Tree = other.Tree;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                TransactionHash = input.ReadBytes();
                break;
              }
              case 16: {
                OutputIndex = input.ReadUInt32();
                break;
              }
              case 24: {
                Amount = input.ReadInt64();
                break;
              }
              case 34: {
                PkScript = input.ReadBytes();
                break;
              }
              case 40: {
                ReceiveTime = input.ReadInt64();
                break;
              }
              case 48: {
                FromCoinbase = input.ReadBool();
                break;
              }
              case 56: {
                Tree = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ConstructTransactionRequest : pb::IMessage<ConstructTransactionRequest> {
    private static readonly pb::MessageParser<ConstructTransactionRequest> _parser = new pb::MessageParser<ConstructTransactionRequest>(() => new ConstructTransactionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConstructTransactionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstructTransactionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstructTransactionRequest(ConstructTransactionRequest other) : this() {
      sourceAccount_ = other.sourceAccount_;
      requiredConfirmations_ = other.requiredConfirmations_;
      feePerKb_ = other.feePerKb_;
      outputSelectionAlgorithm_ = other.outputSelectionAlgorithm_;
      nonChangeOutputs_ = other.nonChangeOutputs_.Clone();
      ChangeDestination = other.changeDestination_ != null ? other.ChangeDestination.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstructTransactionRequest Clone() {
      return new ConstructTransactionRequest(this);
    }

    /// <summary>Field number for the "source_account" field.</summary>
    public const int SourceAccountFieldNumber = 1;
    private uint sourceAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceAccount {
      get { return sourceAccount_; }
      set {
        sourceAccount_ = value;
      }
    }

    /// <summary>Field number for the "required_confirmations" field.</summary>
    public const int RequiredConfirmationsFieldNumber = 2;
    private int requiredConfirmations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequiredConfirmations {
      get { return requiredConfirmations_; }
      set {
        requiredConfirmations_ = value;
      }
    }

    /// <summary>Field number for the "fee_per_kb" field.</summary>
    public const int FeePerKbFieldNumber = 3;
    private int feePerKb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FeePerKb {
      get { return feePerKb_; }
      set {
        feePerKb_ = value;
      }
    }

    /// <summary>Field number for the "output_selection_algorithm" field.</summary>
    public const int OutputSelectionAlgorithmFieldNumber = 4;
    private global::Walletrpc.ConstructTransactionRequest.Types.OutputSelectionAlgorithm outputSelectionAlgorithm_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Walletrpc.ConstructTransactionRequest.Types.OutputSelectionAlgorithm OutputSelectionAlgorithm {
      get { return outputSelectionAlgorithm_; }
      set {
        outputSelectionAlgorithm_ = value;
      }
    }

    /// <summary>Field number for the "non_change_outputs" field.</summary>
    public const int NonChangeOutputsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Walletrpc.ConstructTransactionRequest.Types.Output> _repeated_nonChangeOutputs_codec
        = pb::FieldCodec.ForMessage(42, global::Walletrpc.ConstructTransactionRequest.Types.Output.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.ConstructTransactionRequest.Types.Output> nonChangeOutputs_ = new pbc::RepeatedField<global::Walletrpc.ConstructTransactionRequest.Types.Output>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Walletrpc.ConstructTransactionRequest.Types.Output> NonChangeOutputs {
      get { return nonChangeOutputs_; }
    }

    /// <summary>Field number for the "change_destination" field.</summary>
    public const int ChangeDestinationFieldNumber = 6;
    private global::Walletrpc.ConstructTransactionRequest.Types.OutputDestination changeDestination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Walletrpc.ConstructTransactionRequest.Types.OutputDestination ChangeDestination {
      get { return changeDestination_; }
      set {
        changeDestination_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConstructTransactionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConstructTransactionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceAccount != other.SourceAccount) return false;
      if (RequiredConfirmations != other.RequiredConfirmations) return false;
      if (FeePerKb != other.FeePerKb) return false;
      if (OutputSelectionAlgorithm != other.OutputSelectionAlgorithm) return false;
      if(!nonChangeOutputs_.Equals(other.nonChangeOutputs_)) return false;
      if (!object.Equals(ChangeDestination, other.ChangeDestination)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceAccount != 0) hash ^= SourceAccount.GetHashCode();
      if (RequiredConfirmations != 0) hash ^= RequiredConfirmations.GetHashCode();
      if (FeePerKb != 0) hash ^= FeePerKb.GetHashCode();
      if (OutputSelectionAlgorithm != 0) hash ^= OutputSelectionAlgorithm.GetHashCode();
      hash ^= nonChangeOutputs_.GetHashCode();
      if (changeDestination_ != null) hash ^= ChangeDestination.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceAccount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SourceAccount);
      }
      if (RequiredConfirmations != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RequiredConfirmations);
      }
      if (FeePerKb != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FeePerKb);
      }
      if (OutputSelectionAlgorithm != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) OutputSelectionAlgorithm);
      }
      nonChangeOutputs_.WriteTo(output, _repeated_nonChangeOutputs_codec);
      if (changeDestination_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ChangeDestination);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceAccount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceAccount);
      }
      if (RequiredConfirmations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequiredConfirmations);
      }
      if (FeePerKb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FeePerKb);
      }
      if (OutputSelectionAlgorithm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputSelectionAlgorithm);
      }
      size += nonChangeOutputs_.CalculateSize(_repeated_nonChangeOutputs_codec);
      if (changeDestination_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChangeDestination);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConstructTransactionRequest other) {
      if (other == null) {
        return;
      }
      if (other.SourceAccount != 0) {
        SourceAccount = other.SourceAccount;
      }
      if (other.RequiredConfirmations != 0) {
        RequiredConfirmations = other.RequiredConfirmations;
      }
      if (other.FeePerKb != 0) {
        FeePerKb = other.FeePerKb;
      }
      if (other.OutputSelectionAlgorithm != 0) {
        OutputSelectionAlgorithm = other.OutputSelectionAlgorithm;
      }
      nonChangeOutputs_.Add(other.nonChangeOutputs_);
      if (other.changeDestination_ != null) {
        if (changeDestination_ == null) {
          changeDestination_ = new global::Walletrpc.ConstructTransactionRequest.Types.OutputDestination();
        }
        ChangeDestination.MergeFrom(other.ChangeDestination);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SourceAccount = input.ReadUInt32();
            break;
          }
          case 16: {
            RequiredConfirmations = input.ReadInt32();
            break;
          }
          case 24: {
            FeePerKb = input.ReadInt32();
            break;
          }
          case 32: {
            outputSelectionAlgorithm_ = (global::Walletrpc.ConstructTransactionRequest.Types.OutputSelectionAlgorithm) input.ReadEnum();
            break;
          }
          case 42: {
            nonChangeOutputs_.AddEntriesFrom(input, _repeated_nonChangeOutputs_codec);
            break;
          }
          case 50: {
            if (changeDestination_ == null) {
              changeDestination_ = new global::Walletrpc.ConstructTransactionRequest.Types.OutputDestination();
            }
            input.ReadMessage(changeDestination_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ConstructTransactionRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum OutputSelectionAlgorithm {
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("ALL")] All = 1,
      }

      public sealed partial class OutputDestination : pb::IMessage<OutputDestination> {
        private static readonly pb::MessageParser<OutputDestination> _parser = new pb::MessageParser<OutputDestination>(() => new OutputDestination());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OutputDestination> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Walletrpc.ConstructTransactionRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutputDestination() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutputDestination(OutputDestination other) : this() {
          address_ = other.address_;
          script_ = other.script_;
          scriptVersion_ = other.scriptVersion_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutputDestination Clone() {
          return new OutputDestination(this);
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 1;
        private string address_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Address {
          get { return address_; }
          set {
            address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "script" field.</summary>
        public const int ScriptFieldNumber = 2;
        private pb::ByteString script_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Script {
          get { return script_; }
          set {
            script_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "script_version" field.</summary>
        public const int ScriptVersionFieldNumber = 3;
        private uint scriptVersion_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ScriptVersion {
          get { return scriptVersion_; }
          set {
            scriptVersion_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OutputDestination);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OutputDestination other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Address != other.Address) return false;
          if (Script != other.Script) return false;
          if (ScriptVersion != other.ScriptVersion) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Address.Length != 0) hash ^= Address.GetHashCode();
          if (Script.Length != 0) hash ^= Script.GetHashCode();
          if (ScriptVersion != 0) hash ^= ScriptVersion.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Address.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Address);
          }
          if (Script.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Script);
          }
          if (ScriptVersion != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(ScriptVersion);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Address.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
          }
          if (Script.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Script);
          }
          if (ScriptVersion != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScriptVersion);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OutputDestination other) {
          if (other == null) {
            return;
          }
          if (other.Address.Length != 0) {
            Address = other.Address;
          }
          if (other.Script.Length != 0) {
            Script = other.Script;
          }
          if (other.ScriptVersion != 0) {
            ScriptVersion = other.ScriptVersion;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Address = input.ReadString();
                break;
              }
              case 18: {
                Script = input.ReadBytes();
                break;
              }
              case 24: {
                ScriptVersion = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Output : pb::IMessage<Output> {
        private static readonly pb::MessageParser<Output> _parser = new pb::MessageParser<Output>(() => new Output());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Output> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Walletrpc.ConstructTransactionRequest.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Output() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Output(Output other) : this() {
          Destination = other.destination_ != null ? other.Destination.Clone() : null;
          amount_ = other.amount_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Output Clone() {
          return new Output(this);
        }

        /// <summary>Field number for the "destination" field.</summary>
        public const int DestinationFieldNumber = 1;
        private global::Walletrpc.ConstructTransactionRequest.Types.OutputDestination destination_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Walletrpc.ConstructTransactionRequest.Types.OutputDestination Destination {
          get { return destination_; }
          set {
            destination_ = value;
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private long amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Output);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Output other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Destination, other.Destination)) return false;
          if (Amount != other.Amount) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (destination_ != null) hash ^= Destination.GetHashCode();
          if (Amount != 0L) hash ^= Amount.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (destination_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Destination);
          }
          if (Amount != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Amount);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (destination_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Destination);
          }
          if (Amount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Output other) {
          if (other == null) {
            return;
          }
          if (other.destination_ != null) {
            if (destination_ == null) {
              destination_ = new global::Walletrpc.ConstructTransactionRequest.Types.OutputDestination();
            }
            Destination.MergeFrom(other.Destination);
          }
          if (other.Amount != 0L) {
            Amount = other.Amount;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (destination_ == null) {
                  destination_ = new global::Walletrpc.ConstructTransactionRequest.Types.OutputDestination();
                }
                input.ReadMessage(destination_);
                break;
              }
              case 16: {
                Amount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ConstructTransactionResponse : pb::IMessage<ConstructTransactionResponse> {
    private static readonly pb::MessageParser<ConstructTransactionResponse> _parser = new pb::MessageParser<ConstructTransactionResponse>(() => new ConstructTransactionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConstructTransactionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstructTransactionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstructTransactionResponse(ConstructTransactionResponse other) : this() {
      unsignedTransaction_ = other.unsignedTransaction_;
      totalPreviousOutputAmount_ = other.totalPreviousOutputAmount_;
      totalOutputAmount_ = other.totalOutputAmount_;
      estimatedSignedSize_ = other.estimatedSignedSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstructTransactionResponse Clone() {
      return new ConstructTransactionResponse(this);
    }

    /// <summary>Field number for the "unsigned_transaction" field.</summary>
    public const int UnsignedTransactionFieldNumber = 1;
    private pb::ByteString unsignedTransaction_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UnsignedTransaction {
      get { return unsignedTransaction_; }
      set {
        unsignedTransaction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_previous_output_amount" field.</summary>
    public const int TotalPreviousOutputAmountFieldNumber = 2;
    private long totalPreviousOutputAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalPreviousOutputAmount {
      get { return totalPreviousOutputAmount_; }
      set {
        totalPreviousOutputAmount_ = value;
      }
    }

    /// <summary>Field number for the "total_output_amount" field.</summary>
    public const int TotalOutputAmountFieldNumber = 3;
    private long totalOutputAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalOutputAmount {
      get { return totalOutputAmount_; }
      set {
        totalOutputAmount_ = value;
      }
    }

    /// <summary>Field number for the "estimated_signed_size" field.</summary>
    public const int EstimatedSignedSizeFieldNumber = 4;
    private uint estimatedSignedSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EstimatedSignedSize {
      get { return estimatedSignedSize_; }
      set {
        estimatedSignedSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConstructTransactionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConstructTransactionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnsignedTransaction != other.UnsignedTransaction) return false;
      if (TotalPreviousOutputAmount != other.TotalPreviousOutputAmount) return false;
      if (TotalOutputAmount != other.TotalOutputAmount) return false;
      if (EstimatedSignedSize != other.EstimatedSignedSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnsignedTransaction.Length != 0) hash ^= UnsignedTransaction.GetHashCode();
      if (TotalPreviousOutputAmount != 0L) hash ^= TotalPreviousOutputAmount.GetHashCode();
      if (TotalOutputAmount != 0L) hash ^= TotalOutputAmount.GetHashCode();
      if (EstimatedSignedSize != 0) hash ^= EstimatedSignedSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnsignedTransaction.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(UnsignedTransaction);
      }
      if (TotalPreviousOutputAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalPreviousOutputAmount);
      }
      if (TotalOutputAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalOutputAmount);
      }
      if (EstimatedSignedSize != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(EstimatedSignedSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnsignedTransaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UnsignedTransaction);
      }
      if (TotalPreviousOutputAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalPreviousOutputAmount);
      }
      if (TotalOutputAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalOutputAmount);
      }
      if (EstimatedSignedSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EstimatedSignedSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConstructTransactionResponse other) {
      if (other == null) {
        return;
      }
      if (other.UnsignedTransaction.Length != 0) {
        UnsignedTransaction = other.UnsignedTransaction;
      }
      if (other.TotalPreviousOutputAmount != 0L) {
        TotalPreviousOutputAmount = other.TotalPreviousOutputAmount;
      }
      if (other.TotalOutputAmount != 0L) {
        TotalOutputAmount = other.TotalOutputAmount;
      }
      if (other.EstimatedSignedSize != 0) {
        EstimatedSignedSize = other.EstimatedSignedSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UnsignedTransaction = input.ReadBytes();
            break;
          }
          case 16: {
            TotalPreviousOutputAmount = input.ReadInt64();
            break;
          }
          case 24: {
            TotalOutputAmount = input.ReadInt64();
            break;
          }
          case 32: {
            EstimatedSignedSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SignTransactionRequest : pb::IMessage<SignTransactionRequest> {
    private static readonly pb::MessageParser<SignTransactionRequest> _parser = new pb::MessageParser<SignTransactionRequest>(() => new SignTransactionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignTransactionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignTransactionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignTransactionRequest(SignTransactionRequest other) : this() {
      passphrase_ = other.passphrase_;
      serializedTransaction_ = other.serializedTransaction_;
      inputIndexes_ = other.inputIndexes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignTransactionRequest Clone() {
      return new SignTransactionRequest(this);
    }

    /// <summary>Field number for the "passphrase" field.</summary>
    public const int PassphraseFieldNumber = 1;
    private pb::ByteString passphrase_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Passphrase {
      get { return passphrase_; }
      set {
        passphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serialized_transaction" field.</summary>
    public const int SerializedTransactionFieldNumber = 2;
    private pb::ByteString serializedTransaction_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SerializedTransaction {
      get { return serializedTransaction_; }
      set {
        serializedTransaction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input_indexes" field.</summary>
    public const int InputIndexesFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_inputIndexes_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> inputIndexes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// If no indexes are specified, signatures scripts will be added for
    /// every input. If any input indexes are specified, only those inputs
    /// will be signed.  Rather than returning an incompletely signed
    /// transaction if any of the inputs to be signed can not be, the RPC
    /// immediately errors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> InputIndexes {
      get { return inputIndexes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignTransactionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignTransactionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Passphrase != other.Passphrase) return false;
      if (SerializedTransaction != other.SerializedTransaction) return false;
      if(!inputIndexes_.Equals(other.inputIndexes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Passphrase.Length != 0) hash ^= Passphrase.GetHashCode();
      if (SerializedTransaction.Length != 0) hash ^= SerializedTransaction.GetHashCode();
      hash ^= inputIndexes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Passphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Passphrase);
      }
      if (SerializedTransaction.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SerializedTransaction);
      }
      inputIndexes_.WriteTo(output, _repeated_inputIndexes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Passphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Passphrase);
      }
      if (SerializedTransaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SerializedTransaction);
      }
      size += inputIndexes_.CalculateSize(_repeated_inputIndexes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignTransactionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Passphrase.Length != 0) {
        Passphrase = other.Passphrase;
      }
      if (other.SerializedTransaction.Length != 0) {
        SerializedTransaction = other.SerializedTransaction;
      }
      inputIndexes_.Add(other.inputIndexes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Passphrase = input.ReadBytes();
            break;
          }
          case 18: {
            SerializedTransaction = input.ReadBytes();
            break;
          }
          case 26:
          case 24: {
            inputIndexes_.AddEntriesFrom(input, _repeated_inputIndexes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SignTransactionResponse : pb::IMessage<SignTransactionResponse> {
    private static readonly pb::MessageParser<SignTransactionResponse> _parser = new pb::MessageParser<SignTransactionResponse>(() => new SignTransactionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignTransactionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignTransactionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignTransactionResponse(SignTransactionResponse other) : this() {
      transaction_ = other.transaction_;
      unsignedInputIndexes_ = other.unsignedInputIndexes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignTransactionResponse Clone() {
      return new SignTransactionResponse(this);
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 1;
    private pb::ByteString transaction_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Transaction {
      get { return transaction_; }
      set {
        transaction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unsigned_input_indexes" field.</summary>
    public const int UnsignedInputIndexesFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_unsignedInputIndexes_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> unsignedInputIndexes_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UnsignedInputIndexes {
      get { return unsignedInputIndexes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignTransactionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignTransactionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Transaction != other.Transaction) return false;
      if(!unsignedInputIndexes_.Equals(other.unsignedInputIndexes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Transaction.Length != 0) hash ^= Transaction.GetHashCode();
      hash ^= unsignedInputIndexes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Transaction.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Transaction);
      }
      unsignedInputIndexes_.WriteTo(output, _repeated_unsignedInputIndexes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Transaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Transaction);
      }
      size += unsignedInputIndexes_.CalculateSize(_repeated_unsignedInputIndexes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignTransactionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Transaction.Length != 0) {
        Transaction = other.Transaction;
      }
      unsignedInputIndexes_.Add(other.unsignedInputIndexes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Transaction = input.ReadBytes();
            break;
          }
          case 18:
          case 16: {
            unsignedInputIndexes_.AddEntriesFrom(input, _repeated_unsignedInputIndexes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PublishTransactionRequest : pb::IMessage<PublishTransactionRequest> {
    private static readonly pb::MessageParser<PublishTransactionRequest> _parser = new pb::MessageParser<PublishTransactionRequest>(() => new PublishTransactionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublishTransactionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishTransactionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishTransactionRequest(PublishTransactionRequest other) : this() {
      signedTransaction_ = other.signedTransaction_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishTransactionRequest Clone() {
      return new PublishTransactionRequest(this);
    }

    /// <summary>Field number for the "signed_transaction" field.</summary>
    public const int SignedTransactionFieldNumber = 1;
    private pb::ByteString signedTransaction_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SignedTransaction {
      get { return signedTransaction_; }
      set {
        signedTransaction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublishTransactionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublishTransactionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SignedTransaction != other.SignedTransaction) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SignedTransaction.Length != 0) hash ^= SignedTransaction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SignedTransaction.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SignedTransaction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SignedTransaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SignedTransaction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublishTransactionRequest other) {
      if (other == null) {
        return;
      }
      if (other.SignedTransaction.Length != 0) {
        SignedTransaction = other.SignedTransaction;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SignedTransaction = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PublishTransactionResponse : pb::IMessage<PublishTransactionResponse> {
    private static readonly pb::MessageParser<PublishTransactionResponse> _parser = new pb::MessageParser<PublishTransactionResponse>(() => new PublishTransactionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublishTransactionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishTransactionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishTransactionResponse(PublishTransactionResponse other) : this() {
      transactionHash_ = other.transactionHash_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishTransactionResponse Clone() {
      return new PublishTransactionResponse(this);
    }

    /// <summary>Field number for the "transaction_hash" field.</summary>
    public const int TransactionHashFieldNumber = 1;
    private pb::ByteString transactionHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransactionHash {
      get { return transactionHash_; }
      set {
        transactionHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublishTransactionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublishTransactionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionHash != other.TransactionHash) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionHash.Length != 0) hash ^= TransactionHash.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TransactionHash);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionHash);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublishTransactionResponse other) {
      if (other == null) {
        return;
      }
      if (other.TransactionHash.Length != 0) {
        TransactionHash = other.TransactionHash;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TransactionHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PurchaseTicketsRequest : pb::IMessage<PurchaseTicketsRequest> {
    private static readonly pb::MessageParser<PurchaseTicketsRequest> _parser = new pb::MessageParser<PurchaseTicketsRequest>(() => new PurchaseTicketsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PurchaseTicketsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseTicketsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseTicketsRequest(PurchaseTicketsRequest other) : this() {
      passphrase_ = other.passphrase_;
      account_ = other.account_;
      spendLimit_ = other.spendLimit_;
      requiredConfirmations_ = other.requiredConfirmations_;
      ticketAddress_ = other.ticketAddress_;
      numTickets_ = other.numTickets_;
      poolAddress_ = other.poolAddress_;
      poolFees_ = other.poolFees_;
      expiry_ = other.expiry_;
      txFee_ = other.txFee_;
      ticketFee_ = other.ticketFee_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseTicketsRequest Clone() {
      return new PurchaseTicketsRequest(this);
    }

    /// <summary>Field number for the "passphrase" field.</summary>
    public const int PassphraseFieldNumber = 1;
    private pb::ByteString passphrase_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Passphrase {
      get { return passphrase_; }
      set {
        passphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private uint account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "spend_limit" field.</summary>
    public const int SpendLimitFieldNumber = 3;
    private long spendLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SpendLimit {
      get { return spendLimit_; }
      set {
        spendLimit_ = value;
      }
    }

    /// <summary>Field number for the "required_confirmations" field.</summary>
    public const int RequiredConfirmationsFieldNumber = 4;
    private uint requiredConfirmations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequiredConfirmations {
      get { return requiredConfirmations_; }
      set {
        requiredConfirmations_ = value;
      }
    }

    /// <summary>Field number for the "ticket_address" field.</summary>
    public const int TicketAddressFieldNumber = 5;
    private string ticketAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketAddress {
      get { return ticketAddress_; }
      set {
        ticketAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_tickets" field.</summary>
    public const int NumTicketsFieldNumber = 6;
    private uint numTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumTickets {
      get { return numTickets_; }
      set {
        numTickets_ = value;
      }
    }

    /// <summary>Field number for the "pool_address" field.</summary>
    public const int PoolAddressFieldNumber = 7;
    private string poolAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PoolAddress {
      get { return poolAddress_; }
      set {
        poolAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pool_fees" field.</summary>
    public const int PoolFeesFieldNumber = 8;
    private double poolFees_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PoolFees {
      get { return poolFees_; }
      set {
        poolFees_ = value;
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 9;
    private uint expiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }

    /// <summary>Field number for the "tx_fee" field.</summary>
    public const int TxFeeFieldNumber = 10;
    private long txFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TxFee {
      get { return txFee_; }
      set {
        txFee_ = value;
      }
    }

    /// <summary>Field number for the "ticket_fee" field.</summary>
    public const int TicketFeeFieldNumber = 11;
    private long ticketFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TicketFee {
      get { return ticketFee_; }
      set {
        ticketFee_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PurchaseTicketsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PurchaseTicketsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Passphrase != other.Passphrase) return false;
      if (Account != other.Account) return false;
      if (SpendLimit != other.SpendLimit) return false;
      if (RequiredConfirmations != other.RequiredConfirmations) return false;
      if (TicketAddress != other.TicketAddress) return false;
      if (NumTickets != other.NumTickets) return false;
      if (PoolAddress != other.PoolAddress) return false;
      if (PoolFees != other.PoolFees) return false;
      if (Expiry != other.Expiry) return false;
      if (TxFee != other.TxFee) return false;
      if (TicketFee != other.TicketFee) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Passphrase.Length != 0) hash ^= Passphrase.GetHashCode();
      if (Account != 0) hash ^= Account.GetHashCode();
      if (SpendLimit != 0L) hash ^= SpendLimit.GetHashCode();
      if (RequiredConfirmations != 0) hash ^= RequiredConfirmations.GetHashCode();
      if (TicketAddress.Length != 0) hash ^= TicketAddress.GetHashCode();
      if (NumTickets != 0) hash ^= NumTickets.GetHashCode();
      if (PoolAddress.Length != 0) hash ^= PoolAddress.GetHashCode();
      if (PoolFees != 0D) hash ^= PoolFees.GetHashCode();
      if (Expiry != 0) hash ^= Expiry.GetHashCode();
      if (TxFee != 0L) hash ^= TxFee.GetHashCode();
      if (TicketFee != 0L) hash ^= TicketFee.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Passphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Passphrase);
      }
      if (Account != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Account);
      }
      if (SpendLimit != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SpendLimit);
      }
      if (RequiredConfirmations != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(RequiredConfirmations);
      }
      if (TicketAddress.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TicketAddress);
      }
      if (NumTickets != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(NumTickets);
      }
      if (PoolAddress.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PoolAddress);
      }
      if (PoolFees != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(PoolFees);
      }
      if (Expiry != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Expiry);
      }
      if (TxFee != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(TxFee);
      }
      if (TicketFee != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(TicketFee);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Passphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Passphrase);
      }
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      if (SpendLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SpendLimit);
      }
      if (RequiredConfirmations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequiredConfirmations);
      }
      if (TicketAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketAddress);
      }
      if (NumTickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumTickets);
      }
      if (PoolAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PoolAddress);
      }
      if (PoolFees != 0D) {
        size += 1 + 8;
      }
      if (Expiry != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Expiry);
      }
      if (TxFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TxFee);
      }
      if (TicketFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TicketFee);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PurchaseTicketsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Passphrase.Length != 0) {
        Passphrase = other.Passphrase;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
      if (other.SpendLimit != 0L) {
        SpendLimit = other.SpendLimit;
      }
      if (other.RequiredConfirmations != 0) {
        RequiredConfirmations = other.RequiredConfirmations;
      }
      if (other.TicketAddress.Length != 0) {
        TicketAddress = other.TicketAddress;
      }
      if (other.NumTickets != 0) {
        NumTickets = other.NumTickets;
      }
      if (other.PoolAddress.Length != 0) {
        PoolAddress = other.PoolAddress;
      }
      if (other.PoolFees != 0D) {
        PoolFees = other.PoolFees;
      }
      if (other.Expiry != 0) {
        Expiry = other.Expiry;
      }
      if (other.TxFee != 0L) {
        TxFee = other.TxFee;
      }
      if (other.TicketFee != 0L) {
        TicketFee = other.TicketFee;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Passphrase = input.ReadBytes();
            break;
          }
          case 16: {
            Account = input.ReadUInt32();
            break;
          }
          case 24: {
            SpendLimit = input.ReadInt64();
            break;
          }
          case 32: {
            RequiredConfirmations = input.ReadUInt32();
            break;
          }
          case 42: {
            TicketAddress = input.ReadString();
            break;
          }
          case 48: {
            NumTickets = input.ReadUInt32();
            break;
          }
          case 58: {
            PoolAddress = input.ReadString();
            break;
          }
          case 65: {
            PoolFees = input.ReadDouble();
            break;
          }
          case 72: {
            Expiry = input.ReadUInt32();
            break;
          }
          case 80: {
            TxFee = input.ReadInt64();
            break;
          }
          case 88: {
            TicketFee = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PurchaseTicketsResponse : pb::IMessage<PurchaseTicketsResponse> {
    private static readonly pb::MessageParser<PurchaseTicketsResponse> _parser = new pb::MessageParser<PurchaseTicketsResponse>(() => new PurchaseTicketsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PurchaseTicketsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseTicketsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseTicketsResponse(PurchaseTicketsResponse other) : this() {
      ticketHashes_ = other.ticketHashes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseTicketsResponse Clone() {
      return new PurchaseTicketsResponse(this);
    }

    /// <summary>Field number for the "ticket_hashes" field.</summary>
    public const int TicketHashesFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_ticketHashes_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> ticketHashes_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> TicketHashes {
      get { return ticketHashes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PurchaseTicketsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PurchaseTicketsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ticketHashes_.Equals(other.ticketHashes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ticketHashes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ticketHashes_.WriteTo(output, _repeated_ticketHashes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ticketHashes_.CalculateSize(_repeated_ticketHashes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PurchaseTicketsResponse other) {
      if (other == null) {
        return;
      }
      ticketHashes_.Add(other.ticketHashes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ticketHashes_.AddEntriesFrom(input, _repeated_ticketHashes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RevokeTicketsRequest : pb::IMessage<RevokeTicketsRequest> {
    private static readonly pb::MessageParser<RevokeTicketsRequest> _parser = new pb::MessageParser<RevokeTicketsRequest>(() => new RevokeTicketsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RevokeTicketsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevokeTicketsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevokeTicketsRequest(RevokeTicketsRequest other) : this() {
      passphrase_ = other.passphrase_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevokeTicketsRequest Clone() {
      return new RevokeTicketsRequest(this);
    }

    /// <summary>Field number for the "passphrase" field.</summary>
    public const int PassphraseFieldNumber = 1;
    private pb::ByteString passphrase_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Passphrase {
      get { return passphrase_; }
      set {
        passphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RevokeTicketsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RevokeTicketsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Passphrase != other.Passphrase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Passphrase.Length != 0) hash ^= Passphrase.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Passphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Passphrase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Passphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Passphrase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RevokeTicketsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Passphrase.Length != 0) {
        Passphrase = other.Passphrase;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Passphrase = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RevokeTicketsResponse : pb::IMessage<RevokeTicketsResponse> {
    private static readonly pb::MessageParser<RevokeTicketsResponse> _parser = new pb::MessageParser<RevokeTicketsResponse>(() => new RevokeTicketsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RevokeTicketsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevokeTicketsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevokeTicketsResponse(RevokeTicketsResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevokeTicketsResponse Clone() {
      return new RevokeTicketsResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RevokeTicketsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RevokeTicketsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RevokeTicketsResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class LoadActiveDataFiltersRequest : pb::IMessage<LoadActiveDataFiltersRequest> {
    private static readonly pb::MessageParser<LoadActiveDataFiltersRequest> _parser = new pb::MessageParser<LoadActiveDataFiltersRequest>(() => new LoadActiveDataFiltersRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadActiveDataFiltersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadActiveDataFiltersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadActiveDataFiltersRequest(LoadActiveDataFiltersRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadActiveDataFiltersRequest Clone() {
      return new LoadActiveDataFiltersRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadActiveDataFiltersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadActiveDataFiltersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadActiveDataFiltersRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class LoadActiveDataFiltersResponse : pb::IMessage<LoadActiveDataFiltersResponse> {
    private static readonly pb::MessageParser<LoadActiveDataFiltersResponse> _parser = new pb::MessageParser<LoadActiveDataFiltersResponse>(() => new LoadActiveDataFiltersResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadActiveDataFiltersResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadActiveDataFiltersResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadActiveDataFiltersResponse(LoadActiveDataFiltersResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadActiveDataFiltersResponse Clone() {
      return new LoadActiveDataFiltersResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadActiveDataFiltersResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadActiveDataFiltersResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadActiveDataFiltersResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class TransactionNotificationsRequest : pb::IMessage<TransactionNotificationsRequest> {
    private static readonly pb::MessageParser<TransactionNotificationsRequest> _parser = new pb::MessageParser<TransactionNotificationsRequest>(() => new TransactionNotificationsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionNotificationsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionNotificationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionNotificationsRequest(TransactionNotificationsRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionNotificationsRequest Clone() {
      return new TransactionNotificationsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionNotificationsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionNotificationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionNotificationsRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class TransactionNotificationsResponse : pb::IMessage<TransactionNotificationsResponse> {
    private static readonly pb::MessageParser<TransactionNotificationsResponse> _parser = new pb::MessageParser<TransactionNotificationsResponse>(() => new TransactionNotificationsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionNotificationsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionNotificationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionNotificationsResponse(TransactionNotificationsResponse other) : this() {
      attachedBlocks_ = other.attachedBlocks_.Clone();
      detachedBlocks_ = other.detachedBlocks_.Clone();
      unminedTransactions_ = other.unminedTransactions_.Clone();
      unminedTransactionHashes_ = other.unminedTransactionHashes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionNotificationsResponse Clone() {
      return new TransactionNotificationsResponse(this);
    }

    /// <summary>Field number for the "attached_blocks" field.</summary>
    public const int AttachedBlocksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Walletrpc.BlockDetails> _repeated_attachedBlocks_codec
        = pb::FieldCodec.ForMessage(10, global::Walletrpc.BlockDetails.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.BlockDetails> attachedBlocks_ = new pbc::RepeatedField<global::Walletrpc.BlockDetails>();
    /// <summary>
    /// Sorted by increasing height.  This is a repeated field so many new blocks
    /// in a new best chain can be notified at once during a reorganize.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Walletrpc.BlockDetails> AttachedBlocks {
      get { return attachedBlocks_; }
    }

    /// <summary>Field number for the "detached_blocks" field.</summary>
    public const int DetachedBlocksFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_detachedBlocks_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> detachedBlocks_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// If there was a chain reorganize, there may have been blocks with wallet
    /// transactions that are no longer in the best chain.  These are those
    /// block's hashes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> DetachedBlocks {
      get { return detachedBlocks_; }
    }

    /// <summary>Field number for the "unmined_transactions" field.</summary>
    public const int UnminedTransactionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Walletrpc.TransactionDetails> _repeated_unminedTransactions_codec
        = pb::FieldCodec.ForMessage(26, global::Walletrpc.TransactionDetails.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.TransactionDetails> unminedTransactions_ = new pbc::RepeatedField<global::Walletrpc.TransactionDetails>();
    /// <summary>
    /// Any new unmined transactions are included here.  These unmined transactions
    /// refer to the current best chain, so transactions from detached blocks may
    /// be moved to mempool and included here if they are not mined or double spent
    /// in the new chain.  Additonally, if no new blocks were attached but a relevant
    /// unmined transaction is seen by the wallet, it will be reported here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Walletrpc.TransactionDetails> UnminedTransactions {
      get { return unminedTransactions_; }
    }

    /// <summary>Field number for the "unmined_transaction_hashes" field.</summary>
    public const int UnminedTransactionHashesFieldNumber = 4;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_unminedTransactionHashes_codec
        = pb::FieldCodec.ForBytes(34);
    private readonly pbc::RepeatedField<pb::ByteString> unminedTransactionHashes_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// Instead of notifying all of the removed unmined transactions,
    /// just send all of the current hashes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> UnminedTransactionHashes {
      get { return unminedTransactionHashes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionNotificationsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionNotificationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attachedBlocks_.Equals(other.attachedBlocks_)) return false;
      if(!detachedBlocks_.Equals(other.detachedBlocks_)) return false;
      if(!unminedTransactions_.Equals(other.unminedTransactions_)) return false;
      if(!unminedTransactionHashes_.Equals(other.unminedTransactionHashes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attachedBlocks_.GetHashCode();
      hash ^= detachedBlocks_.GetHashCode();
      hash ^= unminedTransactions_.GetHashCode();
      hash ^= unminedTransactionHashes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attachedBlocks_.WriteTo(output, _repeated_attachedBlocks_codec);
      detachedBlocks_.WriteTo(output, _repeated_detachedBlocks_codec);
      unminedTransactions_.WriteTo(output, _repeated_unminedTransactions_codec);
      unminedTransactionHashes_.WriteTo(output, _repeated_unminedTransactionHashes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attachedBlocks_.CalculateSize(_repeated_attachedBlocks_codec);
      size += detachedBlocks_.CalculateSize(_repeated_detachedBlocks_codec);
      size += unminedTransactions_.CalculateSize(_repeated_unminedTransactions_codec);
      size += unminedTransactionHashes_.CalculateSize(_repeated_unminedTransactionHashes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionNotificationsResponse other) {
      if (other == null) {
        return;
      }
      attachedBlocks_.Add(other.attachedBlocks_);
      detachedBlocks_.Add(other.detachedBlocks_);
      unminedTransactions_.Add(other.unminedTransactions_);
      unminedTransactionHashes_.Add(other.unminedTransactionHashes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            attachedBlocks_.AddEntriesFrom(input, _repeated_attachedBlocks_codec);
            break;
          }
          case 18: {
            detachedBlocks_.AddEntriesFrom(input, _repeated_detachedBlocks_codec);
            break;
          }
          case 26: {
            unminedTransactions_.AddEntriesFrom(input, _repeated_unminedTransactions_codec);
            break;
          }
          case 34: {
            unminedTransactionHashes_.AddEntriesFrom(input, _repeated_unminedTransactionHashes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccountNotificationsRequest : pb::IMessage<AccountNotificationsRequest> {
    private static readonly pb::MessageParser<AccountNotificationsRequest> _parser = new pb::MessageParser<AccountNotificationsRequest>(() => new AccountNotificationsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountNotificationsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountNotificationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountNotificationsRequest(AccountNotificationsRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountNotificationsRequest Clone() {
      return new AccountNotificationsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountNotificationsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountNotificationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountNotificationsRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class AccountNotificationsResponse : pb::IMessage<AccountNotificationsResponse> {
    private static readonly pb::MessageParser<AccountNotificationsResponse> _parser = new pb::MessageParser<AccountNotificationsResponse>(() => new AccountNotificationsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountNotificationsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountNotificationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountNotificationsResponse(AccountNotificationsResponse other) : this() {
      accountNumber_ = other.accountNumber_;
      accountName_ = other.accountName_;
      externalKeyCount_ = other.externalKeyCount_;
      internalKeyCount_ = other.internalKeyCount_;
      importedKeyCount_ = other.importedKeyCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountNotificationsResponse Clone() {
      return new AccountNotificationsResponse(this);
    }

    /// <summary>Field number for the "account_number" field.</summary>
    public const int AccountNumberFieldNumber = 1;
    private uint accountNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccountNumber {
      get { return accountNumber_; }
      set {
        accountNumber_ = value;
      }
    }

    /// <summary>Field number for the "account_name" field.</summary>
    public const int AccountNameFieldNumber = 2;
    private string accountName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "external_key_count" field.</summary>
    public const int ExternalKeyCountFieldNumber = 3;
    private uint externalKeyCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExternalKeyCount {
      get { return externalKeyCount_; }
      set {
        externalKeyCount_ = value;
      }
    }

    /// <summary>Field number for the "internal_key_count" field.</summary>
    public const int InternalKeyCountFieldNumber = 4;
    private uint internalKeyCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InternalKeyCount {
      get { return internalKeyCount_; }
      set {
        internalKeyCount_ = value;
      }
    }

    /// <summary>Field number for the "imported_key_count" field.</summary>
    public const int ImportedKeyCountFieldNumber = 5;
    private uint importedKeyCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ImportedKeyCount {
      get { return importedKeyCount_; }
      set {
        importedKeyCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountNotificationsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountNotificationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountNumber != other.AccountNumber) return false;
      if (AccountName != other.AccountName) return false;
      if (ExternalKeyCount != other.ExternalKeyCount) return false;
      if (InternalKeyCount != other.InternalKeyCount) return false;
      if (ImportedKeyCount != other.ImportedKeyCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountNumber != 0) hash ^= AccountNumber.GetHashCode();
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      if (ExternalKeyCount != 0) hash ^= ExternalKeyCount.GetHashCode();
      if (InternalKeyCount != 0) hash ^= InternalKeyCount.GetHashCode();
      if (ImportedKeyCount != 0) hash ^= ImportedKeyCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountNumber != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AccountNumber);
      }
      if (AccountName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountName);
      }
      if (ExternalKeyCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ExternalKeyCount);
      }
      if (InternalKeyCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(InternalKeyCount);
      }
      if (ImportedKeyCount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ImportedKeyCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccountNumber);
      }
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
      }
      if (ExternalKeyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExternalKeyCount);
      }
      if (InternalKeyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InternalKeyCount);
      }
      if (ImportedKeyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImportedKeyCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountNotificationsResponse other) {
      if (other == null) {
        return;
      }
      if (other.AccountNumber != 0) {
        AccountNumber = other.AccountNumber;
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
      if (other.ExternalKeyCount != 0) {
        ExternalKeyCount = other.ExternalKeyCount;
      }
      if (other.InternalKeyCount != 0) {
        InternalKeyCount = other.InternalKeyCount;
      }
      if (other.ImportedKeyCount != 0) {
        ImportedKeyCount = other.ImportedKeyCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountNumber = input.ReadUInt32();
            break;
          }
          case 18: {
            AccountName = input.ReadString();
            break;
          }
          case 24: {
            ExternalKeyCount = input.ReadUInt32();
            break;
          }
          case 32: {
            InternalKeyCount = input.ReadUInt32();
            break;
          }
          case 40: {
            ImportedKeyCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateWalletRequest : pb::IMessage<CreateWalletRequest> {
    private static readonly pb::MessageParser<CreateWalletRequest> _parser = new pb::MessageParser<CreateWalletRequest>(() => new CreateWalletRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateWalletRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWalletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWalletRequest(CreateWalletRequest other) : this() {
      publicPassphrase_ = other.publicPassphrase_;
      privatePassphrase_ = other.privatePassphrase_;
      seed_ = other.seed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWalletRequest Clone() {
      return new CreateWalletRequest(this);
    }

    /// <summary>Field number for the "public_passphrase" field.</summary>
    public const int PublicPassphraseFieldNumber = 1;
    private pb::ByteString publicPassphrase_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicPassphrase {
      get { return publicPassphrase_; }
      set {
        publicPassphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private_passphrase" field.</summary>
    public const int PrivatePassphraseFieldNumber = 2;
    private pb::ByteString privatePassphrase_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrivatePassphrase {
      get { return privatePassphrase_; }
      set {
        privatePassphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 3;
    private pb::ByteString seed_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Seed {
      get { return seed_; }
      set {
        seed_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateWalletRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateWalletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicPassphrase != other.PublicPassphrase) return false;
      if (PrivatePassphrase != other.PrivatePassphrase) return false;
      if (Seed != other.Seed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicPassphrase.Length != 0) hash ^= PublicPassphrase.GetHashCode();
      if (PrivatePassphrase.Length != 0) hash ^= PrivatePassphrase.GetHashCode();
      if (Seed.Length != 0) hash ^= Seed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicPassphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PublicPassphrase);
      }
      if (PrivatePassphrase.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PrivatePassphrase);
      }
      if (Seed.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Seed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicPassphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicPassphrase);
      }
      if (PrivatePassphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrivatePassphrase);
      }
      if (Seed.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Seed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateWalletRequest other) {
      if (other == null) {
        return;
      }
      if (other.PublicPassphrase.Length != 0) {
        PublicPassphrase = other.PublicPassphrase;
      }
      if (other.PrivatePassphrase.Length != 0) {
        PrivatePassphrase = other.PrivatePassphrase;
      }
      if (other.Seed.Length != 0) {
        Seed = other.Seed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PublicPassphrase = input.ReadBytes();
            break;
          }
          case 18: {
            PrivatePassphrase = input.ReadBytes();
            break;
          }
          case 26: {
            Seed = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateWalletResponse : pb::IMessage<CreateWalletResponse> {
    private static readonly pb::MessageParser<CreateWalletResponse> _parser = new pb::MessageParser<CreateWalletResponse>(() => new CreateWalletResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateWalletResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWalletResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWalletResponse(CreateWalletResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWalletResponse Clone() {
      return new CreateWalletResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateWalletResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateWalletResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateWalletResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class OpenWalletRequest : pb::IMessage<OpenWalletRequest> {
    private static readonly pb::MessageParser<OpenWalletRequest> _parser = new pb::MessageParser<OpenWalletRequest>(() => new OpenWalletRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenWalletRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenWalletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenWalletRequest(OpenWalletRequest other) : this() {
      publicPassphrase_ = other.publicPassphrase_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenWalletRequest Clone() {
      return new OpenWalletRequest(this);
    }

    /// <summary>Field number for the "public_passphrase" field.</summary>
    public const int PublicPassphraseFieldNumber = 1;
    private pb::ByteString publicPassphrase_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicPassphrase {
      get { return publicPassphrase_; }
      set {
        publicPassphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenWalletRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenWalletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicPassphrase != other.PublicPassphrase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicPassphrase.Length != 0) hash ^= PublicPassphrase.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicPassphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PublicPassphrase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicPassphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicPassphrase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenWalletRequest other) {
      if (other == null) {
        return;
      }
      if (other.PublicPassphrase.Length != 0) {
        PublicPassphrase = other.PublicPassphrase;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PublicPassphrase = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpenWalletResponse : pb::IMessage<OpenWalletResponse> {
    private static readonly pb::MessageParser<OpenWalletResponse> _parser = new pb::MessageParser<OpenWalletResponse>(() => new OpenWalletResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenWalletResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenWalletResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenWalletResponse(OpenWalletResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenWalletResponse Clone() {
      return new OpenWalletResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenWalletResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenWalletResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenWalletResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class CloseWalletRequest : pb::IMessage<CloseWalletRequest> {
    private static readonly pb::MessageParser<CloseWalletRequest> _parser = new pb::MessageParser<CloseWalletRequest>(() => new CloseWalletRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseWalletRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseWalletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseWalletRequest(CloseWalletRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseWalletRequest Clone() {
      return new CloseWalletRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseWalletRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseWalletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseWalletRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class CloseWalletResponse : pb::IMessage<CloseWalletResponse> {
    private static readonly pb::MessageParser<CloseWalletResponse> _parser = new pb::MessageParser<CloseWalletResponse>(() => new CloseWalletResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseWalletResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseWalletResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseWalletResponse(CloseWalletResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseWalletResponse Clone() {
      return new CloseWalletResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseWalletResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseWalletResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseWalletResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class WalletExistsRequest : pb::IMessage<WalletExistsRequest> {
    private static readonly pb::MessageParser<WalletExistsRequest> _parser = new pb::MessageParser<WalletExistsRequest>(() => new WalletExistsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WalletExistsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletExistsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletExistsRequest(WalletExistsRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletExistsRequest Clone() {
      return new WalletExistsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WalletExistsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WalletExistsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WalletExistsRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class WalletExistsResponse : pb::IMessage<WalletExistsResponse> {
    private static readonly pb::MessageParser<WalletExistsResponse> _parser = new pb::MessageParser<WalletExistsResponse>(() => new WalletExistsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WalletExistsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletExistsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletExistsResponse(WalletExistsResponse other) : this() {
      exists_ = other.exists_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletExistsResponse Clone() {
      return new WalletExistsResponse(this);
    }

    /// <summary>Field number for the "exists" field.</summary>
    public const int ExistsFieldNumber = 1;
    private bool exists_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Exists {
      get { return exists_; }
      set {
        exists_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WalletExistsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WalletExistsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exists != other.Exists) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Exists != false) hash ^= Exists.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exists != false) {
        output.WriteRawTag(8);
        output.WriteBool(Exists);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exists != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WalletExistsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Exists != false) {
        Exists = other.Exists;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Exists = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartConsensusRpcRequest : pb::IMessage<StartConsensusRpcRequest> {
    private static readonly pb::MessageParser<StartConsensusRpcRequest> _parser = new pb::MessageParser<StartConsensusRpcRequest>(() => new StartConsensusRpcRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartConsensusRpcRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConsensusRpcRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConsensusRpcRequest(StartConsensusRpcRequest other) : this() {
      networkAddress_ = other.networkAddress_;
      username_ = other.username_;
      password_ = other.password_;
      certificate_ = other.certificate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConsensusRpcRequest Clone() {
      return new StartConsensusRpcRequest(this);
    }

    /// <summary>Field number for the "network_address" field.</summary>
    public const int NetworkAddressFieldNumber = 1;
    private string networkAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkAddress {
      get { return networkAddress_; }
      set {
        networkAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private pb::ByteString password_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "certificate" field.</summary>
    public const int CertificateFieldNumber = 4;
    private pb::ByteString certificate_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Certificate {
      get { return certificate_; }
      set {
        certificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartConsensusRpcRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartConsensusRpcRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetworkAddress != other.NetworkAddress) return false;
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      if (Certificate != other.Certificate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NetworkAddress.Length != 0) hash ^= NetworkAddress.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Certificate.Length != 0) hash ^= Certificate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetworkAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NetworkAddress);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Password);
      }
      if (Certificate.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Certificate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetworkAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkAddress);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
      }
      if (Certificate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Certificate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartConsensusRpcRequest other) {
      if (other == null) {
        return;
      }
      if (other.NetworkAddress.Length != 0) {
        NetworkAddress = other.NetworkAddress;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Certificate.Length != 0) {
        Certificate = other.Certificate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NetworkAddress = input.ReadString();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadBytes();
            break;
          }
          case 34: {
            Certificate = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartConsensusRpcResponse : pb::IMessage<StartConsensusRpcResponse> {
    private static readonly pb::MessageParser<StartConsensusRpcResponse> _parser = new pb::MessageParser<StartConsensusRpcResponse>(() => new StartConsensusRpcResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartConsensusRpcResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConsensusRpcResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConsensusRpcResponse(StartConsensusRpcResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConsensusRpcResponse Clone() {
      return new StartConsensusRpcResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartConsensusRpcResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartConsensusRpcResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartConsensusRpcResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class DiscoverAddressesRequest : pb::IMessage<DiscoverAddressesRequest> {
    private static readonly pb::MessageParser<DiscoverAddressesRequest> _parser = new pb::MessageParser<DiscoverAddressesRequest>(() => new DiscoverAddressesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiscoverAddressesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverAddressesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverAddressesRequest(DiscoverAddressesRequest other) : this() {
      discoverAccounts_ = other.discoverAccounts_;
      privatePassphrase_ = other.privatePassphrase_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverAddressesRequest Clone() {
      return new DiscoverAddressesRequest(this);
    }

    /// <summary>Field number for the "discover_accounts" field.</summary>
    public const int DiscoverAccountsFieldNumber = 1;
    private bool discoverAccounts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DiscoverAccounts {
      get { return discoverAccounts_; }
      set {
        discoverAccounts_ = value;
      }
    }

    /// <summary>Field number for the "private_passphrase" field.</summary>
    public const int PrivatePassphraseFieldNumber = 2;
    private pb::ByteString privatePassphrase_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrivatePassphrase {
      get { return privatePassphrase_; }
      set {
        privatePassphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiscoverAddressesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiscoverAddressesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiscoverAccounts != other.DiscoverAccounts) return false;
      if (PrivatePassphrase != other.PrivatePassphrase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DiscoverAccounts != false) hash ^= DiscoverAccounts.GetHashCode();
      if (PrivatePassphrase.Length != 0) hash ^= PrivatePassphrase.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiscoverAccounts != false) {
        output.WriteRawTag(8);
        output.WriteBool(DiscoverAccounts);
      }
      if (PrivatePassphrase.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PrivatePassphrase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiscoverAccounts != false) {
        size += 1 + 1;
      }
      if (PrivatePassphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrivatePassphrase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiscoverAddressesRequest other) {
      if (other == null) {
        return;
      }
      if (other.DiscoverAccounts != false) {
        DiscoverAccounts = other.DiscoverAccounts;
      }
      if (other.PrivatePassphrase.Length != 0) {
        PrivatePassphrase = other.PrivatePassphrase;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DiscoverAccounts = input.ReadBool();
            break;
          }
          case 18: {
            PrivatePassphrase = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DiscoverAddressesResponse : pb::IMessage<DiscoverAddressesResponse> {
    private static readonly pb::MessageParser<DiscoverAddressesResponse> _parser = new pb::MessageParser<DiscoverAddressesResponse>(() => new DiscoverAddressesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiscoverAddressesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverAddressesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverAddressesResponse(DiscoverAddressesResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverAddressesResponse Clone() {
      return new DiscoverAddressesResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiscoverAddressesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiscoverAddressesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiscoverAddressesResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SubscribeToBlockNotificationsRequest : pb::IMessage<SubscribeToBlockNotificationsRequest> {
    private static readonly pb::MessageParser<SubscribeToBlockNotificationsRequest> _parser = new pb::MessageParser<SubscribeToBlockNotificationsRequest>(() => new SubscribeToBlockNotificationsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeToBlockNotificationsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToBlockNotificationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToBlockNotificationsRequest(SubscribeToBlockNotificationsRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToBlockNotificationsRequest Clone() {
      return new SubscribeToBlockNotificationsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeToBlockNotificationsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeToBlockNotificationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeToBlockNotificationsRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SubscribeToBlockNotificationsResponse : pb::IMessage<SubscribeToBlockNotificationsResponse> {
    private static readonly pb::MessageParser<SubscribeToBlockNotificationsResponse> _parser = new pb::MessageParser<SubscribeToBlockNotificationsResponse>(() => new SubscribeToBlockNotificationsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeToBlockNotificationsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToBlockNotificationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToBlockNotificationsResponse(SubscribeToBlockNotificationsResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToBlockNotificationsResponse Clone() {
      return new SubscribeToBlockNotificationsResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeToBlockNotificationsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeToBlockNotificationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeToBlockNotificationsResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class FetchHeadersRequest : pb::IMessage<FetchHeadersRequest> {
    private static readonly pb::MessageParser<FetchHeadersRequest> _parser = new pb::MessageParser<FetchHeadersRequest>(() => new FetchHeadersRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FetchHeadersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchHeadersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchHeadersRequest(FetchHeadersRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchHeadersRequest Clone() {
      return new FetchHeadersRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FetchHeadersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FetchHeadersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FetchHeadersRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class FetchHeadersResponse : pb::IMessage<FetchHeadersResponse> {
    private static readonly pb::MessageParser<FetchHeadersResponse> _parser = new pb::MessageParser<FetchHeadersResponse>(() => new FetchHeadersResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FetchHeadersResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchHeadersResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchHeadersResponse(FetchHeadersResponse other) : this() {
      fetchedHeadersCount_ = other.fetchedHeadersCount_;
      firstNewBlockHash_ = other.firstNewBlockHash_;
      firstNewBlockHeight_ = other.firstNewBlockHeight_;
      mainChainTipBlockHash_ = other.mainChainTipBlockHash_;
      mainChainTipBlockHeight_ = other.mainChainTipBlockHeight_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchHeadersResponse Clone() {
      return new FetchHeadersResponse(this);
    }

    /// <summary>Field number for the "fetched_headers_count" field.</summary>
    public const int FetchedHeadersCountFieldNumber = 1;
    private uint fetchedHeadersCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FetchedHeadersCount {
      get { return fetchedHeadersCount_; }
      set {
        fetchedHeadersCount_ = value;
      }
    }

    /// <summary>Field number for the "first_new_block_hash" field.</summary>
    public const int FirstNewBlockHashFieldNumber = 2;
    private pb::ByteString firstNewBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FirstNewBlockHash {
      get { return firstNewBlockHash_; }
      set {
        firstNewBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_new_block_height" field.</summary>
    public const int FirstNewBlockHeightFieldNumber = 3;
    private int firstNewBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstNewBlockHeight {
      get { return firstNewBlockHeight_; }
      set {
        firstNewBlockHeight_ = value;
      }
    }

    /// <summary>Field number for the "main_chain_tip_block_hash" field.</summary>
    public const int MainChainTipBlockHashFieldNumber = 4;
    private pb::ByteString mainChainTipBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MainChainTipBlockHash {
      get { return mainChainTipBlockHash_; }
      set {
        mainChainTipBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "main_chain_tip_block_height" field.</summary>
    public const int MainChainTipBlockHeightFieldNumber = 5;
    private int mainChainTipBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainChainTipBlockHeight {
      get { return mainChainTipBlockHeight_; }
      set {
        mainChainTipBlockHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FetchHeadersResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FetchHeadersResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FetchedHeadersCount != other.FetchedHeadersCount) return false;
      if (FirstNewBlockHash != other.FirstNewBlockHash) return false;
      if (FirstNewBlockHeight != other.FirstNewBlockHeight) return false;
      if (MainChainTipBlockHash != other.MainChainTipBlockHash) return false;
      if (MainChainTipBlockHeight != other.MainChainTipBlockHeight) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FetchedHeadersCount != 0) hash ^= FetchedHeadersCount.GetHashCode();
      if (FirstNewBlockHash.Length != 0) hash ^= FirstNewBlockHash.GetHashCode();
      if (FirstNewBlockHeight != 0) hash ^= FirstNewBlockHeight.GetHashCode();
      if (MainChainTipBlockHash.Length != 0) hash ^= MainChainTipBlockHash.GetHashCode();
      if (MainChainTipBlockHeight != 0) hash ^= MainChainTipBlockHeight.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FetchedHeadersCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FetchedHeadersCount);
      }
      if (FirstNewBlockHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(FirstNewBlockHash);
      }
      if (FirstNewBlockHeight != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FirstNewBlockHeight);
      }
      if (MainChainTipBlockHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(MainChainTipBlockHash);
      }
      if (MainChainTipBlockHeight != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MainChainTipBlockHeight);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FetchedHeadersCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FetchedHeadersCount);
      }
      if (FirstNewBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FirstNewBlockHash);
      }
      if (FirstNewBlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstNewBlockHeight);
      }
      if (MainChainTipBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MainChainTipBlockHash);
      }
      if (MainChainTipBlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainChainTipBlockHeight);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FetchHeadersResponse other) {
      if (other == null) {
        return;
      }
      if (other.FetchedHeadersCount != 0) {
        FetchedHeadersCount = other.FetchedHeadersCount;
      }
      if (other.FirstNewBlockHash.Length != 0) {
        FirstNewBlockHash = other.FirstNewBlockHash;
      }
      if (other.FirstNewBlockHeight != 0) {
        FirstNewBlockHeight = other.FirstNewBlockHeight;
      }
      if (other.MainChainTipBlockHash.Length != 0) {
        MainChainTipBlockHash = other.MainChainTipBlockHash;
      }
      if (other.MainChainTipBlockHeight != 0) {
        MainChainTipBlockHeight = other.MainChainTipBlockHeight;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FetchedHeadersCount = input.ReadUInt32();
            break;
          }
          case 18: {
            FirstNewBlockHash = input.ReadBytes();
            break;
          }
          case 24: {
            FirstNewBlockHeight = input.ReadInt32();
            break;
          }
          case 34: {
            MainChainTipBlockHash = input.ReadBytes();
            break;
          }
          case 40: {
            MainChainTipBlockHeight = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GenerateRandomSeedRequest : pb::IMessage<GenerateRandomSeedRequest> {
    private static readonly pb::MessageParser<GenerateRandomSeedRequest> _parser = new pb::MessageParser<GenerateRandomSeedRequest>(() => new GenerateRandomSeedRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenerateRandomSeedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateRandomSeedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateRandomSeedRequest(GenerateRandomSeedRequest other) : this() {
      seedLength_ = other.seedLength_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateRandomSeedRequest Clone() {
      return new GenerateRandomSeedRequest(this);
    }

    /// <summary>Field number for the "seed_length" field.</summary>
    public const int SeedLengthFieldNumber = 1;
    private uint seedLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeedLength {
      get { return seedLength_; }
      set {
        seedLength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenerateRandomSeedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenerateRandomSeedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeedLength != other.SeedLength) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeedLength != 0) hash ^= SeedLength.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeedLength != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SeedLength);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeedLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeedLength);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenerateRandomSeedRequest other) {
      if (other == null) {
        return;
      }
      if (other.SeedLength != 0) {
        SeedLength = other.SeedLength;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeedLength = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GenerateRandomSeedResponse : pb::IMessage<GenerateRandomSeedResponse> {
    private static readonly pb::MessageParser<GenerateRandomSeedResponse> _parser = new pb::MessageParser<GenerateRandomSeedResponse>(() => new GenerateRandomSeedResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenerateRandomSeedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateRandomSeedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateRandomSeedResponse(GenerateRandomSeedResponse other) : this() {
      seedBytes_ = other.seedBytes_;
      seedHex_ = other.seedHex_;
      seedMnemonic_ = other.seedMnemonic_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateRandomSeedResponse Clone() {
      return new GenerateRandomSeedResponse(this);
    }

    /// <summary>Field number for the "seed_bytes" field.</summary>
    public const int SeedBytesFieldNumber = 1;
    private pb::ByteString seedBytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SeedBytes {
      get { return seedBytes_; }
      set {
        seedBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seed_hex" field.</summary>
    public const int SeedHexFieldNumber = 2;
    private string seedHex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SeedHex {
      get { return seedHex_; }
      set {
        seedHex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seed_mnemonic" field.</summary>
    public const int SeedMnemonicFieldNumber = 3;
    private string seedMnemonic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SeedMnemonic {
      get { return seedMnemonic_; }
      set {
        seedMnemonic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenerateRandomSeedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenerateRandomSeedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeedBytes != other.SeedBytes) return false;
      if (SeedHex != other.SeedHex) return false;
      if (SeedMnemonic != other.SeedMnemonic) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeedBytes.Length != 0) hash ^= SeedBytes.GetHashCode();
      if (SeedHex.Length != 0) hash ^= SeedHex.GetHashCode();
      if (SeedMnemonic.Length != 0) hash ^= SeedMnemonic.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeedBytes.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SeedBytes);
      }
      if (SeedHex.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SeedHex);
      }
      if (SeedMnemonic.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SeedMnemonic);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeedBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SeedBytes);
      }
      if (SeedHex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SeedHex);
      }
      if (SeedMnemonic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SeedMnemonic);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenerateRandomSeedResponse other) {
      if (other == null) {
        return;
      }
      if (other.SeedBytes.Length != 0) {
        SeedBytes = other.SeedBytes;
      }
      if (other.SeedHex.Length != 0) {
        SeedHex = other.SeedHex;
      }
      if (other.SeedMnemonic.Length != 0) {
        SeedMnemonic = other.SeedMnemonic;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SeedBytes = input.ReadBytes();
            break;
          }
          case 18: {
            SeedHex = input.ReadString();
            break;
          }
          case 26: {
            SeedMnemonic = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DecodeSeedRequest : pb::IMessage<DecodeSeedRequest> {
    private static readonly pb::MessageParser<DecodeSeedRequest> _parser = new pb::MessageParser<DecodeSeedRequest>(() => new DecodeSeedRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecodeSeedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodeSeedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodeSeedRequest(DecodeSeedRequest other) : this() {
      userInput_ = other.userInput_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodeSeedRequest Clone() {
      return new DecodeSeedRequest(this);
    }

    /// <summary>Field number for the "user_input" field.</summary>
    public const int UserInputFieldNumber = 1;
    private string userInput_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserInput {
      get { return userInput_; }
      set {
        userInput_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecodeSeedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecodeSeedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserInput != other.UserInput) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserInput.Length != 0) hash ^= UserInput.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserInput.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserInput);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserInput.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserInput);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecodeSeedRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserInput.Length != 0) {
        UserInput = other.UserInput;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserInput = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DecodeSeedResponse : pb::IMessage<DecodeSeedResponse> {
    private static readonly pb::MessageParser<DecodeSeedResponse> _parser = new pb::MessageParser<DecodeSeedResponse>(() => new DecodeSeedResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecodeSeedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodeSeedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodeSeedResponse(DecodeSeedResponse other) : this() {
      decodedSeed_ = other.decodedSeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodeSeedResponse Clone() {
      return new DecodeSeedResponse(this);
    }

    /// <summary>Field number for the "decoded_seed" field.</summary>
    public const int DecodedSeedFieldNumber = 1;
    private pb::ByteString decodedSeed_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DecodedSeed {
      get { return decodedSeed_; }
      set {
        decodedSeed_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecodeSeedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecodeSeedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DecodedSeed != other.DecodedSeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DecodedSeed.Length != 0) hash ^= DecodedSeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DecodedSeed.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(DecodedSeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DecodedSeed.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DecodedSeed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecodeSeedResponse other) {
      if (other == null) {
        return;
      }
      if (other.DecodedSeed.Length != 0) {
        DecodedSeed = other.DecodedSeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DecodedSeed = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartAutoBuyerRequest : pb::IMessage<StartAutoBuyerRequest> {
    private static readonly pb::MessageParser<StartAutoBuyerRequest> _parser = new pb::MessageParser<StartAutoBuyerRequest>(() => new StartAutoBuyerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartAutoBuyerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartAutoBuyerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartAutoBuyerRequest(StartAutoBuyerRequest other) : this() {
      passphrase_ = other.passphrase_;
      account_ = other.account_;
      balanceToMaintain_ = other.balanceToMaintain_;
      maxFeePerKb_ = other.maxFeePerKb_;
      maxPriceRelative_ = other.maxPriceRelative_;
      maxPriceAbsolute_ = other.maxPriceAbsolute_;
      votingAddress_ = other.votingAddress_;
      poolAddress_ = other.poolAddress_;
      poolFees_ = other.poolFees_;
      maxPerBlock_ = other.maxPerBlock_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartAutoBuyerRequest Clone() {
      return new StartAutoBuyerRequest(this);
    }

    /// <summary>Field number for the "passphrase" field.</summary>
    public const int PassphraseFieldNumber = 1;
    private pb::ByteString passphrase_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Passphrase {
      get { return passphrase_; }
      set {
        passphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private uint account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "balance_to_maintain" field.</summary>
    public const int BalanceToMaintainFieldNumber = 3;
    private long balanceToMaintain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BalanceToMaintain {
      get { return balanceToMaintain_; }
      set {
        balanceToMaintain_ = value;
      }
    }

    /// <summary>Field number for the "max_fee_per_kb" field.</summary>
    public const int MaxFeePerKbFieldNumber = 4;
    private long maxFeePerKb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxFeePerKb {
      get { return maxFeePerKb_; }
      set {
        maxFeePerKb_ = value;
      }
    }

    /// <summary>Field number for the "max_price_relative" field.</summary>
    public const int MaxPriceRelativeFieldNumber = 5;
    private double maxPriceRelative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxPriceRelative {
      get { return maxPriceRelative_; }
      set {
        maxPriceRelative_ = value;
      }
    }

    /// <summary>Field number for the "max_price_absolute" field.</summary>
    public const int MaxPriceAbsoluteFieldNumber = 6;
    private long maxPriceAbsolute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxPriceAbsolute {
      get { return maxPriceAbsolute_; }
      set {
        maxPriceAbsolute_ = value;
      }
    }

    /// <summary>Field number for the "voting_address" field.</summary>
    public const int VotingAddressFieldNumber = 7;
    private string votingAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VotingAddress {
      get { return votingAddress_; }
      set {
        votingAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pool_address" field.</summary>
    public const int PoolAddressFieldNumber = 8;
    private string poolAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PoolAddress {
      get { return poolAddress_; }
      set {
        poolAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pool_fees" field.</summary>
    public const int PoolFeesFieldNumber = 9;
    private double poolFees_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PoolFees {
      get { return poolFees_; }
      set {
        poolFees_ = value;
      }
    }

    /// <summary>Field number for the "max_per_block" field.</summary>
    public const int MaxPerBlockFieldNumber = 10;
    private long maxPerBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxPerBlock {
      get { return maxPerBlock_; }
      set {
        maxPerBlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartAutoBuyerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartAutoBuyerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Passphrase != other.Passphrase) return false;
      if (Account != other.Account) return false;
      if (BalanceToMaintain != other.BalanceToMaintain) return false;
      if (MaxFeePerKb != other.MaxFeePerKb) return false;
      if (MaxPriceRelative != other.MaxPriceRelative) return false;
      if (MaxPriceAbsolute != other.MaxPriceAbsolute) return false;
      if (VotingAddress != other.VotingAddress) return false;
      if (PoolAddress != other.PoolAddress) return false;
      if (PoolFees != other.PoolFees) return false;
      if (MaxPerBlock != other.MaxPerBlock) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Passphrase.Length != 0) hash ^= Passphrase.GetHashCode();
      if (Account != 0) hash ^= Account.GetHashCode();
      if (BalanceToMaintain != 0L) hash ^= BalanceToMaintain.GetHashCode();
      if (MaxFeePerKb != 0L) hash ^= MaxFeePerKb.GetHashCode();
      if (MaxPriceRelative != 0D) hash ^= MaxPriceRelative.GetHashCode();
      if (MaxPriceAbsolute != 0L) hash ^= MaxPriceAbsolute.GetHashCode();
      if (VotingAddress.Length != 0) hash ^= VotingAddress.GetHashCode();
      if (PoolAddress.Length != 0) hash ^= PoolAddress.GetHashCode();
      if (PoolFees != 0D) hash ^= PoolFees.GetHashCode();
      if (MaxPerBlock != 0L) hash ^= MaxPerBlock.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Passphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Passphrase);
      }
      if (Account != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Account);
      }
      if (BalanceToMaintain != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BalanceToMaintain);
      }
      if (MaxFeePerKb != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(MaxFeePerKb);
      }
      if (MaxPriceRelative != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(MaxPriceRelative);
      }
      if (MaxPriceAbsolute != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(MaxPriceAbsolute);
      }
      if (VotingAddress.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VotingAddress);
      }
      if (PoolAddress.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PoolAddress);
      }
      if (PoolFees != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(PoolFees);
      }
      if (MaxPerBlock != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(MaxPerBlock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Passphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Passphrase);
      }
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      if (BalanceToMaintain != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BalanceToMaintain);
      }
      if (MaxFeePerKb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxFeePerKb);
      }
      if (MaxPriceRelative != 0D) {
        size += 1 + 8;
      }
      if (MaxPriceAbsolute != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxPriceAbsolute);
      }
      if (VotingAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VotingAddress);
      }
      if (PoolAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PoolAddress);
      }
      if (PoolFees != 0D) {
        size += 1 + 8;
      }
      if (MaxPerBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxPerBlock);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartAutoBuyerRequest other) {
      if (other == null) {
        return;
      }
      if (other.Passphrase.Length != 0) {
        Passphrase = other.Passphrase;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
      if (other.BalanceToMaintain != 0L) {
        BalanceToMaintain = other.BalanceToMaintain;
      }
      if (other.MaxFeePerKb != 0L) {
        MaxFeePerKb = other.MaxFeePerKb;
      }
      if (other.MaxPriceRelative != 0D) {
        MaxPriceRelative = other.MaxPriceRelative;
      }
      if (other.MaxPriceAbsolute != 0L) {
        MaxPriceAbsolute = other.MaxPriceAbsolute;
      }
      if (other.VotingAddress.Length != 0) {
        VotingAddress = other.VotingAddress;
      }
      if (other.PoolAddress.Length != 0) {
        PoolAddress = other.PoolAddress;
      }
      if (other.PoolFees != 0D) {
        PoolFees = other.PoolFees;
      }
      if (other.MaxPerBlock != 0L) {
        MaxPerBlock = other.MaxPerBlock;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Passphrase = input.ReadBytes();
            break;
          }
          case 16: {
            Account = input.ReadUInt32();
            break;
          }
          case 24: {
            BalanceToMaintain = input.ReadInt64();
            break;
          }
          case 32: {
            MaxFeePerKb = input.ReadInt64();
            break;
          }
          case 41: {
            MaxPriceRelative = input.ReadDouble();
            break;
          }
          case 48: {
            MaxPriceAbsolute = input.ReadInt64();
            break;
          }
          case 58: {
            VotingAddress = input.ReadString();
            break;
          }
          case 66: {
            PoolAddress = input.ReadString();
            break;
          }
          case 73: {
            PoolFees = input.ReadDouble();
            break;
          }
          case 80: {
            MaxPerBlock = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartAutoBuyerResponse : pb::IMessage<StartAutoBuyerResponse> {
    private static readonly pb::MessageParser<StartAutoBuyerResponse> _parser = new pb::MessageParser<StartAutoBuyerResponse>(() => new StartAutoBuyerResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartAutoBuyerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartAutoBuyerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartAutoBuyerResponse(StartAutoBuyerResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartAutoBuyerResponse Clone() {
      return new StartAutoBuyerResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartAutoBuyerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartAutoBuyerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartAutoBuyerResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StopAutoBuyerRequest : pb::IMessage<StopAutoBuyerRequest> {
    private static readonly pb::MessageParser<StopAutoBuyerRequest> _parser = new pb::MessageParser<StopAutoBuyerRequest>(() => new StopAutoBuyerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopAutoBuyerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopAutoBuyerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopAutoBuyerRequest(StopAutoBuyerRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopAutoBuyerRequest Clone() {
      return new StopAutoBuyerRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopAutoBuyerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopAutoBuyerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopAutoBuyerRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StopAutoBuyerResponse : pb::IMessage<StopAutoBuyerResponse> {
    private static readonly pb::MessageParser<StopAutoBuyerResponse> _parser = new pb::MessageParser<StopAutoBuyerResponse>(() => new StopAutoBuyerResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopAutoBuyerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopAutoBuyerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopAutoBuyerResponse(StopAutoBuyerResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopAutoBuyerResponse Clone() {
      return new StopAutoBuyerResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopAutoBuyerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopAutoBuyerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopAutoBuyerResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class TicketBuyerConfigRequest : pb::IMessage<TicketBuyerConfigRequest> {
    private static readonly pb::MessageParser<TicketBuyerConfigRequest> _parser = new pb::MessageParser<TicketBuyerConfigRequest>(() => new TicketBuyerConfigRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketBuyerConfigRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketBuyerConfigRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketBuyerConfigRequest(TicketBuyerConfigRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketBuyerConfigRequest Clone() {
      return new TicketBuyerConfigRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketBuyerConfigRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketBuyerConfigRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketBuyerConfigRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class TicketBuyerConfigResponse : pb::IMessage<TicketBuyerConfigResponse> {
    private static readonly pb::MessageParser<TicketBuyerConfigResponse> _parser = new pb::MessageParser<TicketBuyerConfigResponse>(() => new TicketBuyerConfigResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketBuyerConfigResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketBuyerConfigResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketBuyerConfigResponse(TicketBuyerConfigResponse other) : this() {
      account_ = other.account_;
      avgPriceMode_ = other.avgPriceMode_;
      avgPriceVWAPDelta_ = other.avgPriceVWAPDelta_;
      balanceToMaintain_ = other.balanceToMaintain_;
      blocksToAvg_ = other.blocksToAvg_;
      dontWaitForTickets_ = other.dontWaitForTickets_;
      expiryDelta_ = other.expiryDelta_;
      feeSource_ = other.feeSource_;
      feeTargetScaling_ = other.feeTargetScaling_;
      minFee_ = other.minFee_;
      maxFee_ = other.maxFee_;
      maxPerBlock_ = other.maxPerBlock_;
      maxPriceAbsolute_ = other.maxPriceAbsolute_;
      maxPriceRelative_ = other.maxPriceRelative_;
      maxInMempool_ = other.maxInMempool_;
      poolAddress_ = other.poolAddress_;
      poolFees_ = other.poolFees_;
      spreadTicketPurchases_ = other.spreadTicketPurchases_;
      votingAddress_ = other.votingAddress_;
      txFee_ = other.txFee_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketBuyerConfigResponse Clone() {
      return new TicketBuyerConfigResponse(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private uint account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "avg_price_mode" field.</summary>
    public const int AvgPriceModeFieldNumber = 2;
    private string avgPriceMode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvgPriceMode {
      get { return avgPriceMode_; }
      set {
        avgPriceMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avg_priceVWAP_delta" field.</summary>
    public const int AvgPriceVWAPDeltaFieldNumber = 3;
    private long avgPriceVWAPDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AvgPriceVWAPDelta {
      get { return avgPriceVWAPDelta_; }
      set {
        avgPriceVWAPDelta_ = value;
      }
    }

    /// <summary>Field number for the "balance_to_maintain" field.</summary>
    public const int BalanceToMaintainFieldNumber = 4;
    private long balanceToMaintain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BalanceToMaintain {
      get { return balanceToMaintain_; }
      set {
        balanceToMaintain_ = value;
      }
    }

    /// <summary>Field number for the "blocks_to_avg" field.</summary>
    public const int BlocksToAvgFieldNumber = 5;
    private long blocksToAvg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlocksToAvg {
      get { return blocksToAvg_; }
      set {
        blocksToAvg_ = value;
      }
    }

    /// <summary>Field number for the "dont_wait_for_tickets" field.</summary>
    public const int DontWaitForTicketsFieldNumber = 6;
    private bool dontWaitForTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DontWaitForTickets {
      get { return dontWaitForTickets_; }
      set {
        dontWaitForTickets_ = value;
      }
    }

    /// <summary>Field number for the "expiry_delta" field.</summary>
    public const int ExpiryDeltaFieldNumber = 7;
    private long expiryDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiryDelta {
      get { return expiryDelta_; }
      set {
        expiryDelta_ = value;
      }
    }

    /// <summary>Field number for the "fee_source" field.</summary>
    public const int FeeSourceFieldNumber = 8;
    private string feeSource_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeeSource {
      get { return feeSource_; }
      set {
        feeSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fee_target_scaling" field.</summary>
    public const int FeeTargetScalingFieldNumber = 9;
    private double feeTargetScaling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FeeTargetScaling {
      get { return feeTargetScaling_; }
      set {
        feeTargetScaling_ = value;
      }
    }

    /// <summary>Field number for the "min_fee" field.</summary>
    public const int MinFeeFieldNumber = 10;
    private long minFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinFee {
      get { return minFee_; }
      set {
        minFee_ = value;
      }
    }

    /// <summary>Field number for the "max_fee" field.</summary>
    public const int MaxFeeFieldNumber = 12;
    private long maxFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxFee {
      get { return maxFee_; }
      set {
        maxFee_ = value;
      }
    }

    /// <summary>Field number for the "max_per_block" field.</summary>
    public const int MaxPerBlockFieldNumber = 13;
    private long maxPerBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxPerBlock {
      get { return maxPerBlock_; }
      set {
        maxPerBlock_ = value;
      }
    }

    /// <summary>Field number for the "max_price_absolute" field.</summary>
    public const int MaxPriceAbsoluteFieldNumber = 14;
    private long maxPriceAbsolute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxPriceAbsolute {
      get { return maxPriceAbsolute_; }
      set {
        maxPriceAbsolute_ = value;
      }
    }

    /// <summary>Field number for the "max_price_relative" field.</summary>
    public const int MaxPriceRelativeFieldNumber = 15;
    private double maxPriceRelative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxPriceRelative {
      get { return maxPriceRelative_; }
      set {
        maxPriceRelative_ = value;
      }
    }

    /// <summary>Field number for the "max_in_mempool" field.</summary>
    public const int MaxInMempoolFieldNumber = 17;
    private long maxInMempool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxInMempool {
      get { return maxInMempool_; }
      set {
        maxInMempool_ = value;
      }
    }

    /// <summary>Field number for the "pool_address" field.</summary>
    public const int PoolAddressFieldNumber = 18;
    private string poolAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PoolAddress {
      get { return poolAddress_; }
      set {
        poolAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pool_fees" field.</summary>
    public const int PoolFeesFieldNumber = 19;
    private double poolFees_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PoolFees {
      get { return poolFees_; }
      set {
        poolFees_ = value;
      }
    }

    /// <summary>Field number for the "spread_ticket_purchases" field.</summary>
    public const int SpreadTicketPurchasesFieldNumber = 20;
    private bool spreadTicketPurchases_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpreadTicketPurchases {
      get { return spreadTicketPurchases_; }
      set {
        spreadTicketPurchases_ = value;
      }
    }

    /// <summary>Field number for the "voting_address" field.</summary>
    public const int VotingAddressFieldNumber = 21;
    private string votingAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VotingAddress {
      get { return votingAddress_; }
      set {
        votingAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tx_fee" field.</summary>
    public const int TxFeeFieldNumber = 22;
    private long txFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TxFee {
      get { return txFee_; }
      set {
        txFee_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketBuyerConfigResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketBuyerConfigResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (AvgPriceMode != other.AvgPriceMode) return false;
      if (AvgPriceVWAPDelta != other.AvgPriceVWAPDelta) return false;
      if (BalanceToMaintain != other.BalanceToMaintain) return false;
      if (BlocksToAvg != other.BlocksToAvg) return false;
      if (DontWaitForTickets != other.DontWaitForTickets) return false;
      if (ExpiryDelta != other.ExpiryDelta) return false;
      if (FeeSource != other.FeeSource) return false;
      if (FeeTargetScaling != other.FeeTargetScaling) return false;
      if (MinFee != other.MinFee) return false;
      if (MaxFee != other.MaxFee) return false;
      if (MaxPerBlock != other.MaxPerBlock) return false;
      if (MaxPriceAbsolute != other.MaxPriceAbsolute) return false;
      if (MaxPriceRelative != other.MaxPriceRelative) return false;
      if (MaxInMempool != other.MaxInMempool) return false;
      if (PoolAddress != other.PoolAddress) return false;
      if (PoolFees != other.PoolFees) return false;
      if (SpreadTicketPurchases != other.SpreadTicketPurchases) return false;
      if (VotingAddress != other.VotingAddress) return false;
      if (TxFee != other.TxFee) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account != 0) hash ^= Account.GetHashCode();
      if (AvgPriceMode.Length != 0) hash ^= AvgPriceMode.GetHashCode();
      if (AvgPriceVWAPDelta != 0L) hash ^= AvgPriceVWAPDelta.GetHashCode();
      if (BalanceToMaintain != 0L) hash ^= BalanceToMaintain.GetHashCode();
      if (BlocksToAvg != 0L) hash ^= BlocksToAvg.GetHashCode();
      if (DontWaitForTickets != false) hash ^= DontWaitForTickets.GetHashCode();
      if (ExpiryDelta != 0L) hash ^= ExpiryDelta.GetHashCode();
      if (FeeSource.Length != 0) hash ^= FeeSource.GetHashCode();
      if (FeeTargetScaling != 0D) hash ^= FeeTargetScaling.GetHashCode();
      if (MinFee != 0L) hash ^= MinFee.GetHashCode();
      if (MaxFee != 0L) hash ^= MaxFee.GetHashCode();
      if (MaxPerBlock != 0L) hash ^= MaxPerBlock.GetHashCode();
      if (MaxPriceAbsolute != 0L) hash ^= MaxPriceAbsolute.GetHashCode();
      if (MaxPriceRelative != 0D) hash ^= MaxPriceRelative.GetHashCode();
      if (MaxInMempool != 0L) hash ^= MaxInMempool.GetHashCode();
      if (PoolAddress.Length != 0) hash ^= PoolAddress.GetHashCode();
      if (PoolFees != 0D) hash ^= PoolFees.GetHashCode();
      if (SpreadTicketPurchases != false) hash ^= SpreadTicketPurchases.GetHashCode();
      if (VotingAddress.Length != 0) hash ^= VotingAddress.GetHashCode();
      if (TxFee != 0L) hash ^= TxFee.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Account);
      }
      if (AvgPriceMode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AvgPriceMode);
      }
      if (AvgPriceVWAPDelta != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AvgPriceVWAPDelta);
      }
      if (BalanceToMaintain != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(BalanceToMaintain);
      }
      if (BlocksToAvg != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(BlocksToAvg);
      }
      if (DontWaitForTickets != false) {
        output.WriteRawTag(48);
        output.WriteBool(DontWaitForTickets);
      }
      if (ExpiryDelta != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ExpiryDelta);
      }
      if (FeeSource.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(FeeSource);
      }
      if (FeeTargetScaling != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(FeeTargetScaling);
      }
      if (MinFee != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(MinFee);
      }
      if (MaxFee != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(MaxFee);
      }
      if (MaxPerBlock != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(MaxPerBlock);
      }
      if (MaxPriceAbsolute != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(MaxPriceAbsolute);
      }
      if (MaxPriceRelative != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(MaxPriceRelative);
      }
      if (MaxInMempool != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(MaxInMempool);
      }
      if (PoolAddress.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(PoolAddress);
      }
      if (PoolFees != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(PoolFees);
      }
      if (SpreadTicketPurchases != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(SpreadTicketPurchases);
      }
      if (VotingAddress.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(VotingAddress);
      }
      if (TxFee != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(TxFee);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      if (AvgPriceMode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvgPriceMode);
      }
      if (AvgPriceVWAPDelta != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AvgPriceVWAPDelta);
      }
      if (BalanceToMaintain != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BalanceToMaintain);
      }
      if (BlocksToAvg != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlocksToAvg);
      }
      if (DontWaitForTickets != false) {
        size += 1 + 1;
      }
      if (ExpiryDelta != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiryDelta);
      }
      if (FeeSource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeeSource);
      }
      if (FeeTargetScaling != 0D) {
        size += 1 + 8;
      }
      if (MinFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinFee);
      }
      if (MaxFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxFee);
      }
      if (MaxPerBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxPerBlock);
      }
      if (MaxPriceAbsolute != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxPriceAbsolute);
      }
      if (MaxPriceRelative != 0D) {
        size += 1 + 8;
      }
      if (MaxInMempool != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MaxInMempool);
      }
      if (PoolAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PoolAddress);
      }
      if (PoolFees != 0D) {
        size += 2 + 8;
      }
      if (SpreadTicketPurchases != false) {
        size += 2 + 1;
      }
      if (VotingAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VotingAddress);
      }
      if (TxFee != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TxFee);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketBuyerConfigResponse other) {
      if (other == null) {
        return;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
      if (other.AvgPriceMode.Length != 0) {
        AvgPriceMode = other.AvgPriceMode;
      }
      if (other.AvgPriceVWAPDelta != 0L) {
        AvgPriceVWAPDelta = other.AvgPriceVWAPDelta;
      }
      if (other.BalanceToMaintain != 0L) {
        BalanceToMaintain = other.BalanceToMaintain;
      }
      if (other.BlocksToAvg != 0L) {
        BlocksToAvg = other.BlocksToAvg;
      }
      if (other.DontWaitForTickets != false) {
        DontWaitForTickets = other.DontWaitForTickets;
      }
      if (other.ExpiryDelta != 0L) {
        ExpiryDelta = other.ExpiryDelta;
      }
      if (other.FeeSource.Length != 0) {
        FeeSource = other.FeeSource;
      }
      if (other.FeeTargetScaling != 0D) {
        FeeTargetScaling = other.FeeTargetScaling;
      }
      if (other.MinFee != 0L) {
        MinFee = other.MinFee;
      }
      if (other.MaxFee != 0L) {
        MaxFee = other.MaxFee;
      }
      if (other.MaxPerBlock != 0L) {
        MaxPerBlock = other.MaxPerBlock;
      }
      if (other.MaxPriceAbsolute != 0L) {
        MaxPriceAbsolute = other.MaxPriceAbsolute;
      }
      if (other.MaxPriceRelative != 0D) {
        MaxPriceRelative = other.MaxPriceRelative;
      }
      if (other.MaxInMempool != 0L) {
        MaxInMempool = other.MaxInMempool;
      }
      if (other.PoolAddress.Length != 0) {
        PoolAddress = other.PoolAddress;
      }
      if (other.PoolFees != 0D) {
        PoolFees = other.PoolFees;
      }
      if (other.SpreadTicketPurchases != false) {
        SpreadTicketPurchases = other.SpreadTicketPurchases;
      }
      if (other.VotingAddress.Length != 0) {
        VotingAddress = other.VotingAddress;
      }
      if (other.TxFee != 0L) {
        TxFee = other.TxFee;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadUInt32();
            break;
          }
          case 18: {
            AvgPriceMode = input.ReadString();
            break;
          }
          case 24: {
            AvgPriceVWAPDelta = input.ReadInt64();
            break;
          }
          case 32: {
            BalanceToMaintain = input.ReadInt64();
            break;
          }
          case 40: {
            BlocksToAvg = input.ReadInt64();
            break;
          }
          case 48: {
            DontWaitForTickets = input.ReadBool();
            break;
          }
          case 56: {
            ExpiryDelta = input.ReadInt64();
            break;
          }
          case 66: {
            FeeSource = input.ReadString();
            break;
          }
          case 73: {
            FeeTargetScaling = input.ReadDouble();
            break;
          }
          case 80: {
            MinFee = input.ReadInt64();
            break;
          }
          case 96: {
            MaxFee = input.ReadInt64();
            break;
          }
          case 104: {
            MaxPerBlock = input.ReadInt64();
            break;
          }
          case 112: {
            MaxPriceAbsolute = input.ReadInt64();
            break;
          }
          case 121: {
            MaxPriceRelative = input.ReadDouble();
            break;
          }
          case 136: {
            MaxInMempool = input.ReadInt64();
            break;
          }
          case 146: {
            PoolAddress = input.ReadString();
            break;
          }
          case 153: {
            PoolFees = input.ReadDouble();
            break;
          }
          case 160: {
            SpreadTicketPurchases = input.ReadBool();
            break;
          }
          case 170: {
            VotingAddress = input.ReadString();
            break;
          }
          case 176: {
            TxFee = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetAccountRequest : pb::IMessage<SetAccountRequest> {
    private static readonly pb::MessageParser<SetAccountRequest> _parser = new pb::MessageParser<SetAccountRequest>(() => new SetAccountRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetAccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAccountRequest(SetAccountRequest other) : this() {
      account_ = other.account_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAccountRequest Clone() {
      return new SetAccountRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private uint account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetAccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account != 0) hash ^= Account.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Account);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Account);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.Account != 0) {
        Account = other.Account;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetAccountResponse : pb::IMessage<SetAccountResponse> {
    private static readonly pb::MessageParser<SetAccountResponse> _parser = new pb::MessageParser<SetAccountResponse>(() => new SetAccountResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetAccountResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAccountResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAccountResponse(SetAccountResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAccountResponse Clone() {
      return new SetAccountResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetAccountResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetAccountResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetAccountResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SetBalanceToMaintainRequest : pb::IMessage<SetBalanceToMaintainRequest> {
    private static readonly pb::MessageParser<SetBalanceToMaintainRequest> _parser = new pb::MessageParser<SetBalanceToMaintainRequest>(() => new SetBalanceToMaintainRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetBalanceToMaintainRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBalanceToMaintainRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBalanceToMaintainRequest(SetBalanceToMaintainRequest other) : this() {
      balanceToMaintain_ = other.balanceToMaintain_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBalanceToMaintainRequest Clone() {
      return new SetBalanceToMaintainRequest(this);
    }

    /// <summary>Field number for the "balance_to_maintain" field.</summary>
    public const int BalanceToMaintainFieldNumber = 1;
    private long balanceToMaintain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BalanceToMaintain {
      get { return balanceToMaintain_; }
      set {
        balanceToMaintain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetBalanceToMaintainRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetBalanceToMaintainRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BalanceToMaintain != other.BalanceToMaintain) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BalanceToMaintain != 0L) hash ^= BalanceToMaintain.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BalanceToMaintain != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BalanceToMaintain);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BalanceToMaintain != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BalanceToMaintain);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetBalanceToMaintainRequest other) {
      if (other == null) {
        return;
      }
      if (other.BalanceToMaintain != 0L) {
        BalanceToMaintain = other.BalanceToMaintain;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BalanceToMaintain = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetBalanceToMaintainResponse : pb::IMessage<SetBalanceToMaintainResponse> {
    private static readonly pb::MessageParser<SetBalanceToMaintainResponse> _parser = new pb::MessageParser<SetBalanceToMaintainResponse>(() => new SetBalanceToMaintainResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetBalanceToMaintainResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBalanceToMaintainResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBalanceToMaintainResponse(SetBalanceToMaintainResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBalanceToMaintainResponse Clone() {
      return new SetBalanceToMaintainResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetBalanceToMaintainResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetBalanceToMaintainResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetBalanceToMaintainResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SetMaxFeeRequest : pb::IMessage<SetMaxFeeRequest> {
    private static readonly pb::MessageParser<SetMaxFeeRequest> _parser = new pb::MessageParser<SetMaxFeeRequest>(() => new SetMaxFeeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetMaxFeeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxFeeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxFeeRequest(SetMaxFeeRequest other) : this() {
      maxFeePerKb_ = other.maxFeePerKb_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxFeeRequest Clone() {
      return new SetMaxFeeRequest(this);
    }

    /// <summary>Field number for the "max_fee_per_kb" field.</summary>
    public const int MaxFeePerKbFieldNumber = 1;
    private long maxFeePerKb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxFeePerKb {
      get { return maxFeePerKb_; }
      set {
        maxFeePerKb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetMaxFeeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetMaxFeeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxFeePerKb != other.MaxFeePerKb) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxFeePerKb != 0L) hash ^= MaxFeePerKb.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxFeePerKb != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MaxFeePerKb);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxFeePerKb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxFeePerKb);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetMaxFeeRequest other) {
      if (other == null) {
        return;
      }
      if (other.MaxFeePerKb != 0L) {
        MaxFeePerKb = other.MaxFeePerKb;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxFeePerKb = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetMaxFeeResponse : pb::IMessage<SetMaxFeeResponse> {
    private static readonly pb::MessageParser<SetMaxFeeResponse> _parser = new pb::MessageParser<SetMaxFeeResponse>(() => new SetMaxFeeResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetMaxFeeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxFeeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxFeeResponse(SetMaxFeeResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxFeeResponse Clone() {
      return new SetMaxFeeResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetMaxFeeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetMaxFeeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetMaxFeeResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SetMaxPriceRelativeRequest : pb::IMessage<SetMaxPriceRelativeRequest> {
    private static readonly pb::MessageParser<SetMaxPriceRelativeRequest> _parser = new pb::MessageParser<SetMaxPriceRelativeRequest>(() => new SetMaxPriceRelativeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetMaxPriceRelativeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPriceRelativeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPriceRelativeRequest(SetMaxPriceRelativeRequest other) : this() {
      maxPriceRelative_ = other.maxPriceRelative_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPriceRelativeRequest Clone() {
      return new SetMaxPriceRelativeRequest(this);
    }

    /// <summary>Field number for the "max_price_relative" field.</summary>
    public const int MaxPriceRelativeFieldNumber = 1;
    private double maxPriceRelative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxPriceRelative {
      get { return maxPriceRelative_; }
      set {
        maxPriceRelative_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetMaxPriceRelativeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetMaxPriceRelativeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxPriceRelative != other.MaxPriceRelative) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxPriceRelative != 0D) hash ^= MaxPriceRelative.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxPriceRelative != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MaxPriceRelative);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxPriceRelative != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetMaxPriceRelativeRequest other) {
      if (other == null) {
        return;
      }
      if (other.MaxPriceRelative != 0D) {
        MaxPriceRelative = other.MaxPriceRelative;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            MaxPriceRelative = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetMaxPriceRelativeResponse : pb::IMessage<SetMaxPriceRelativeResponse> {
    private static readonly pb::MessageParser<SetMaxPriceRelativeResponse> _parser = new pb::MessageParser<SetMaxPriceRelativeResponse>(() => new SetMaxPriceRelativeResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetMaxPriceRelativeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPriceRelativeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPriceRelativeResponse(SetMaxPriceRelativeResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPriceRelativeResponse Clone() {
      return new SetMaxPriceRelativeResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetMaxPriceRelativeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetMaxPriceRelativeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetMaxPriceRelativeResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SetMaxPriceAbsoluteRequest : pb::IMessage<SetMaxPriceAbsoluteRequest> {
    private static readonly pb::MessageParser<SetMaxPriceAbsoluteRequest> _parser = new pb::MessageParser<SetMaxPriceAbsoluteRequest>(() => new SetMaxPriceAbsoluteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetMaxPriceAbsoluteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPriceAbsoluteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPriceAbsoluteRequest(SetMaxPriceAbsoluteRequest other) : this() {
      maxPriceAbsolute_ = other.maxPriceAbsolute_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPriceAbsoluteRequest Clone() {
      return new SetMaxPriceAbsoluteRequest(this);
    }

    /// <summary>Field number for the "max_price_absolute" field.</summary>
    public const int MaxPriceAbsoluteFieldNumber = 1;
    private long maxPriceAbsolute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxPriceAbsolute {
      get { return maxPriceAbsolute_; }
      set {
        maxPriceAbsolute_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetMaxPriceAbsoluteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetMaxPriceAbsoluteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxPriceAbsolute != other.MaxPriceAbsolute) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxPriceAbsolute != 0L) hash ^= MaxPriceAbsolute.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxPriceAbsolute != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MaxPriceAbsolute);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxPriceAbsolute != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxPriceAbsolute);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetMaxPriceAbsoluteRequest other) {
      if (other == null) {
        return;
      }
      if (other.MaxPriceAbsolute != 0L) {
        MaxPriceAbsolute = other.MaxPriceAbsolute;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxPriceAbsolute = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetMaxPriceAbsoluteResponse : pb::IMessage<SetMaxPriceAbsoluteResponse> {
    private static readonly pb::MessageParser<SetMaxPriceAbsoluteResponse> _parser = new pb::MessageParser<SetMaxPriceAbsoluteResponse>(() => new SetMaxPriceAbsoluteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetMaxPriceAbsoluteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPriceAbsoluteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPriceAbsoluteResponse(SetMaxPriceAbsoluteResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPriceAbsoluteResponse Clone() {
      return new SetMaxPriceAbsoluteResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetMaxPriceAbsoluteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetMaxPriceAbsoluteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetMaxPriceAbsoluteResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SetVotingAddressRequest : pb::IMessage<SetVotingAddressRequest> {
    private static readonly pb::MessageParser<SetVotingAddressRequest> _parser = new pb::MessageParser<SetVotingAddressRequest>(() => new SetVotingAddressRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetVotingAddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVotingAddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVotingAddressRequest(SetVotingAddressRequest other) : this() {
      votingAddress_ = other.votingAddress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVotingAddressRequest Clone() {
      return new SetVotingAddressRequest(this);
    }

    /// <summary>Field number for the "voting_address" field.</summary>
    public const int VotingAddressFieldNumber = 1;
    private string votingAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VotingAddress {
      get { return votingAddress_; }
      set {
        votingAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetVotingAddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetVotingAddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VotingAddress != other.VotingAddress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VotingAddress.Length != 0) hash ^= VotingAddress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VotingAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VotingAddress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VotingAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VotingAddress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetVotingAddressRequest other) {
      if (other == null) {
        return;
      }
      if (other.VotingAddress.Length != 0) {
        VotingAddress = other.VotingAddress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            VotingAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetVotingAddressResponse : pb::IMessage<SetVotingAddressResponse> {
    private static readonly pb::MessageParser<SetVotingAddressResponse> _parser = new pb::MessageParser<SetVotingAddressResponse>(() => new SetVotingAddressResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetVotingAddressResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVotingAddressResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVotingAddressResponse(SetVotingAddressResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVotingAddressResponse Clone() {
      return new SetVotingAddressResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetVotingAddressResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetVotingAddressResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetVotingAddressResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SetPoolAddressRequest : pb::IMessage<SetPoolAddressRequest> {
    private static readonly pb::MessageParser<SetPoolAddressRequest> _parser = new pb::MessageParser<SetPoolAddressRequest>(() => new SetPoolAddressRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPoolAddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPoolAddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPoolAddressRequest(SetPoolAddressRequest other) : this() {
      poolAddress_ = other.poolAddress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPoolAddressRequest Clone() {
      return new SetPoolAddressRequest(this);
    }

    /// <summary>Field number for the "pool_address" field.</summary>
    public const int PoolAddressFieldNumber = 1;
    private string poolAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PoolAddress {
      get { return poolAddress_; }
      set {
        poolAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetPoolAddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetPoolAddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PoolAddress != other.PoolAddress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PoolAddress.Length != 0) hash ^= PoolAddress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PoolAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PoolAddress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PoolAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PoolAddress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetPoolAddressRequest other) {
      if (other == null) {
        return;
      }
      if (other.PoolAddress.Length != 0) {
        PoolAddress = other.PoolAddress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PoolAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetPoolAddressResponse : pb::IMessage<SetPoolAddressResponse> {
    private static readonly pb::MessageParser<SetPoolAddressResponse> _parser = new pb::MessageParser<SetPoolAddressResponse>(() => new SetPoolAddressResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPoolAddressResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPoolAddressResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPoolAddressResponse(SetPoolAddressResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPoolAddressResponse Clone() {
      return new SetPoolAddressResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetPoolAddressResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetPoolAddressResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetPoolAddressResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SetPoolFeesRequest : pb::IMessage<SetPoolFeesRequest> {
    private static readonly pb::MessageParser<SetPoolFeesRequest> _parser = new pb::MessageParser<SetPoolFeesRequest>(() => new SetPoolFeesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPoolFeesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPoolFeesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPoolFeesRequest(SetPoolFeesRequest other) : this() {
      poolFees_ = other.poolFees_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPoolFeesRequest Clone() {
      return new SetPoolFeesRequest(this);
    }

    /// <summary>Field number for the "pool_fees" field.</summary>
    public const int PoolFeesFieldNumber = 1;
    private double poolFees_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PoolFees {
      get { return poolFees_; }
      set {
        poolFees_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetPoolFeesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetPoolFeesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PoolFees != other.PoolFees) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PoolFees != 0D) hash ^= PoolFees.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PoolFees != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(PoolFees);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PoolFees != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetPoolFeesRequest other) {
      if (other == null) {
        return;
      }
      if (other.PoolFees != 0D) {
        PoolFees = other.PoolFees;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            PoolFees = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetPoolFeesResponse : pb::IMessage<SetPoolFeesResponse> {
    private static readonly pb::MessageParser<SetPoolFeesResponse> _parser = new pb::MessageParser<SetPoolFeesResponse>(() => new SetPoolFeesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPoolFeesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPoolFeesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPoolFeesResponse(SetPoolFeesResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPoolFeesResponse Clone() {
      return new SetPoolFeesResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetPoolFeesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetPoolFeesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetPoolFeesResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SetMaxPerBlockRequest : pb::IMessage<SetMaxPerBlockRequest> {
    private static readonly pb::MessageParser<SetMaxPerBlockRequest> _parser = new pb::MessageParser<SetMaxPerBlockRequest>(() => new SetMaxPerBlockRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetMaxPerBlockRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPerBlockRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPerBlockRequest(SetMaxPerBlockRequest other) : this() {
      maxPerBlock_ = other.maxPerBlock_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPerBlockRequest Clone() {
      return new SetMaxPerBlockRequest(this);
    }

    /// <summary>Field number for the "max_per_block" field.</summary>
    public const int MaxPerBlockFieldNumber = 1;
    private long maxPerBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxPerBlock {
      get { return maxPerBlock_; }
      set {
        maxPerBlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetMaxPerBlockRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetMaxPerBlockRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxPerBlock != other.MaxPerBlock) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxPerBlock != 0L) hash ^= MaxPerBlock.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxPerBlock != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MaxPerBlock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxPerBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxPerBlock);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetMaxPerBlockRequest other) {
      if (other == null) {
        return;
      }
      if (other.MaxPerBlock != 0L) {
        MaxPerBlock = other.MaxPerBlock;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxPerBlock = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetMaxPerBlockResponse : pb::IMessage<SetMaxPerBlockResponse> {
    private static readonly pb::MessageParser<SetMaxPerBlockResponse> _parser = new pb::MessageParser<SetMaxPerBlockResponse>(() => new SetMaxPerBlockResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetMaxPerBlockResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPerBlockResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPerBlockResponse(SetMaxPerBlockResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMaxPerBlockResponse Clone() {
      return new SetMaxPerBlockResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetMaxPerBlockResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetMaxPerBlockResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetMaxPerBlockResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class AgendasRequest : pb::IMessage<AgendasRequest> {
    private static readonly pb::MessageParser<AgendasRequest> _parser = new pb::MessageParser<AgendasRequest>(() => new AgendasRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AgendasRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgendasRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgendasRequest(AgendasRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgendasRequest Clone() {
      return new AgendasRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AgendasRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AgendasRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AgendasRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class AgendasResponse : pb::IMessage<AgendasResponse> {
    private static readonly pb::MessageParser<AgendasResponse> _parser = new pb::MessageParser<AgendasResponse>(() => new AgendasResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AgendasResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgendasResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgendasResponse(AgendasResponse other) : this() {
      version_ = other.version_;
      agendas_ = other.agendas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgendasResponse Clone() {
      return new AgendasResponse(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "agendas" field.</summary>
    public const int AgendasFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Walletrpc.AgendasResponse.Types.Agenda> _repeated_agendas_codec
        = pb::FieldCodec.ForMessage(18, global::Walletrpc.AgendasResponse.Types.Agenda.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.AgendasResponse.Types.Agenda> agendas_ = new pbc::RepeatedField<global::Walletrpc.AgendasResponse.Types.Agenda>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Walletrpc.AgendasResponse.Types.Agenda> Agendas {
      get { return agendas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AgendasResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AgendasResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if(!agendas_.Equals(other.agendas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      hash ^= agendas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version);
      }
      agendas_.WriteTo(output, _repeated_agendas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      size += agendas_.CalculateSize(_repeated_agendas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AgendasResponse other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      agendas_.Add(other.agendas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Version = input.ReadUInt32();
            break;
          }
          case 18: {
            agendas_.AddEntriesFrom(input, _repeated_agendas_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AgendasResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Agenda : pb::IMessage<Agenda> {
        private static readonly pb::MessageParser<Agenda> _parser = new pb::MessageParser<Agenda>(() => new Agenda());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Agenda> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Walletrpc.AgendasResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Agenda() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Agenda(Agenda other) : this() {
          id_ = other.id_;
          description_ = other.description_;
          mask_ = other.mask_;
          choices_ = other.choices_.Clone();
          startTime_ = other.startTime_;
          expireTime_ = other.expireTime_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Agenda Clone() {
          return new Agenda(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 2;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "mask" field.</summary>
        public const int MaskFieldNumber = 3;
        private uint mask_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Mask {
          get { return mask_; }
          set {
            mask_ = value;
          }
        }

        /// <summary>Field number for the "choices" field.</summary>
        public const int ChoicesFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Walletrpc.AgendasResponse.Types.Choice> _repeated_choices_codec
            = pb::FieldCodec.ForMessage(34, global::Walletrpc.AgendasResponse.Types.Choice.Parser);
        private readonly pbc::RepeatedField<global::Walletrpc.AgendasResponse.Types.Choice> choices_ = new pbc::RepeatedField<global::Walletrpc.AgendasResponse.Types.Choice>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Walletrpc.AgendasResponse.Types.Choice> Choices {
          get { return choices_; }
        }

        /// <summary>Field number for the "start_time" field.</summary>
        public const int StartTimeFieldNumber = 5;
        private long startTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long StartTime {
          get { return startTime_; }
          set {
            startTime_ = value;
          }
        }

        /// <summary>Field number for the "expire_time" field.</summary>
        public const int ExpireTimeFieldNumber = 6;
        private long expireTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ExpireTime {
          get { return expireTime_; }
          set {
            expireTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Agenda);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Agenda other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Description != other.Description) return false;
          if (Mask != other.Mask) return false;
          if(!choices_.Equals(other.choices_)) return false;
          if (StartTime != other.StartTime) return false;
          if (ExpireTime != other.ExpireTime) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (Mask != 0) hash ^= Mask.GetHashCode();
          hash ^= choices_.GetHashCode();
          if (StartTime != 0L) hash ^= StartTime.GetHashCode();
          if (ExpireTime != 0L) hash ^= ExpireTime.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Description);
          }
          if (Mask != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Mask);
          }
          choices_.WriteTo(output, _repeated_choices_codec);
          if (StartTime != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(StartTime);
          }
          if (ExpireTime != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(ExpireTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (Mask != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mask);
          }
          size += choices_.CalculateSize(_repeated_choices_codec);
          if (StartTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
          }
          if (ExpireTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Agenda other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          if (other.Mask != 0) {
            Mask = other.Mask;
          }
          choices_.Add(other.choices_);
          if (other.StartTime != 0L) {
            StartTime = other.StartTime;
          }
          if (other.ExpireTime != 0L) {
            ExpireTime = other.ExpireTime;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                Description = input.ReadString();
                break;
              }
              case 24: {
                Mask = input.ReadUInt32();
                break;
              }
              case 34: {
                choices_.AddEntriesFrom(input, _repeated_choices_codec);
                break;
              }
              case 40: {
                StartTime = input.ReadInt64();
                break;
              }
              case 48: {
                ExpireTime = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Choice : pb::IMessage<Choice> {
        private static readonly pb::MessageParser<Choice> _parser = new pb::MessageParser<Choice>(() => new Choice());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Choice> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Walletrpc.AgendasResponse.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Choice() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Choice(Choice other) : this() {
          id_ = other.id_;
          description_ = other.description_;
          bits_ = other.bits_;
          isAbstain_ = other.isAbstain_;
          isNo_ = other.isNo_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Choice Clone() {
          return new Choice(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 2;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "bits" field.</summary>
        public const int BitsFieldNumber = 3;
        private uint bits_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Bits {
          get { return bits_; }
          set {
            bits_ = value;
          }
        }

        /// <summary>Field number for the "is_abstain" field.</summary>
        public const int IsAbstainFieldNumber = 4;
        private bool isAbstain_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsAbstain {
          get { return isAbstain_; }
          set {
            isAbstain_ = value;
          }
        }

        /// <summary>Field number for the "is_no" field.</summary>
        public const int IsNoFieldNumber = 5;
        private bool isNo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsNo {
          get { return isNo_; }
          set {
            isNo_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Choice);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Choice other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Description != other.Description) return false;
          if (Bits != other.Bits) return false;
          if (IsAbstain != other.IsAbstain) return false;
          if (IsNo != other.IsNo) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (Bits != 0) hash ^= Bits.GetHashCode();
          if (IsAbstain != false) hash ^= IsAbstain.GetHashCode();
          if (IsNo != false) hash ^= IsNo.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Description);
          }
          if (Bits != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Bits);
          }
          if (IsAbstain != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsAbstain);
          }
          if (IsNo != false) {
            output.WriteRawTag(40);
            output.WriteBool(IsNo);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (Bits != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bits);
          }
          if (IsAbstain != false) {
            size += 1 + 1;
          }
          if (IsNo != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Choice other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          if (other.Bits != 0) {
            Bits = other.Bits;
          }
          if (other.IsAbstain != false) {
            IsAbstain = other.IsAbstain;
          }
          if (other.IsNo != false) {
            IsNo = other.IsNo;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                Description = input.ReadString();
                break;
              }
              case 24: {
                Bits = input.ReadUInt32();
                break;
              }
              case 32: {
                IsAbstain = input.ReadBool();
                break;
              }
              case 40: {
                IsNo = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class VoteChoicesRequest : pb::IMessage<VoteChoicesRequest> {
    private static readonly pb::MessageParser<VoteChoicesRequest> _parser = new pb::MessageParser<VoteChoicesRequest>(() => new VoteChoicesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoteChoicesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteChoicesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteChoicesRequest(VoteChoicesRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteChoicesRequest Clone() {
      return new VoteChoicesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoteChoicesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoteChoicesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoteChoicesRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class VoteChoicesResponse : pb::IMessage<VoteChoicesResponse> {
    private static readonly pb::MessageParser<VoteChoicesResponse> _parser = new pb::MessageParser<VoteChoicesResponse>(() => new VoteChoicesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoteChoicesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteChoicesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteChoicesResponse(VoteChoicesResponse other) : this() {
      version_ = other.version_;
      choices_ = other.choices_.Clone();
      votebits_ = other.votebits_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteChoicesResponse Clone() {
      return new VoteChoicesResponse(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "choices" field.</summary>
    public const int ChoicesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Walletrpc.VoteChoicesResponse.Types.Choice> _repeated_choices_codec
        = pb::FieldCodec.ForMessage(18, global::Walletrpc.VoteChoicesResponse.Types.Choice.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.VoteChoicesResponse.Types.Choice> choices_ = new pbc::RepeatedField<global::Walletrpc.VoteChoicesResponse.Types.Choice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Walletrpc.VoteChoicesResponse.Types.Choice> Choices {
      get { return choices_; }
    }

    /// <summary>Field number for the "votebits" field.</summary>
    public const int VotebitsFieldNumber = 3;
    private uint votebits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Votebits {
      get { return votebits_; }
      set {
        votebits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoteChoicesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoteChoicesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if(!choices_.Equals(other.choices_)) return false;
      if (Votebits != other.Votebits) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      hash ^= choices_.GetHashCode();
      if (Votebits != 0) hash ^= Votebits.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version);
      }
      choices_.WriteTo(output, _repeated_choices_codec);
      if (Votebits != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Votebits);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      size += choices_.CalculateSize(_repeated_choices_codec);
      if (Votebits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Votebits);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoteChoicesResponse other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      choices_.Add(other.choices_);
      if (other.Votebits != 0) {
        Votebits = other.Votebits;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Version = input.ReadUInt32();
            break;
          }
          case 18: {
            choices_.AddEntriesFrom(input, _repeated_choices_codec);
            break;
          }
          case 24: {
            Votebits = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VoteChoicesResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Choice : pb::IMessage<Choice> {
        private static readonly pb::MessageParser<Choice> _parser = new pb::MessageParser<Choice>(() => new Choice());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Choice> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Walletrpc.VoteChoicesResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Choice() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Choice(Choice other) : this() {
          agendaId_ = other.agendaId_;
          agendaDescription_ = other.agendaDescription_;
          choiceId_ = other.choiceId_;
          choiceDescription_ = other.choiceDescription_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Choice Clone() {
          return new Choice(this);
        }

        /// <summary>Field number for the "agenda_id" field.</summary>
        public const int AgendaIdFieldNumber = 1;
        private string agendaId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AgendaId {
          get { return agendaId_; }
          set {
            agendaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "agenda_description" field.</summary>
        public const int AgendaDescriptionFieldNumber = 2;
        private string agendaDescription_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AgendaDescription {
          get { return agendaDescription_; }
          set {
            agendaDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "choice_id" field.</summary>
        public const int ChoiceIdFieldNumber = 3;
        private string choiceId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChoiceId {
          get { return choiceId_; }
          set {
            choiceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "choice_description" field.</summary>
        public const int ChoiceDescriptionFieldNumber = 4;
        private string choiceDescription_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChoiceDescription {
          get { return choiceDescription_; }
          set {
            choiceDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Choice);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Choice other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AgendaId != other.AgendaId) return false;
          if (AgendaDescription != other.AgendaDescription) return false;
          if (ChoiceId != other.ChoiceId) return false;
          if (ChoiceDescription != other.ChoiceDescription) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AgendaId.Length != 0) hash ^= AgendaId.GetHashCode();
          if (AgendaDescription.Length != 0) hash ^= AgendaDescription.GetHashCode();
          if (ChoiceId.Length != 0) hash ^= ChoiceId.GetHashCode();
          if (ChoiceDescription.Length != 0) hash ^= ChoiceDescription.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AgendaId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(AgendaId);
          }
          if (AgendaDescription.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(AgendaDescription);
          }
          if (ChoiceId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(ChoiceId);
          }
          if (ChoiceDescription.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(ChoiceDescription);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AgendaId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AgendaId);
          }
          if (AgendaDescription.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AgendaDescription);
          }
          if (ChoiceId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ChoiceId);
          }
          if (ChoiceDescription.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ChoiceDescription);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Choice other) {
          if (other == null) {
            return;
          }
          if (other.AgendaId.Length != 0) {
            AgendaId = other.AgendaId;
          }
          if (other.AgendaDescription.Length != 0) {
            AgendaDescription = other.AgendaDescription;
          }
          if (other.ChoiceId.Length != 0) {
            ChoiceId = other.ChoiceId;
          }
          if (other.ChoiceDescription.Length != 0) {
            ChoiceDescription = other.ChoiceDescription;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                AgendaId = input.ReadString();
                break;
              }
              case 18: {
                AgendaDescription = input.ReadString();
                break;
              }
              case 26: {
                ChoiceId = input.ReadString();
                break;
              }
              case 34: {
                ChoiceDescription = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SetVoteChoicesRequest : pb::IMessage<SetVoteChoicesRequest> {
    private static readonly pb::MessageParser<SetVoteChoicesRequest> _parser = new pb::MessageParser<SetVoteChoicesRequest>(() => new SetVoteChoicesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetVoteChoicesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVoteChoicesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVoteChoicesRequest(SetVoteChoicesRequest other) : this() {
      choices_ = other.choices_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVoteChoicesRequest Clone() {
      return new SetVoteChoicesRequest(this);
    }

    /// <summary>Field number for the "choices" field.</summary>
    public const int ChoicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Walletrpc.SetVoteChoicesRequest.Types.Choice> _repeated_choices_codec
        = pb::FieldCodec.ForMessage(10, global::Walletrpc.SetVoteChoicesRequest.Types.Choice.Parser);
    private readonly pbc::RepeatedField<global::Walletrpc.SetVoteChoicesRequest.Types.Choice> choices_ = new pbc::RepeatedField<global::Walletrpc.SetVoteChoicesRequest.Types.Choice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Walletrpc.SetVoteChoicesRequest.Types.Choice> Choices {
      get { return choices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetVoteChoicesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetVoteChoicesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!choices_.Equals(other.choices_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= choices_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      choices_.WriteTo(output, _repeated_choices_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += choices_.CalculateSize(_repeated_choices_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetVoteChoicesRequest other) {
      if (other == null) {
        return;
      }
      choices_.Add(other.choices_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            choices_.AddEntriesFrom(input, _repeated_choices_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SetVoteChoicesRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Choice : pb::IMessage<Choice> {
        private static readonly pb::MessageParser<Choice> _parser = new pb::MessageParser<Choice>(() => new Choice());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Choice> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Walletrpc.SetVoteChoicesRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Choice() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Choice(Choice other) : this() {
          agendaId_ = other.agendaId_;
          choiceId_ = other.choiceId_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Choice Clone() {
          return new Choice(this);
        }

        /// <summary>Field number for the "agenda_id" field.</summary>
        public const int AgendaIdFieldNumber = 1;
        private string agendaId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AgendaId {
          get { return agendaId_; }
          set {
            agendaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "choice_id" field.</summary>
        public const int ChoiceIdFieldNumber = 2;
        private string choiceId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChoiceId {
          get { return choiceId_; }
          set {
            choiceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Choice);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Choice other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AgendaId != other.AgendaId) return false;
          if (ChoiceId != other.ChoiceId) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AgendaId.Length != 0) hash ^= AgendaId.GetHashCode();
          if (ChoiceId.Length != 0) hash ^= ChoiceId.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AgendaId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(AgendaId);
          }
          if (ChoiceId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ChoiceId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AgendaId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AgendaId);
          }
          if (ChoiceId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ChoiceId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Choice other) {
          if (other == null) {
            return;
          }
          if (other.AgendaId.Length != 0) {
            AgendaId = other.AgendaId;
          }
          if (other.ChoiceId.Length != 0) {
            ChoiceId = other.ChoiceId;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                AgendaId = input.ReadString();
                break;
              }
              case 18: {
                ChoiceId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SetVoteChoicesResponse : pb::IMessage<SetVoteChoicesResponse> {
    private static readonly pb::MessageParser<SetVoteChoicesResponse> _parser = new pb::MessageParser<SetVoteChoicesResponse>(() => new SetVoteChoicesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetVoteChoicesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Walletrpc.ApiReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVoteChoicesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVoteChoicesResponse(SetVoteChoicesResponse other) : this() {
      votebits_ = other.votebits_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVoteChoicesResponse Clone() {
      return new SetVoteChoicesResponse(this);
    }

    /// <summary>Field number for the "votebits" field.</summary>
    public const int VotebitsFieldNumber = 1;
    private uint votebits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Votebits {
      get { return votebits_; }
      set {
        votebits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetVoteChoicesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetVoteChoicesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Votebits != other.Votebits) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Votebits != 0) hash ^= Votebits.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Votebits != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Votebits);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Votebits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Votebits);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetVoteChoicesResponse other) {
      if (other == null) {
        return;
      }
      if (other.Votebits != 0) {
        Votebits = other.Votebits;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Votebits = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
